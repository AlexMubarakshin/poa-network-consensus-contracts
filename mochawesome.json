{
  "stats": {
    "suites": 158,
    "tests": 598,
    "passes": 598,
    "pending": 0,
    "failures": 0,
    "start": "2018-10-08T07:17:12.914Z",
    "end": "2018-10-08T07:35:22.540Z",
    "duration": 1089626,
    "testsRegistered": 598,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "9a7b9d62-015c-4489-b738-057515facba0",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "0062acd0-5d24-4aec-b44b-a56b94c84441",
        "title": "BallotsStorageMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "BallotsStorageMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "eac653c5-6d23-43e2-8ca1-6ab9db2986dc",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "BallotsStorageMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "3abbafd5-f4da-4fc1-a149-f15220e31ab0",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "BallotsStorageMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "2d8bda6f-5672-4869-9d9b-c58d4aeb959e",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "5517aa14-4b8d-43c5-9088-f10d165fc307",
        "title": "EternalStorageProxyMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "EternalStorageProxyMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "4717cb39-9bbf-4613-acfe-b4d83cc13af9",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "EternalStorageProxyMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "6fca41cb-2be7-432d-959b-82043bd6c9e6",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "EternalStorageProxyMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "8a847380-ea4e-47e9-8ea1-9dd310e01d60",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "c1c96545-bde1-4189-8f61-66a295bd740b",
        "title": "KeysManagerMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "KeysManagerMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "30283440-12fa-4782-93fa-7db47da10655",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "KeysManagerMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "10a17910-dcec-40bb-b3ec-fe1618cf35dc",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "KeysManagerMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "1b3e12ae-8e18-4366-af72-03788009c7c0",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "8bb5856d-00f4-454b-a72d-47424be3144a",
        "title": "PoaNetworkConsensusMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "PoaNetworkConsensusMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "6dc76d0a-14c4-413c-b9f7-f92860b1d6e1",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "PoaNetworkConsensusMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "a036fd9c-e318-46b0-a28f-1764291208c7",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "PoaNetworkConsensusMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "51884402-700c-43b5-953a-946a69eaa353",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "0dd570a8-214a-47a5-846a-d2a6c4694820",
        "title": "ProxyStorageMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "ProxyStorageMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "0ea4c67e-e946-4b9a-8b9c-02317c2589da",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "ProxyStorageMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "da8d1ffb-fd3b-4936-807a-7bf1ca4893b8",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "ProxyStorageMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "9cfd82ae-1d2b-45dc-8dc5-44e4b5eebdd9",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "6c079898-762c-4c50-b47f-d307fee2eccf",
        "title": "RewardByBlockMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "RewardByBlockMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "f3cc5544-38ee-4878-93e5-d040f799d62f",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "RewardByBlockMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "e0e7f7c1-0d3c-4f64-bfad-86284981236c",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "RewardByBlockMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "a293d1db-6775-4e88-a0ef-34ac06d27408",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "23c00d43-7b77-43d1-8650-fc384014e206",
        "title": "RewardByTimeMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "RewardByTimeMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "82c5b1d0-2d83-4123-bf26-a02e3a447e3a",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "RewardByTimeMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "117711c0-dfac-4398-b427-9954211b8a49",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "RewardByTimeMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "06bced81-9437-4457-b708-000dd9411054",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "ec5c4211-fed3-4935-abfc-9d09a1c4ae31",
        "title": "ValidatorMetadataMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "ValidatorMetadataMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "4c612353-20f0-4431-9c74-95ef9fc9de52",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "ValidatorMetadataMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "6c8f0280-a8cb-4516-a5c2-1369d347666e",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "ValidatorMetadataMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "b59bfa12-7b2a-4ff0-ba77-f97dc54e8a6f",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "150ca55e-de04-4c17-812e-be444984086d",
        "title": "VotingToChangeKeysMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "VotingToChangeKeysMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "4f1cbe86-eddb-44f3-9243-fa4697b6a4d8",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "VotingToChangeKeysMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "e07eb506-89db-43ca-a86d-2781ebf9d797",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "VotingToChangeKeysMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "885c8c2c-23b3-42f0-9981-feba33b9a500",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b53142b2-801d-4dac-88fa-8ac40bdd7285",
        "title": "VotingToChangeMinThresholdMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "VotingToChangeMinThresholdMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "21aba04d-9543-4f92-a4fc-e5de1b24a0b6",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "VotingToChangeMinThresholdMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "d0868baf-8271-4c79-8724-6490c615de90",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "VotingToChangeMinThresholdMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "69c80351-adb5-4aa0-80e7-e8e49b0fc83b",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "97648e97-0d07-407b-9e93-490bf2f273b0",
        "title": "VotingToChangeMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "VotingToChangeMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "665bb8d9-dec8-4b0b-96d9-bffd6e77fc0c",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "VotingToChangeMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "cd398cd3-142a-4846-8f8c-30ce39b30fdb",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "VotingToChangeMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "3382c4ff-aeae-4c02-b7de-9cd788274c50",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "49b6edd4-afdf-404b-b44f-2a04fa52d936",
        "title": "VotingToChangeProxyAddressMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "VotingToChangeProxyAddressMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "56bc3dce-5ca1-42f1-8846-f51dbd108276",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "VotingToChangeProxyAddressMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "830e8253-209f-4a65-a8ca-9ed56a0e0600",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "VotingToChangeProxyAddressMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "f3c1ccb4-eb1a-419e-8abf-88f3f2df9204",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "e362ca87-9a8b-4773-b7da-ce405f27a675",
        "title": "VotingToManageEmissionFundsMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "VotingToManageEmissionFundsMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "fc2ad821-3702-435a-8643-bc7843d5554f",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "VotingToManageEmissionFundsMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "a126abeb-fc9d-461e-8c17-935d90b38210",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "VotingToManageEmissionFundsMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "26ab45ca-e577-4020-95d1-b320aedd8352",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "aa264dae-8688-46c1-9eb8-48d6ef46843d",
        "title": "VotingKey",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "VotingKey \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "82778b53-135a-4cd3-8de9-82f1ed630167",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "VotingKey \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "ceabab59-92bf-4349-b5e1-e79092cbd48b",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "VotingKey \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "3d1c9f0e-89b8-4f4a-91d7-4204cb35f2d5",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "f42d6fb1-138b-462e-bccc-f6c8b057e6dd",
        "title": "BallotsStorageNew",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "BallotsStorageNew \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "22eb133e-1066-4d19-9519-ad68eb306d21",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "BallotsStorageNew \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "ac4a67e8-bb45-457a-8f38-4d9bdd96cc97",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "BallotsStorageNew \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "8a78645b-b3de-4be1-bb4e-d9b0aafbb93c",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "4de4fe01-ee7c-49e3-9a70-110eeef6b144",
        "title": "KeysManagerNew",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "KeysManagerNew \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "d7987ab9-c7a7-42cb-bca7-208a0fa9943b",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "KeysManagerNew \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "6dad3217-cad5-4467-b5ad-2773cb9212f5",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "KeysManagerNew \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "8e2b970e-c740-4b1f-9ea5-613bd0324cdf",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b58aca35-1972-4597-87cf-45d9bd40b065",
        "title": "ProxyStorageNew",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "ProxyStorageNew \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "d160c35a-c084-436a-98e0-f0abf68f0134",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "ProxyStorageNew \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "0897596c-6161-4125-a235-590dae76242d",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "ProxyStorageNew \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "339b8122-09f6-44a7-acee-e561f0010a06",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b3e49878-76fa-4ac4-a0df-079ce9ca97f7",
        "title": "RewardByBlockNew",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "RewardByBlockNew \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "2a0145d8-26e9-4222-bf70-6abffd157fc5",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "RewardByBlockNew \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "c590ce68-5b2f-484a-8e22-d1a7ea6deabc",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "RewardByBlockNew \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "1837f000-fd1d-4a26-83a4-d1d89ab9da5e",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "88661ad3-1b24-4466-8c0f-fafd075b947d",
        "title": "RewardByTimeNew",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "RewardByTimeNew \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "3bdc8efd-aea8-46c3-a9d3-a46598933193",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "RewardByTimeNew \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "ee666379-dac9-4561-bd55-771612a0199f",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "RewardByTimeNew \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "42e728a5-4869-4ebc-b58f-91a7d1d3ceb3",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "f2fac7bd-58c8-4a5c-9d5e-03af14871554",
        "title": "ValidatorMetadataNew",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "ValidatorMetadataNew \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "7a503d6a-4324-4d8b-8db8-5e775dcefda4",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "ValidatorMetadataNew \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "bf0a0f03-8542-4a1a-90d1-0e36b67a01b6",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "ValidatorMetadataNew \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "bc2385f4-ea85-444c-95ca-c5de8ac7ee05",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "74a832af-a359-44db-8505-22e775e90eb7",
        "title": "VotingToChangeKeysNew",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "VotingToChangeKeysNew \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "b301798e-fd76-443b-8fa9-b52d0a8e46a6",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "VotingToChangeKeysNew \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "b13e06ca-40ee-4bdc-8868-0ec7421d9c86",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "VotingToChangeKeysNew \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "37876f5f-2e88-4f62-9d4c-c41ead8b74f8",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "012ca0e7-379c-4d61-886d-c750fc06acf4",
        "title": "VotingToChangeMinThresholdNew",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "VotingToChangeMinThresholdNew \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "6ad4b44d-879c-42cd-987b-52f8c9d89626",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "VotingToChangeMinThresholdNew \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "2acc48fe-2480-48af-9fc9-3f22d22ea027",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "VotingToChangeMinThresholdNew \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "bbfdda2e-fe8c-4b98-9c9b-bf508de42edb",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "73fe0636-7a38-4070-9f43-1b499cd20dae",
        "title": "VotingToChangeProxyAddressNew",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "VotingToChangeProxyAddressNew \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "283a9a22-4dd5-4fcb-ad3b-c9bdcc014aaa",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "VotingToChangeProxyAddressNew \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "185adc5e-d410-4595-8d9c-2c7a4dada0c3",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "VotingToChangeProxyAddressNew \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "5056150f-d09e-4f90-95e7-254c6e3ce547",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "685c013a-f506-4969-a707-a82f601f046c",
        "title": "VotingToManageEmissionFundsNew",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "VotingToManageEmissionFundsNew \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "9db3bfa2-832c-4492-bcf9-0bc7a6afd3e3",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "VotingToManageEmissionFundsNew \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "e57dd5d2-dbff-48ec-8258-1700645ccabc",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "VotingToManageEmissionFundsNew \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "1a5dd0e1-43f6-447d-9839-53cb8009310e",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "49c16f10-dcce-4506-9c21-70c49d4dec12",
        "title": "Contract: BallotsStorage [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_test.js",
        "file": "/test/ballots_storage_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: BallotsStorage [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 208,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "44a15ac2-f81b-4d53-80cd-6d849117d891",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: BallotsStorage [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "3777b867-f1b7-4a03-b4f2-ac7c5c7fc7c6",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: BallotsStorage [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 709,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "masterOfCeremony = accounts[0];\nvotingToChangeKeys = accounts[0];\nvotingToChangeMinThreshold = accounts[3];\nvotingToChangeProxy = accounts[4];\nvotingToManageEmissionFunds = accounts[5];\nrewardByBlock = accounts[8];\npoaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony, []);\n\nproxyStorage = await ProxyStorageMock.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorage.address);\nproxyStorage = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorage.init(poaNetworkConsensus.address).should.be.fulfilled;\n\nballotsStorage = await BallotsStorage.new();\nballotsEternalStorage = await EternalStorageProxy.new(proxyStorage.address, ballotsStorage.address);\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorage.init([3, 3]).should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\nkeysManager = await KeysManagerMock.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorage.address, keysManager.address);\nkeysManager = await KeysManagerMock.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorage.address, validatorMetadata.address);\n\nawait poaNetworkConsensus.setProxyStorage(proxyStorage.address);\nawait proxyStorage.initializeAddresses(\n  keysManager.address,\n  votingToChangeKeys,\n  votingToChangeMinThreshold,\n  votingToChangeProxy,\n  votingToManageEmissionFunds,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlock\n);",
            "err": {},
            "isRoot": false,
            "uuid": "e3895293-c163-46e9-8f66-0bd647fa7768",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: BallotsStorage [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "7e65ed1b-58fc-4ce4-a1d2-a142a6f89a64",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "2694d1aa-0d23-424f-bbc5-4764d6bcce87",
            "title": "#init",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_test.js",
            "file": "/test/ballots_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "prevent from double init",
                "fullTitle": "Contract: BallotsStorage [all features] #init prevent from double init",
                "timedOut": false,
                "duration": 27,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await ballotsStorage.init([3, 2]).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "a9c57ff1-cf35-4b8b-875a-f587ddf24f9d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "thresholds are correct",
                "fullTitle": "Contract: BallotsStorage [all features] #init thresholds are correct",
                "timedOut": false,
                "duration": 32,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new web3.BigNumber(3).should.be.bignumber.equal(\n  await ballotsStorage.getBallotThreshold.call(1)\n);\nnew web3.BigNumber(2).should.be.bignumber.equal(\n  await ballotsStorage.getBallotThreshold.call(2)\n);",
                "err": {},
                "isRoot": false,
                "uuid": "8e4f4e52-d4e9-4ba4-aab6-d104db6dac7f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a9c57ff1-cf35-4b8b-875a-f587ddf24f9d",
              "8e4f4e52-d4e9-4ba4-aab6-d104db6dac7f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 59,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "e51d2ca4-f75c-4a11-9417-631fd13d665e",
            "title": "#migrate",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_test.js",
            "file": "/test/ballots_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should copy thresholds from an old contract",
                "fullTitle": "Contract: BallotsStorage [all features] #migrate should copy thresholds from an old contract",
                "timedOut": false,
                "duration": 280,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let ballotsStorageNew = await BallotsStorage.new();\nconst ballotsEternalStorageNew = await EternalStorageProxy.new(proxyStorage.address, ballotsStorageNew.address);\nballotsStorageNew = await BallotsStorage.at(ballotsEternalStorageNew.address);\n(await ballotsStorageNew.getBallotThreshold.call(1)).should.be.bignumber.equal(0);\n(await ballotsStorageNew.getBallotThreshold.call(2)).should.be.bignumber.equal(0);\nawait ballotsStorageNew.migrate('0x0000000000000000000000000000000000000000').should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorageNew.migrate(ballotsStorage.address, {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorageNew.migrate(ballotsStorage.address).should.be.fulfilled;\n(await ballotsStorageNew.getBallotThreshold.call(1)).should.be.bignumber.equal(3);\n(await ballotsStorageNew.getBallotThreshold.call(2)).should.be.bignumber.equal(2);\nawait ballotsStorageNew.migrate(ballotsStorage.address).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "2c5bd31c-4d98-4003-a6cb-7292e316ded8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2c5bd31c-4d98-4003-a6cb-7292e316ded8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 280,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "317d5d19-f3d8-49a5-bb34-d1db576d15ae",
            "title": "#setThreshold",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_test.js",
            "file": "/test/ballots_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "can only be called from votingToChangeThreshold address",
                "fullTitle": "Contract: BallotsStorage [all features] #setThreshold can only be called from votingToChangeThreshold address",
                "timedOut": false,
                "duration": 76,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await ballotsStorage.setThreshold(4, 1, {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait setThreshold(4, 1, true, {from: accounts[3]});",
                "err": {},
                "isRoot": false,
                "uuid": "bc2a0e8d-27f9-4afc-8f3d-9e5046057337",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be set for Invalid threshold",
                "fullTitle": "Contract: BallotsStorage [all features] #setThreshold cannot be set for Invalid threshold",
                "timedOut": false,
                "duration": 206,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await setThreshold(3, 1, false, {from: accounts[3]});\nawait setThreshold(5, 0, false, {from: accounts[3]});\nawait setThreshold(5, -10, false, {from: accounts[3]});\nawait setThreshold(5, -1, false, {from: accounts[3]});\nawait setThreshold(5, 3, false, {from: accounts[3]});\nawait setThreshold(3, 2, false, {from: accounts[3]});",
                "err": {},
                "isRoot": false,
                "uuid": "fd1c0a35-a317-4ee0-ac79-b8055f356831",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new value cannot be equal to 0",
                "fullTitle": "Contract: BallotsStorage [all features] #setThreshold new value cannot be equal to 0",
                "timedOut": false,
                "duration": 142,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await setThreshold(0, 1, false, {from: accounts[3]});\nawait setThreshold(0, 2, false, {from: accounts[3]});\nawait setThreshold(4, 1, true, {from: accounts[3]});\nawait setThreshold(1, 2, true, {from: accounts[3]});",
                "err": {},
                "isRoot": false,
                "uuid": "f203f42b-7c77-472d-abde-49ccd3fc3fa6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets new value for Keys threshold",
                "fullTitle": "Contract: BallotsStorage [all features] #setThreshold sets new value for Keys threshold",
                "timedOut": false,
                "duration": 55,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await setThreshold(5, 1, true, {from: accounts[3]});\nnew web3.BigNumber(5).should.be.bignumber.equal(await ballotsStorage.getBallotThreshold.call(1));",
                "err": {},
                "isRoot": false,
                "uuid": "a4fce3a1-d3a7-4591-8aa6-a05d3ef82b11",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets new value for MetadataChange threshold",
                "fullTitle": "Contract: BallotsStorage [all features] #setThreshold sets new value for MetadataChange threshold",
                "timedOut": false,
                "duration": 71,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new web3.BigNumber(2).should.be.bignumber.equal(await ballotsStorage.getBallotThreshold.call(2));\nawait setThreshold(1, 2, true, {from: accounts[3]});\nnew web3.BigNumber(1).should.be.bignumber.equal(await ballotsStorage.getBallotThreshold.call(2));",
                "err": {},
                "isRoot": false,
                "uuid": "9c9a93e9-0cb3-4adf-9b9d-e7e2342013c2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "bc2a0e8d-27f9-4afc-8f3d-9e5046057337",
              "fd1c0a35-a317-4ee0-ac79-b8055f356831",
              "f203f42b-7c77-472d-abde-49ccd3fc3fa6",
              "a4fce3a1-d3a7-4591-8aa6-a05d3ef82b11",
              "9c9a93e9-0cb3-4adf-9b9d-e7e2342013c2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 550,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "95ae26ac-92b4-44b9-94c7-b7b79a0bb90c",
            "title": "#getProxyThreshold",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_test.js",
            "file": "/test/ballots_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "return value is correct",
                "fullTitle": "Contract: BallotsStorage [all features] #getProxyThreshold return value is correct",
                "timedOut": false,
                "duration": 416,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new web3.BigNumber(1).should.be.bignumber.equal(await ballotsStorage.getProxyThreshold.call())\nawait proxyStorage.setKeysManagerMock(masterOfCeremony);\nawait addValidator(accounts[1]);\nawait addValidator(accounts[2]);\nawait addValidator(accounts[3]);\nawait addValidator(accounts[4]);\nawait addValidator(accounts[5]);\nawait proxyStorage.setKeysManagerMock(keysManager.address);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nconst getValidators = await poaNetworkConsensus.getValidators.call();\nnew web3.BigNumber(6).should.be.bignumber.equal(getValidators.length);\n(await poaNetworkConsensus.isMasterOfCeremonyRemoved.call()).should.be.equal(false);\nnew web3.BigNumber(3).should.be.bignumber.equal(await ballotsStorage.getProxyThreshold.call())",
                "err": {},
                "isRoot": false,
                "uuid": "b528a399-e46c-42fe-9918-704710fe112b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "return value is correct if MoC is removed",
                "fullTitle": "Contract: BallotsStorage [all features] #getProxyThreshold return value is correct if MoC is removed",
                "timedOut": false,
                "duration": 1304,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new web3.BigNumber(1).should.be.bignumber.equal(await ballotsStorage.getProxyThreshold.call())\nawait proxyStorage.setKeysManagerMock(masterOfCeremony);\nawait addValidator(accounts[1]);\nawait addValidator(accounts[2]);\nawait addValidator(accounts[3]);\nawait addValidator(accounts[4]);\nawait addValidator(accounts[5]);\nawait addValidator(accounts[6]);\nawait proxyStorage.setKeysManagerMock(keysManager.address);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nconst getValidators = await poaNetworkConsensus.getValidators.call();\nnew web3.BigNumber(7).should.be.bignumber.equal(getValidators.length);\nnew web3.BigNumber(4).should.be.bignumber.equal(await ballotsStorage.getProxyThreshold.call());\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000001', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000002', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000003', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000004', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000005', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000006', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000007', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000008', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000009', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000010', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000011', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000012', {from: masterOfCeremony}).should.be.fulfilled;\nconst {logs} = await keysManager.removeMiningKey(masterOfCeremony, {from: votingToChangeKeys});\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensus.isMasterOfCeremonyRemoved.call()).should.be.equal(true);\n(await poaNetworkConsensus.getCurrentValidatorsLength.call()).should.be.bignumber.equal(6);\nnew web3.BigNumber(4).should.be.bignumber.equal(await ballotsStorage.getProxyThreshold.call());",
                "err": {},
                "isRoot": false,
                "uuid": "8b28e04a-c471-4278-ad05-a03077b53c83",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b528a399-e46c-42fe-9918-704710fe112b",
              "8b28e04a-c471-4278-ad05-a03077b53c83"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1720,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "9d2567ea-c327-4f2a-ae91-4dcc0ad0bdb8",
            "title": "#getVotingToChangeThreshold",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_test.js",
            "file": "/test/ballots_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns voting to change min threshold address",
                "fullTitle": "Contract: BallotsStorage [all features] #getVotingToChangeThreshold returns voting to change min threshold address",
                "timedOut": false,
                "duration": 65,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "votingToChangeMinThreshold.should.be.equal(await ballotsStorage.getVotingToChangeThreshold.call())\nawait proxyStorage.setVotingToChangeMinThresholdMock(accounts[4]);\naccounts[4].should.be.equal(await ballotsStorage.getVotingToChangeThreshold.call())",
                "err": {},
                "isRoot": false,
                "uuid": "f2b3edc8-201b-44da-ab15-767692a9329d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f2b3edc8-201b-44da-ab15-767692a9329d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 65,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "ad2a6640-d3ad-4408-94f7-f4fb816185b2",
            "title": "#getBallotLimitPerValidator",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_test.js",
            "file": "/test/ballots_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns correct limit",
                "fullTitle": "Contract: BallotsStorage [all features] #getBallotLimitPerValidator returns correct limit",
                "timedOut": false,
                "duration": 352,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let limit = await ballotsStorage.getBallotLimitPerValidator.call();\nlimit.should.be.bignumber.equal(200);\nawait addMiningKey(accounts[1]);\nawait addMiningKey(accounts[2]);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nlimit = await ballotsStorage.getBallotLimitPerValidator.call();\nlimit.should.be.bignumber.equal(100);",
                "err": {},
                "isRoot": false,
                "uuid": "1aef0fa3-b33b-4908-a910-caaf6f0add8b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "returns correct limit if MoC is removed",
                "fullTitle": "Contract: BallotsStorage [all features] #getBallotLimitPerValidator returns correct limit if MoC is removed",
                "timedOut": false,
                "duration": 1065,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let limit = await ballotsStorage.getBallotLimitPerValidator.call();\nlimit.should.be.bignumber.equal(200);\nawait addMiningKey(accounts[1]);\nawait addMiningKey(accounts[2]);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensus.getCurrentValidatorsLength.call()).should.be.bignumber.equal(3);\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000001', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000002', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000003', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000004', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000005', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000006', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000007', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000008', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000009', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000010', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000011', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000012', {from: masterOfCeremony}).should.be.fulfilled;\nconst {logs} = await keysManager.removeMiningKey(masterOfCeremony, {from: votingToChangeKeys});\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensus.isMasterOfCeremonyRemoved.call()).should.be.equal(true);\n(await poaNetworkConsensus.getCurrentValidatorsLength.call()).should.be.bignumber.equal(2);\nlimit = await ballotsStorage.getBallotLimitPerValidator.call();\nlimit.should.be.bignumber.equal(100);",
                "err": {},
                "isRoot": false,
                "uuid": "d4033bda-b9d6-44b2-a9b5-920645e6a4e1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1aef0fa3-b33b-4908-a910-caaf6f0add8b",
              "d4033bda-b9d6-44b2-a9b5-920645e6a4e1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1417,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "5f89f1c3-3931-4050-b2e0-992f3b805535",
            "title": "#upgradeTo",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_test.js",
            "file": "/test/ballots_storage_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: BallotsStorage [all features] #upgradeTo \"before each\" hook",
                "timedOut": false,
                "duration": 95,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "proxyStorageStubAddress = accounts[8];\nballotsStorage = await BallotsStorage.new();\nballotsStorageOldImplementation = ballotsStorage.address;\nballotsEternalStorage = await EternalStorageProxy.new(proxyStorage.address, ballotsStorage.address);\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "a904fbcc-4da2-41f1-83b4-daa7d5bdd43e",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by ProxyStorage",
                "fullTitle": "Contract: BallotsStorage [all features] #upgradeTo may only be called by ProxyStorage",
                "timedOut": false,
                "duration": 134,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const ballotsStorageNew = await BallotsStorageNew.new();\nawait ballotsEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait ballotsEternalStorage.upgradeTo(ballotsStorageNew.address, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);\nawait upgradeTo(ballotsStorageNew.address, {from: proxyStorageStubAddress});\nawait ballotsEternalStorage.setProxyStorage(proxyStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "c5a1f1ae-9ec0-4767-9535-451308510550",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change implementation address",
                "fullTitle": "Contract: BallotsStorage [all features] #upgradeTo should change implementation address",
                "timedOut": false,
                "duration": 229,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let ballotsStorageNew = await BallotsStorageNew.new();\nconst newImplementation = ballotsStorageNew.address;\n(await ballotsEternalStorage.implementation.call()).should.be.equal(ballotsStorageOldImplementation);\nawait ballotsEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(newImplementation, {from: proxyStorageStubAddress});\nawait ballotsEternalStorage.setProxyStorage(proxyStorage.address);\n(await ballotsEternalStorage.implementation.call()).should.be.equal(newImplementation);",
                "err": {},
                "isRoot": false,
                "uuid": "1fae036c-5211-4305-ab1d-69cd8df28323",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment implementation version",
                "fullTitle": "Contract: BallotsStorage [all features] #upgradeTo should increment implementation version",
                "timedOut": false,
                "duration": 122,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let ballotsStorageNew = await BallotsStorageNew.new();\nconst oldVersion = await ballotsEternalStorage.version.call();\nconst newVersion = oldVersion.add(1);\nawait ballotsEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(ballotsStorageNew.address, {from: proxyStorageStubAddress});\nawait ballotsEternalStorage.setProxyStorage(proxyStorage.address);\n(await ballotsEternalStorage.version.call()).should.be.bignumber.equal(newVersion);",
                "err": {},
                "isRoot": false,
                "uuid": "1f746495-7376-4b17-82f1-0ef9db83568e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should work",
                "fullTitle": "Contract: BallotsStorage [all features] #upgradeTo new implementation should work",
                "timedOut": false,
                "duration": 153,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let ballotsStorageNew = await BallotsStorageNew.new();\nawait ballotsEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(ballotsStorageNew.address, {from: proxyStorageStubAddress});\nawait ballotsEternalStorage.setProxyStorage(proxyStorage.address);\nballotsStorageNew = await BallotsStorageNew.at(ballotsEternalStorage.address);\n(await ballotsStorageNew.initialized.call()).should.be.equal(false);\nawait ballotsStorageNew.initialize();\n(await ballotsStorageNew.initialized.call()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "d7c742af-6850-4617-9047-725eceb9042c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same proxyStorage address",
                "fullTitle": "Contract: BallotsStorage [all features] #upgradeTo new implementation should use the same proxyStorage address",
                "timedOut": false,
                "duration": 133,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let ballotsStorageNew = await BallotsStorageNew.new();\nawait ballotsEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(ballotsStorageNew.address, {from: proxyStorageStubAddress});\nballotsStorageNew = await BallotsStorageNew.at(ballotsEternalStorage.address);\n(await ballotsStorageNew.proxyStorage.call()).should.be.equal(proxyStorageStubAddress);\nawait ballotsEternalStorage.setProxyStorage(proxyStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "2b497afc-5224-4b77-ac13-f2244c9894d5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same storage",
                "fullTitle": "Contract: BallotsStorage [all features] #upgradeTo new implementation should use the same storage",
                "timedOut": false,
                "duration": 166,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await setThreshold(6, 1, true, {from: votingToChangeMinThreshold});\nlet ballotsStorageNew = await BallotsStorageNew.new();\nawait ballotsEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(ballotsStorageNew.address, {from: proxyStorageStubAddress});\nballotsStorageNew = await BallotsStorageNew.at(ballotsEternalStorage.address);\nconst threshold = await ballotsStorageNew.getBallotThreshold.call(1);\nthreshold.should.be.bignumber.equal(6);\nawait ballotsEternalStorage.setProxyStorage(proxyStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "92b75a29-5d3f-428c-a475-b0b0bd85a715",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c5a1f1ae-9ec0-4767-9535-451308510550",
              "1fae036c-5211-4305-ab1d-69cd8df28323",
              "1f746495-7376-4b17-82f1-0ef9db83568e",
              "d7c742af-6850-4617-9047-725eceb9042c",
              "2b497afc-5224-4b77-ac13-f2244c9894d5",
              "92b75a29-5d3f-428c-a475-b0b0bd85a715"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 937,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "9d35b2ec-36be-4065-87a9-1edac7e72b98",
        "title": "Contract: BallotsStorage upgraded [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_upgrade_test.js",
        "file": "/test/ballots_storage_upgrade_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: BallotsStorage upgraded [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 1313,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "48f2029f-aac5-494c-8e43-cb975e9aaccc",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: BallotsStorage upgraded [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "525a3204-0826-43a8-99df-4e8c70f6798b",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: BallotsStorage upgraded [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 691,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "masterOfCeremony = accounts[0];\nvotingToChangeKeys = accounts[0];\nvotingToChangeMinThreshold = accounts[3];\nvotingToChangeProxy = accounts[4];\nvotingToManageEmissionFunds = accounts[5];\nrewardByBlock = accounts[8];\npoaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony, []);\n\nproxyStorage = await ProxyStorageMock.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorage.address);\nproxyStorage = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorage.init(poaNetworkConsensus.address).should.be.fulfilled;\n\nballotsStorage = await BallotsStorage.new();\nballotsEternalStorage = await EternalStorageProxy.new(proxyStorage.address, ballotsStorage.address);\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorage.init([3, 3]).should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\nkeysManager = await KeysManagerMock.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorage.address, keysManager.address);\nkeysManager = await KeysManagerMock.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorage.address, validatorMetadata.address);\n\nawait poaNetworkConsensus.setProxyStorage(proxyStorage.address);\nawait proxyStorage.initializeAddresses(\n  keysManager.address,\n  votingToChangeKeys,\n  votingToChangeMinThreshold,\n  votingToChangeProxy,\n  votingToManageEmissionFunds,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlock\n);\nlet ballotsStorageNew = await BallotsStorageNew.new();\nawait ballotsEternalStorage.setProxyStorage(accounts[6]);\nconst {logs} = await ballotsEternalStorage.upgradeTo(ballotsStorageNew.address, {from: accounts[6]});\nlogs[0].event.should.be.equal(\"Upgraded\");\nawait ballotsEternalStorage.setProxyStorage(proxyStorage.address);\nballotsStorage = await BallotsStorageNew.at(ballotsEternalStorage.address);",
            "err": {},
            "isRoot": false,
            "uuid": "c9e4abd9-abd6-47ae-bad3-d9b5b1060b3a",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: BallotsStorage upgraded [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "e0045eff-186f-4951-97e2-c0dc1bc71247",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "64184fdc-5354-4423-b318-fab3ef6d29f3",
            "title": "#init",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_upgrade_test.js",
            "file": "/test/ballots_storage_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "prevent from double init",
                "fullTitle": "Contract: BallotsStorage upgraded [all features] #init prevent from double init",
                "timedOut": false,
                "duration": 106,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await ballotsStorage.init([3, 2]).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "a3cacac9-fc39-4606-8138-cc34e2e35098",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "thresholds are correct",
                "fullTitle": "Contract: BallotsStorage upgraded [all features] #init thresholds are correct",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new web3.BigNumber(3).should.be.bignumber.equal(\n  await ballotsStorage.getBallotThreshold.call(1)\n);\nnew web3.BigNumber(2).should.be.bignumber.equal(\n  await ballotsStorage.getBallotThreshold.call(2)\n);",
                "err": {},
                "isRoot": false,
                "uuid": "f903aedc-2592-44f3-9b4c-4665f8bb3fbc",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a3cacac9-fc39-4606-8138-cc34e2e35098",
              "f903aedc-2592-44f3-9b4c-4665f8bb3fbc"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 137,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "da9b70fa-be2f-4aea-b6f2-0f20d32aebbd",
            "title": "#migrate",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_upgrade_test.js",
            "file": "/test/ballots_storage_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should copy thresholds from an old contract",
                "fullTitle": "Contract: BallotsStorage upgraded [all features] #migrate should copy thresholds from an old contract",
                "timedOut": false,
                "duration": 224,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let ballotsStorageNew = await BallotsStorage.new();\nconst ballotsEternalStorageNew = await EternalStorageProxy.new(proxyStorage.address, ballotsStorageNew.address);\nballotsStorageNew = await BallotsStorage.at(ballotsEternalStorageNew.address);\n(await ballotsStorageNew.getBallotThreshold.call(1)).should.be.bignumber.equal(0);\n(await ballotsStorageNew.getBallotThreshold.call(2)).should.be.bignumber.equal(0);\nawait ballotsStorageNew.migrate('0x0000000000000000000000000000000000000000').should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorageNew.migrate(ballotsStorage.address, {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorageNew.migrate(ballotsStorage.address).should.be.fulfilled;\n(await ballotsStorageNew.getBallotThreshold.call(1)).should.be.bignumber.equal(3);\n(await ballotsStorageNew.getBallotThreshold.call(2)).should.be.bignumber.equal(2);\nawait ballotsStorageNew.migrate(ballotsStorage.address).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "15a0bef4-ac41-4afb-9441-51ba5a5bd70f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "15a0bef4-ac41-4afb-9441-51ba5a5bd70f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 224,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "449424b1-ad79-4870-a1ae-2955560c2b9b",
            "title": "#setThreshold",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_upgrade_test.js",
            "file": "/test/ballots_storage_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "can only be called from votingToChangeThreshold address",
                "fullTitle": "Contract: BallotsStorage upgraded [all features] #setThreshold can only be called from votingToChangeThreshold address",
                "timedOut": false,
                "duration": 59,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await ballotsStorage.setThreshold(4, 1, {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait setThreshold(4, 1, true, {from: accounts[3]});",
                "err": {},
                "isRoot": false,
                "uuid": "8eea5ba0-c5bb-4299-8090-a22d592a7f1c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be set for Invalid threshold",
                "fullTitle": "Contract: BallotsStorage upgraded [all features] #setThreshold cannot be set for Invalid threshold",
                "timedOut": false,
                "duration": 184,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await setThreshold(3, 1, false, {from: accounts[3]});\nawait setThreshold(5, 0, false, {from: accounts[3]});\nawait setThreshold(5, -10, false, {from: accounts[3]});\nawait setThreshold(5, -1, false, {from: accounts[3]});\nawait setThreshold(5, 3, false, {from: accounts[3]});\nawait setThreshold(3, 2, false, {from: accounts[3]});",
                "err": {},
                "isRoot": false,
                "uuid": "acaf43e3-5dcc-4811-977c-b89e31caebd4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new value cannot be equal to 0",
                "fullTitle": "Contract: BallotsStorage upgraded [all features] #setThreshold new value cannot be equal to 0",
                "timedOut": false,
                "duration": 132,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await setThreshold(0, 1, false, {from: accounts[3]});\nawait setThreshold(0, 2, false, {from: accounts[3]});\nawait setThreshold(4, 1, true, {from: accounts[3]});\nawait setThreshold(1, 2, true, {from: accounts[3]});",
                "err": {},
                "isRoot": false,
                "uuid": "bb4f2d4d-9759-4a25-ae02-2d4ddc22595f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets new value for Keys threshold",
                "fullTitle": "Contract: BallotsStorage upgraded [all features] #setThreshold sets new value for Keys threshold",
                "timedOut": false,
                "duration": 53,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await setThreshold(5, 1, true, {from: accounts[3]});\nnew web3.BigNumber(5).should.be.bignumber.equal(await ballotsStorage.getBallotThreshold.call(1));",
                "err": {},
                "isRoot": false,
                "uuid": "8e8fb516-1e05-4b1d-973f-250eb34ab66d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets new value for MetadataChange threshold",
                "fullTitle": "Contract: BallotsStorage upgraded [all features] #setThreshold sets new value for MetadataChange threshold",
                "timedOut": false,
                "duration": 60,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new web3.BigNumber(2).should.be.bignumber.equal(await ballotsStorage.getBallotThreshold.call(2));\nawait setThreshold(1, 2, true, {from: accounts[3]});\nnew web3.BigNumber(1).should.be.bignumber.equal(await ballotsStorage.getBallotThreshold.call(2));",
                "err": {},
                "isRoot": false,
                "uuid": "bbc018bd-cba1-4c46-8232-16d38c512b81",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8eea5ba0-c5bb-4299-8090-a22d592a7f1c",
              "acaf43e3-5dcc-4811-977c-b89e31caebd4",
              "bb4f2d4d-9759-4a25-ae02-2d4ddc22595f",
              "8e8fb516-1e05-4b1d-973f-250eb34ab66d",
              "bbc018bd-cba1-4c46-8232-16d38c512b81"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 488,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "4b57f814-d9eb-45aa-99d4-bf11f5621408",
            "title": "#getProxyThreshold",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_upgrade_test.js",
            "file": "/test/ballots_storage_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "return value is correct",
                "fullTitle": "Contract: BallotsStorage upgraded [all features] #getProxyThreshold return value is correct",
                "timedOut": false,
                "duration": 381,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new web3.BigNumber(1).should.be.bignumber.equal(await ballotsStorage.getProxyThreshold.call())\nawait proxyStorage.setKeysManagerMock(masterOfCeremony);\nawait addValidator(accounts[1]);\nawait addValidator(accounts[2]);\nawait addValidator(accounts[3]);\nawait addValidator(accounts[4]);\nawait addValidator(accounts[5]);\nawait proxyStorage.setKeysManagerMock(keysManager.address);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nconst getValidators = await poaNetworkConsensus.getValidators.call();\nnew web3.BigNumber(6).should.be.bignumber.equal(getValidators.length);\n(await poaNetworkConsensus.isMasterOfCeremonyRemoved.call()).should.be.equal(false);\nnew web3.BigNumber(3).should.be.bignumber.equal(await ballotsStorage.getProxyThreshold.call())",
                "err": {},
                "isRoot": false,
                "uuid": "ffd76ea6-5c11-48fe-94f9-49bac4e41b90",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "return value is correct if MoC is removed",
                "fullTitle": "Contract: BallotsStorage upgraded [all features] #getProxyThreshold return value is correct if MoC is removed",
                "timedOut": false,
                "duration": 1174,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new web3.BigNumber(1).should.be.bignumber.equal(await ballotsStorage.getProxyThreshold.call())\nawait proxyStorage.setKeysManagerMock(masterOfCeremony);\nawait addValidator(accounts[1]);\nawait addValidator(accounts[2]);\nawait addValidator(accounts[3]);\nawait addValidator(accounts[4]);\nawait addValidator(accounts[5]);\nawait addValidator(accounts[6]);\nawait proxyStorage.setKeysManagerMock(keysManager.address);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nconst getValidators = await poaNetworkConsensus.getValidators.call();\nnew web3.BigNumber(7).should.be.bignumber.equal(getValidators.length);\nnew web3.BigNumber(4).should.be.bignumber.equal(await ballotsStorage.getProxyThreshold.call());\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000001', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000002', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000003', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000004', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000005', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000006', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000007', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000008', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000009', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000010', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000011', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000012', {from: masterOfCeremony}).should.be.fulfilled;\nconst {logs} = await keysManager.removeMiningKey(masterOfCeremony, {from: votingToChangeKeys});\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensus.isMasterOfCeremonyRemoved.call()).should.be.equal(true);\n(await poaNetworkConsensus.getCurrentValidatorsLength.call()).should.be.bignumber.equal(6);\nnew web3.BigNumber(4).should.be.bignumber.equal(await ballotsStorage.getProxyThreshold.call());",
                "err": {},
                "isRoot": false,
                "uuid": "afb5e7e0-40f8-4398-af10-4bf22cd8a916",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ffd76ea6-5c11-48fe-94f9-49bac4e41b90",
              "afb5e7e0-40f8-4398-af10-4bf22cd8a916"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1555,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "9d1970c9-3dfe-400e-b017-f37ca82e56d6",
            "title": "#getVotingToChangeThreshold",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_upgrade_test.js",
            "file": "/test/ballots_storage_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns voting to change min threshold address",
                "fullTitle": "Contract: BallotsStorage upgraded [all features] #getVotingToChangeThreshold returns voting to change min threshold address",
                "timedOut": false,
                "duration": 49,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "votingToChangeMinThreshold.should.be.equal(await ballotsStorage.getVotingToChangeThreshold.call())\nawait proxyStorage.setVotingToChangeMinThresholdMock(accounts[4]);\naccounts[4].should.be.equal(await ballotsStorage.getVotingToChangeThreshold.call())",
                "err": {},
                "isRoot": false,
                "uuid": "16b21d0f-8568-45eb-8d61-4476893520da",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "16b21d0f-8568-45eb-8d61-4476893520da"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 49,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "131c58e4-4651-4113-89b6-1817991a1d31",
            "title": "#getBallotLimitPerValidator",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_upgrade_test.js",
            "file": "/test/ballots_storage_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns correct limit",
                "fullTitle": "Contract: BallotsStorage upgraded [all features] #getBallotLimitPerValidator returns correct limit",
                "timedOut": false,
                "duration": 262,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let limit = await ballotsStorage.getBallotLimitPerValidator.call();\nlimit.should.be.bignumber.equal(200);\nawait addMiningKey(accounts[1]);\nawait addMiningKey(accounts[2]);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nlimit = await ballotsStorage.getBallotLimitPerValidator.call();\nlimit.should.be.bignumber.equal(100);",
                "err": {},
                "isRoot": false,
                "uuid": "99a5e4bc-eb2f-426c-bafd-a3ed40691362",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "returns correct limit if MoC is removed",
                "fullTitle": "Contract: BallotsStorage upgraded [all features] #getBallotLimitPerValidator returns correct limit if MoC is removed",
                "timedOut": false,
                "duration": 1064,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let limit = await ballotsStorage.getBallotLimitPerValidator.call();\nlimit.should.be.bignumber.equal(200);\nawait addMiningKey(accounts[1]);\nawait addMiningKey(accounts[2]);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensus.getCurrentValidatorsLength.call()).should.be.bignumber.equal(3);\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000001', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000002', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000003', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000004', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000005', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000006', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000007', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000008', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000009', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000010', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000011', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000012', {from: masterOfCeremony}).should.be.fulfilled;\nconst {logs} = await keysManager.removeMiningKey(masterOfCeremony, {from: votingToChangeKeys});\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensus.isMasterOfCeremonyRemoved.call()).should.be.equal(true);\n(await poaNetworkConsensus.getCurrentValidatorsLength.call()).should.be.bignumber.equal(2);\nlimit = await ballotsStorage.getBallotLimitPerValidator.call();\nlimit.should.be.bignumber.equal(100);",
                "err": {},
                "isRoot": false,
                "uuid": "93f04f69-ba95-416f-a6df-0523b35cf5b9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "99a5e4bc-eb2f-426c-bafd-a3ed40691362",
              "93f04f69-ba95-416f-a6df-0523b35cf5b9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1326,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "7f7a2a5a-b336-46ec-9009-2092a86e29b3",
        "title": "Contract: EmissionFunds [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/emission_funds_test.js",
        "file": "/test/emission_funds_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: EmissionFunds [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 964,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "497890ab-8700-4898-9179-ae6c2b60e332",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: EmissionFunds [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 4,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "c7c8ece8-dec9-4de3-a46a-5a74f11b519b",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: EmissionFunds [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 359,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "amount = web3.toWei(10, 'ether');\nvotingToManageEmissionFunds = accounts[0];\nawait EmissionFunds.new(0).should.be.rejectedWith(ERROR_MSG);\n\nemissionFunds = await EmissionFunds.new(\n  votingToManageEmissionFunds\n).should.be.fulfilled;\n\nawait web3.eth.sendTransaction({\n  from: accounts[1],\n  to: emissionFunds.address,\n  value: amount\n});\namount.should.be.bignumber.equal(\n  await web3.eth.getBalance(emissionFunds.address)\n);",
            "err": {},
            "isRoot": false,
            "uuid": "957d610c-1ad1-42e2-a2eb-619ce6b8d648",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: EmissionFunds [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "e8e73ac2-b9c0-4199-bb38-debc5b86ccac",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "6bd1c418-774e-46a8-8694-17553e921ae3",
            "title": "constructor",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/emission_funds_test.js",
            "file": "/test/emission_funds_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should save VotingToManageEmissionFunds address",
                "fullTitle": "Contract: EmissionFunds [all features] constructor should save VotingToManageEmissionFunds address",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await emissionFunds.votingToManageEmissionFunds.call()).should.be.equal(\n  votingToManageEmissionFunds\n);",
                "err": {},
                "isRoot": false,
                "uuid": "a7b5910b-ea53-455b-8ab8-004fd8bb5332",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a7b5910b-ea53-455b-8ab8-004fd8bb5332"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 14,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "8f6a4a0e-57df-442d-a2c8-0ee523b8f6a5",
            "title": "#fallback",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/emission_funds_test.js",
            "file": "/test/emission_funds_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should receive funds",
                "fullTitle": "Contract: EmissionFunds [all features] #fallback should receive funds",
                "timedOut": false,
                "duration": 315,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await web3.eth.sendTransaction({\n  from: accounts[1],\n  to: emissionFunds.address,\n  value: amount\n});\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(\n  amount * 2\n);",
                "err": {},
                "isRoot": false,
                "uuid": "57ee9eaa-d8c6-4748-a66a-0fcc3c09c520",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "57ee9eaa-d8c6-4748-a66a-0fcc3c09c520"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 315,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "eef5ba69-cd8a-4fe6-bf2d-88a2550dd723",
            "title": "#sendFundsTo",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/emission_funds_test.js",
            "file": "/test/emission_funds_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: EmissionFunds [all features] #sendFundsTo \"before each\" hook",
                "timedOut": false,
                "duration": 150,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "receiver = accounts[2];\nreceiverInitBalance = await web3.eth.getBalance(receiver);",
                "err": {},
                "isRoot": false,
                "uuid": "cecb7f19-25b9-4eee-a56d-fc1ca315320a",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by VotingToManageEmissionFunds",
                "fullTitle": "Contract: EmissionFunds [all features] #sendFundsTo may only be called by VotingToManageEmissionFunds",
                "timedOut": false,
                "duration": 37,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToSend = web3.toWei(5, 'ether');\nawait emissionFunds.sendFundsTo(\n  receiver,\n  amountToSend,\n  {from: accounts[3]}\n).should.be.rejectedWith(ERROR_MSG);\nawait emissionFunds.sendFundsTo(\n  receiver,\n  amountToSend,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "917d60c0-6d1c-4d34-bad2-20a128b90d98",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should send funds to receiver",
                "fullTitle": "Contract: EmissionFunds [all features] #sendFundsTo should send funds to receiver",
                "timedOut": false,
                "duration": 309,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToSend = web3.toWei(4, 'ether');\nconst amountRemain = amount - amountToSend;\nconst {logs} = await emissionFunds.sendFundsTo(\n  receiver,\n  amountToSend,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;\n\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(\n  amountRemain\n);\n(await web3.eth.getBalance(receiver)).should.be.bignumber.equal(\n  receiverInitBalance.add(amountToSend)\n);\nlogs[0].event.should.be.equal(\"FundsSentTo\");\nlogs[0].args.receiver.should.be.equal(receiver);\nlogs[0].args.caller.should.be.equal(votingToManageEmissionFunds);\nlogs[0].args.amount.should.be.bignumber.equal(amountToSend);\nlogs[0].args.success.should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "6ec1649e-7dc9-4315-9f87-2ace695b075a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should send entire amount",
                "fullTitle": "Contract: EmissionFunds [all features] #sendFundsTo should send entire amount",
                "timedOut": false,
                "duration": 329,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await emissionFunds.sendFundsTo(\n  receiver,\n  amount,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;\n\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(0);\n(await web3.eth.getBalance(receiver)).should.be.bignumber.equal(\n  receiverInitBalance.add(amount)\n);\nlogs[0].event.should.be.equal(\"FundsSentTo\");\nlogs[0].args.receiver.should.be.equal(receiver);\nlogs[0].args.caller.should.be.equal(votingToManageEmissionFunds);\nlogs[0].args.amount.should.be.bignumber.equal(amount);\nlogs[0].args.success.should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "3f7d39ef-a591-4977-9ff7-3893acaf1cbf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not send funds if amount greater than balance",
                "fullTitle": "Contract: EmissionFunds [all features] #sendFundsTo should not send funds if amount greater than balance",
                "timedOut": false,
                "duration": 318,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToSend = amount + 1;\nconst {logs} = await emissionFunds.sendFundsTo(\n  receiver,\n  amountToSend,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;\namount.should.be.bignumber.equal(\n  await web3.eth.getBalance(emissionFunds.address)\n);\nreceiverInitBalance.should.be.bignumber.equal(\n  await web3.eth.getBalance(receiver)\n);\nlogs[0].event.should.be.equal(\"FundsSentTo\");\nlogs[0].args.receiver.should.be.equal(receiver);\nlogs[0].args.caller.should.be.equal(votingToManageEmissionFunds);\nlogs[0].args.amount.should.be.bignumber.equal(amountToSend);\nlogs[0].args.success.should.be.equal(false);",
                "err": {},
                "isRoot": false,
                "uuid": "19deb22c-f9cd-46a9-835a-fa6ef0b94ba5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not send funds if amount is too much",
                "fullTitle": "Contract: EmissionFunds [all features] #sendFundsTo should not send funds if amount is too much",
                "timedOut": false,
                "duration": 310,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToSend = web3.toWei(11, 'ether');\nconst {logs} = await emissionFunds.sendFundsTo(\n  receiver,\n  amountToSend,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;\namount.should.be.bignumber.equal(\n  await web3.eth.getBalance(emissionFunds.address)\n);\nreceiverInitBalance.should.be.bignumber.equal(\n  await web3.eth.getBalance(receiver)\n);\nlogs[0].event.should.be.equal(\"FundsSentTo\");\nlogs[0].args.receiver.should.be.equal(receiver);\nlogs[0].args.caller.should.be.equal(votingToManageEmissionFunds);\nlogs[0].args.amount.should.be.bignumber.equal(amountToSend);\nlogs[0].args.success.should.be.equal(false);",
                "err": {},
                "isRoot": false,
                "uuid": "04a3f9e8-9adc-4d17-8279-a95016ae50d4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be fulfilled if receiver is 0x0",
                "fullTitle": "Contract: EmissionFunds [all features] #sendFundsTo should be fulfilled if receiver is 0x0",
                "timedOut": false,
                "duration": 175,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToSend = web3.toWei(5, 'ether');\nconst amountRemain = amount - amountToSend;\nconst {logs} = await emissionFunds.sendFundsTo(\n  '0x0000000000000000000000000000000000000000',\n  amountToSend,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;\namountRemain.should.be.bignumber.equal(\n  await web3.eth.getBalance(emissionFunds.address)\n);\nlogs[0].event.should.be.equal(\"FundsSentTo\");\nlogs[0].args.receiver.should.be.equal('0x0000000000000000000000000000000000000000');\nlogs[0].args.caller.should.be.equal(votingToManageEmissionFunds);\nlogs[0].args.amount.should.be.bignumber.equal(amountToSend);\nlogs[0].args.success.should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "23605669-c502-487f-b9fd-dbc1cb618d9f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be fulfilled if amount is zero",
                "fullTitle": "Contract: EmissionFunds [all features] #sendFundsTo should be fulfilled if amount is zero",
                "timedOut": false,
                "duration": 320,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToSend = 0;\nconst {logs} = await emissionFunds.sendFundsTo(\n  receiver,\n  amountToSend,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;\namount.should.be.bignumber.equal(\n  await web3.eth.getBalance(emissionFunds.address)\n);\nreceiverInitBalance.should.be.bignumber.equal(\n  await web3.eth.getBalance(receiver)\n);\nlogs[0].event.should.be.equal(\"FundsSentTo\");\nlogs[0].args.receiver.should.be.equal(receiver);\nlogs[0].args.caller.should.be.equal(votingToManageEmissionFunds);\nlogs[0].args.amount.should.be.bignumber.equal(0);\nlogs[0].args.success.should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "c3f4686a-77e2-4bc4-aefe-dc40cff84291",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail if receiver address is not full",
                "fullTitle": "Contract: EmissionFunds [all features] #sendFundsTo should fail if receiver address is not full",
                "timedOut": false,
                "duration": 639,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const signature = web3.sha3('sendFundsTo(address,uint256)').slice(0, 10);\nlet data = signature;\ndata += '0000000000000000000000000000000000000000000000000000000000000A';\ndata += '0000000000000000000000000000000000000000000000004563918244F40000';\nlet receipt = await web3.eth.getTransactionReceipt(\n  await web3.eth.sendTransaction({\n    from: votingToManageEmissionFunds,\n    to: emissionFunds.address,\n    data: data\n  })\n);\nreceipt.logs.length.should.be.equal(0);\ndata = signature;\ndata += '000000000000000000000000000000000000000000000000000000000000000A';\ndata += '0000000000000000000000000000000000000000000000004563918244F40000';\nreceipt = await web3.eth.getTransactionReceipt(\n  await web3.eth.sendTransaction({\n    from: votingToManageEmissionFunds,\n    to: emissionFunds.address,\n    data: data\n  })\n);\nreceipt.logs.length.should.be.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "d607ef78-ccf9-4d83-92f5-e012a3b4c81c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "917d60c0-6d1c-4d34-bad2-20a128b90d98",
              "6ec1649e-7dc9-4315-9f87-2ace695b075a",
              "3f7d39ef-a591-4977-9ff7-3893acaf1cbf",
              "19deb22c-f9cd-46a9-835a-fa6ef0b94ba5",
              "04a3f9e8-9adc-4d17-8279-a95016ae50d4",
              "23605669-c502-487f-b9fd-dbc1cb618d9f",
              "c3f4686a-77e2-4bc4-aefe-dc40cff84291",
              "d607ef78-ccf9-4d83-92f5-e012a3b4c81c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2437,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "1f32a48b-6ad7-46c1-a7b4-69c4f32715c3",
            "title": "#burnFunds",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/emission_funds_test.js",
            "file": "/test/emission_funds_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by VotingToManageEmissionFunds",
                "fullTitle": "Contract: EmissionFunds [all features] #burnFunds may only be called by VotingToManageEmissionFunds",
                "timedOut": false,
                "duration": 46,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToBurn = web3.toWei(5, 'ether');\nawait emissionFunds.burnFunds(\n  amountToBurn,\n  {from: accounts[3]}\n).should.be.rejectedWith(ERROR_MSG);\nawait emissionFunds.burnFunds(\n  amountToBurn,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "796d786b-6915-49f4-9ed4-a098391df765",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should burn funds",
                "fullTitle": "Contract: EmissionFunds [all features] #burnFunds should burn funds",
                "timedOut": false,
                "duration": 171,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToBurn = web3.toWei(4, 'ether');\nconst amountRemain = amount - amountToBurn;\nconst {logs} = await emissionFunds.burnFunds(\n  amountToBurn,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;\n\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(\n  amountRemain\n);\nlogs[0].event.should.be.equal(\"FundsBurnt\");\nlogs[0].args.caller.should.be.equal(votingToManageEmissionFunds);\nlogs[0].args.amount.should.be.bignumber.equal(amountToBurn);\nlogs[0].args.success.should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "bebbaddb-0cae-49be-a817-f48aa108bb43",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should burn entire amount",
                "fullTitle": "Contract: EmissionFunds [all features] #burnFunds should burn entire amount",
                "timedOut": false,
                "duration": 160,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await emissionFunds.burnFunds(\n  amount,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;\n\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(0);\n\nlogs[0].event.should.be.equal(\"FundsBurnt\");\nlogs[0].args.caller.should.be.equal(votingToManageEmissionFunds);\nlogs[0].args.amount.should.be.bignumber.equal(amount);\nlogs[0].args.success.should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "6052137f-1e6b-4987-a2b0-8b9269f090c7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not burn funds if amount greater than balance",
                "fullTitle": "Contract: EmissionFunds [all features] #burnFunds should not burn funds if amount greater than balance",
                "timedOut": false,
                "duration": 171,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToBurn = amount + 1;\nconst {logs} = await emissionFunds.burnFunds(\n  amountToBurn,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;\namount.should.be.bignumber.equal(\n  await web3.eth.getBalance(emissionFunds.address)\n);\nlogs[0].event.should.be.equal(\"FundsBurnt\");\nlogs[0].args.caller.should.be.equal(votingToManageEmissionFunds);\nlogs[0].args.amount.should.be.bignumber.equal(amountToBurn);\nlogs[0].args.success.should.be.equal(false);",
                "err": {},
                "isRoot": false,
                "uuid": "06126952-8650-45d6-a375-26a47dc6910f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not burn funds if amount is too much",
                "fullTitle": "Contract: EmissionFunds [all features] #burnFunds should not burn funds if amount is too much",
                "timedOut": false,
                "duration": 162,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToBurn = web3.toWei(11, 'ether');\nconst {logs} = await emissionFunds.burnFunds(\n  amountToBurn,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;\namount.should.be.bignumber.equal(\n  await web3.eth.getBalance(emissionFunds.address)\n);\nlogs[0].event.should.be.equal(\"FundsBurnt\");\nlogs[0].args.caller.should.be.equal(votingToManageEmissionFunds);\nlogs[0].args.amount.should.be.bignumber.equal(amountToBurn);\nlogs[0].args.success.should.be.equal(false);",
                "err": {},
                "isRoot": false,
                "uuid": "e9a9d924-9ad6-44e3-9579-5ec8032d094d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be fulfilled if amount is zero",
                "fullTitle": "Contract: EmissionFunds [all features] #burnFunds should be fulfilled if amount is zero",
                "timedOut": false,
                "duration": 164,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToBurn = 0;\nconst {logs} = await emissionFunds.burnFunds(\n  amountToBurn,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;\namount.should.be.bignumber.equal(\n  await web3.eth.getBalance(emissionFunds.address)\n);\nlogs[0].event.should.be.equal(\"FundsBurnt\");\nlogs[0].args.caller.should.be.equal(votingToManageEmissionFunds);\nlogs[0].args.amount.should.be.bignumber.equal(0);\nlogs[0].args.success.should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "81d8f0e8-e629-47df-be9b-135d83804413",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "796d786b-6915-49f4-9ed4-a098391df765",
              "bebbaddb-0cae-49be-a817-f48aa108bb43",
              "6052137f-1e6b-4987-a2b0-8b9269f090c7",
              "06126952-8650-45d6-a375-26a47dc6910f",
              "e9a9d924-9ad6-44e3-9579-5ec8032d094d",
              "81d8f0e8-e629-47df-be9b-135d83804413"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 874,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "2299995b-5285-43e9-a2b4-8e7886ef5d2f",
            "title": "#freezeFunds",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/emission_funds_test.js",
            "file": "/test/emission_funds_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by VotingToManageEmissionFunds",
                "fullTitle": "Contract: EmissionFunds [all features] #freezeFunds may only be called by VotingToManageEmissionFunds",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToFreeze = web3.toWei(5, 'ether');\nawait emissionFunds.freezeFunds(\n  amountToFreeze,\n  {from: accounts[3]}\n).should.be.rejectedWith(ERROR_MSG);\nawait emissionFunds.freezeFunds(\n  amountToFreeze,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "afcb4c29-b43c-4d9d-b73b-f60d28903da3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should freeze funds",
                "fullTitle": "Contract: EmissionFunds [all features] #freezeFunds should freeze funds",
                "timedOut": false,
                "duration": 164,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToFreeze = web3.toWei(4, 'ether');\nconst {logs} = await emissionFunds.freezeFunds(\n  amountToFreeze,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;\n\namount.should.be.bignumber.equal(\n  await web3.eth.getBalance(emissionFunds.address)\n);\nlogs[0].event.should.be.equal(\"FundsFrozen\");\nlogs[0].args.caller.should.be.equal(votingToManageEmissionFunds);\nlogs[0].args.amount.should.be.bignumber.equal(amountToFreeze);",
                "err": {},
                "isRoot": false,
                "uuid": "52c41018-6a40-45c4-a88a-30fb10646c27",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be fulfilled if amount is zero",
                "fullTitle": "Contract: EmissionFunds [all features] #freezeFunds should be fulfilled if amount is zero",
                "timedOut": false,
                "duration": 160,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToFreeze = 0;\nconst {logs} = await emissionFunds.freezeFunds(\n  amountToFreeze,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;\namount.should.be.bignumber.equal(\n  await web3.eth.getBalance(emissionFunds.address)\n);\nlogs[0].event.should.be.equal(\"FundsFrozen\");\nlogs[0].args.caller.should.be.equal(votingToManageEmissionFunds);\nlogs[0].args.amount.should.be.bignumber.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "1f256420-96c1-4a54-ac0c-727ca140eda2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "afcb4c29-b43c-4d9d-b73b-f60d28903da3",
              "52c41018-6a40-45c4-a88a-30fb10646c27",
              "1f256420-96c1-4a54-ac0c-727ca140eda2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 366,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "d9ecd49f-b65b-4ab3-a6ec-65a1ef37b7f2",
        "title": "Contract: EternalStorageProxy [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/eternal_storage_proxy_test.js",
        "file": "/test/eternal_storage_proxy_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: EternalStorageProxy [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 336,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "4458358c-10fe-4f45-b8e4-262502dc349d",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: EternalStorageProxy [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 4,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "b4df82df-e884-4d7e-88c6-271dfc5e37f5",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: EternalStorageProxy [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "90688731-3a0b-4303-aa36-b7bb1e1112ad",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "47ff864b-2732-403c-88ea-23fd1a1eb256",
            "title": "constructor",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/eternal_storage_proxy_test.js",
            "file": "/test/eternal_storage_proxy_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should revert if implementation address is equal to 0x0",
                "fullTitle": "Contract: EternalStorageProxy [all features] constructor should revert if implementation address is equal to 0x0",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await EternalStorageProxy.new(\n  accounts[1],\n  '0x0000000000000000000000000000000000000000'\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "bb0bbbe7-d4fd-4266-a210-afd07ad0260f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow ProxyStorage address equal to 0x0",
                "fullTitle": "Contract: EternalStorageProxy [all features] constructor should allow ProxyStorage address equal to 0x0",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const instance = await EternalStorageProxy.new(\n  '0x0000000000000000000000000000000000000000',\n  accounts[1]\n).should.be.fulfilled;\ninstance.address.should.be.equal(\n  await instance.getProxyStorage.call()\n);",
                "err": {},
                "isRoot": false,
                "uuid": "a0596416-c3a0-4b03-9cfc-8ff6cf771e6f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set ProxyStorage address",
                "fullTitle": "Contract: EternalStorageProxy [all features] constructor should set ProxyStorage address",
                "timedOut": false,
                "duration": 60,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const instance = await EternalStorageProxy.new(\n  accounts[1],\n  accounts[2]\n).should.be.fulfilled;\n(await instance.getProxyStorage.call()).should.be.equal(accounts[1]);",
                "err": {},
                "isRoot": false,
                "uuid": "2e238e79-41dc-4634-8cd0-19241a6b473a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set implementation address",
                "fullTitle": "Contract: EternalStorageProxy [all features] constructor should set implementation address",
                "timedOut": false,
                "duration": 43,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const instance = await EternalStorageProxy.new(\n  accounts[1],\n  accounts[2]\n).should.be.fulfilled;\n(await instance.implementation.call()).should.be.equal(accounts[2]);",
                "err": {},
                "isRoot": false,
                "uuid": "877884ef-db1b-4ab5-a0fb-4bb082156eee",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set owner",
                "fullTitle": "Contract: EternalStorageProxy [all features] constructor should set owner",
                "timedOut": false,
                "duration": 43,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const instance = await EternalStorageProxy.new(\n  accounts[1],\n  accounts[2]\n).should.be.fulfilled;\n(await instance.getOwner.call()).should.be.equal(accounts[0]);",
                "err": {},
                "isRoot": false,
                "uuid": "1b082b24-002e-4b6d-ae02-f415a38af5ea",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "bb0bbbe7-d4fd-4266-a210-afd07ad0260f",
              "a0596416-c3a0-4b03-9cfc-8ff6cf771e6f",
              "2e238e79-41dc-4634-8cd0-19241a6b473a",
              "877884ef-db1b-4ab5-a0fb-4bb082156eee",
              "1b082b24-002e-4b6d-ae02-f415a38af5ea"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 203,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "f61eb91f-dbcb-45e2-b69b-c49731730932",
            "title": "#renounceOwnership",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/eternal_storage_proxy_test.js",
            "file": "/test/eternal_storage_proxy_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: EternalStorageProxy [all features] #renounceOwnership \"before each\" hook",
                "timedOut": false,
                "duration": 31,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "instance = await EternalStorageProxy.new(\n  accounts[1],\n  accounts[2]\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "0372b736-c329-487f-b714-741468b74427",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by an owner",
                "fullTitle": "Contract: EternalStorageProxy [all features] #renounceOwnership may only be called by an owner",
                "timedOut": false,
                "duration": 35,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await instance.renounceOwnership({from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait instance.renounceOwnership().should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "e221a3aa-e280-43af-ad42-dfc7e28d6092",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set owner to 0x0",
                "fullTitle": "Contract: EternalStorageProxy [all features] #renounceOwnership should set owner to 0x0",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await instance.renounceOwnership().should.be.fulfilled;\n(await instance.getOwner.call()).should.be.equal(\n  '0x0000000000000000000000000000000000000000'\n);\nlogs[0].event.should.be.equal(\"OwnershipRenounced\");\nlogs[0].args.previousOwner.should.be.equal(accounts[0]);",
                "err": {},
                "isRoot": false,
                "uuid": "2020c379-46d2-45e2-aa91-dc0e47166990",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e221a3aa-e280-43af-ad42-dfc7e28d6092",
              "2020c379-46d2-45e2-aa91-dc0e47166990"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 77,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "eb8254b9-fcbe-450d-826c-0ef9961315c6",
            "title": "#transferOwnership",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/eternal_storage_proxy_test.js",
            "file": "/test/eternal_storage_proxy_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: EternalStorageProxy [all features] #transferOwnership \"before each\" hook",
                "timedOut": false,
                "duration": 40,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "instance = await EternalStorageProxy.new(\n  accounts[1],\n  accounts[2]\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "fead28d8-a608-4605-8a6d-aac377aa216a",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by an owner",
                "fullTitle": "Contract: EternalStorageProxy [all features] #transferOwnership may only be called by an owner",
                "timedOut": false,
                "duration": 37,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await instance.transferOwnership(\n  accounts[3],\n  {from: accounts[4]}\n).should.be.rejectedWith(ERROR_MSG);\nawait instance.transferOwnership(accounts[3]).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "c5f99156-5d3a-44a1-8d47-044171386b21",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change owner",
                "fullTitle": "Contract: EternalStorageProxy [all features] #transferOwnership should change owner",
                "timedOut": false,
                "duration": 51,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await instance.transferOwnership(accounts[3]).should.be.fulfilled;\n(await instance.getOwner.call()).should.be.equal(accounts[3]);\nlogs[0].event.should.be.equal(\"OwnershipTransferred\");\nlogs[0].args.previousOwner.should.be.equal(accounts[0]);\nlogs[0].args.newOwner.should.be.equal(accounts[3]);",
                "err": {},
                "isRoot": false,
                "uuid": "28679d36-3997-4364-8e55-d9eb36977a94",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not change owner if its address is 0x0",
                "fullTitle": "Contract: EternalStorageProxy [all features] #transferOwnership should not change owner if its address is 0x0",
                "timedOut": false,
                "duration": 19,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await instance.transferOwnership(\n  '0x0000000000000000000000000000000000000000'\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "0e1e50e5-56d7-4c48-9833-e5024aee9a6f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c5f99156-5d3a-44a1-8d47-044171386b21",
              "28679d36-3997-4364-8e55-d9eb36977a94",
              "0e1e50e5-56d7-4c48-9833-e5024aee9a6f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 107,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "693bc294-2b20-40f4-a636-d5f51aaa9e29",
            "title": "#upgradeTo",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/eternal_storage_proxy_test.js",
            "file": "/test/eternal_storage_proxy_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: EternalStorageProxy [all features] #upgradeTo \"before each\" hook",
                "timedOut": false,
                "duration": 33,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "instance = await EternalStorageProxy.new(\n  accounts[1],\n  accounts[2]\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "b6771e79-624a-4446-9a1a-664354b31832",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by ProxyStorage",
                "fullTitle": "Contract: EternalStorageProxy [all features] #upgradeTo may only be called by ProxyStorage",
                "timedOut": false,
                "duration": 54,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await instance.upgradeTo(accounts[3]).should.be.rejectedWith(ERROR_MSG);\nconst {logs} = await instance.upgradeTo(accounts[3], {from: accounts[1]});\nlogs[0].event.should.be.equal(\"Upgraded\");",
                "err": {},
                "isRoot": false,
                "uuid": "e2f44c11-3c7f-4048-aa63-cf52bc44359e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not change implementation address if it is the same",
                "fullTitle": "Contract: EternalStorageProxy [all features] #upgradeTo should not change implementation address if it is the same",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = await instance.upgradeTo(\n  accounts[2],\n  {from: accounts[1]}\n).should.be.fulfilled;\nresult.logs.length.should.be.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "c7dc991b-88d8-4d30-8c60-867be0757c7d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not change implementation address if it is 0x0",
                "fullTitle": "Contract: EternalStorageProxy [all features] #upgradeTo should not change implementation address if it is 0x0",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = await instance.upgradeTo(\n  '0x0000000000000000000000000000000000000000',\n  {from: accounts[1]}\n);\nresult.logs.length.should.be.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "4a999261-befe-46e0-8d83-561c9f51df88",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change implementation address",
                "fullTitle": "Contract: EternalStorageProxy [all features] #upgradeTo should change implementation address",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await instance.upgradeTo(\n  accounts[3],\n  {from: accounts[1]}\n).should.be.fulfilled;\n(await instance.implementation.call()).should.be.equal(accounts[3]);\nlogs[0].event.should.be.equal(\"Upgraded\");\nlogs[0].args.version.should.be.bignumber.equal(1);\nlogs[0].args.implementation.should.be.equal(accounts[3]);",
                "err": {},
                "isRoot": false,
                "uuid": "27ba2b3c-74c7-4bfa-9221-24ac5d71aa37",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment version",
                "fullTitle": "Contract: EternalStorageProxy [all features] #upgradeTo should increment version",
                "timedOut": false,
                "duration": 51,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await instance.version.call()).should.be.bignumber.equal(0);\nconst {logs} = await instance.upgradeTo(\n  accounts[3],\n  {from: accounts[1]}\n);\nlogs[0].event.should.be.equal(\"Upgraded\");\n(await instance.version.call()).should.be.bignumber.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "a7f990ef-69ea-4196-a35f-c8ac3956053b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e2f44c11-3c7f-4048-aa63-cf52bc44359e",
              "c7dc991b-88d8-4d30-8c60-867be0757c7d",
              "4a999261-befe-46e0-8d83-561c9f51df88",
              "27ba2b3c-74c7-4bfa-9221-24ac5d71aa37",
              "a7f990ef-69ea-4196-a35f-c8ac3956053b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 201,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "924a0ab1-51fa-480f-9791-8f0878571986",
        "title": "Contract: KeysManager [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
        "file": "/test/keys_manager_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: KeysManager [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 439,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "c9425210-c77c-45f2-89f8-1d9a028f76fc",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: KeysManager [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "2f004a3a-e85c-45fe-86f4-a3c1162227dc",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: KeysManager [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 675,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "masterOfCeremony = accounts[0];\npoaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony, []);\n\nproxyStorageMock = await ProxyStorageMock.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorageMock.address);\nproxyStorageMock = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorageMock.init(poaNetworkConsensusMock.address).should.be.fulfilled;\n\nkeysManager = await KeysManagerMock.new();\nkeysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, keysManager.address);\nkeysManager = await KeysManagerMock.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\",\n  {from: accounts[1]}\n).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\nlet ballotsStorage = await BallotsStorage.new();\nlet ballotsEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, ballotsStorage.address);\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\nvalidatorMetadata = await ValidatorMetadata.new();\nlet validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, validatorMetadata.address);\nvalidatorMetadata = ValidatorMetadata.at(validatorMetadataEternalStorage.address);\n\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\nawait proxyStorageMock.initializeAddresses(\n  keysManager.address,\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  ballotsStorage.address,\n  validatorMetadata.address,\n  accounts[0]\n);",
            "err": {},
            "isRoot": false,
            "uuid": "f7baa675-27fc-4f39-bf7e-93210adab394",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: KeysManager [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "d77cd18d-f65e-473d-a022-303a6386853f",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "1cc35c65-5fcc-4687-833e-dfafde21cb7d",
            "title": "#constructor",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "sets masterOfCeremony, proxyStorage, poaConsensus",
                "fullTitle": "Contract: KeysManager [all features] #constructor sets masterOfCeremony, proxyStorage, poaConsensus",
                "timedOut": false,
                "duration": 59,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "masterOfCeremony.should.be.equal(await keysManager.masterOfCeremony.call());\nproxyStorageMock.address.should.be.equal(await keysManager.proxyStorage.call());\npoaNetworkConsensusMock.address.should.be.equal(await keysManager.poaNetworkConsensus.call());",
                "err": {},
                "isRoot": false,
                "uuid": "32e0bd0d-1082-4332-8087-1d40ece323c2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "adds masterOfCeremony to validators hash",
                "fullTitle": "Contract: KeysManager [all features] #constructor adds masterOfCeremony to validators hash",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const validator = await keysManager.validatorKeys.call(masterOfCeremony);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "4cb9dd47-23fd-441e-8d74-de5f93b48e39",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be called twice",
                "fullTitle": "Contract: KeysManager [all features] #constructor cannot be called twice",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.init(\n  '0x0000000000000000000000000000000000000000'\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "c2ee90c3-a275-4cd1-83dd-cbb3942ba7ba",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "32e0bd0d-1082-4332-8087-1d40ece323c2",
              "4cb9dd47-23fd-441e-8d74-de5f93b48e39",
              "c2ee90c3-a275-4cd1-83dd-cbb3942ba7ba"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 123,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "b90ae9d8-27e8-4e5e-b60c-8c36c2961964",
            "title": "#initiateKeys",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "can only be called by master of ceremony",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys can only be called by master of ceremony",
                "timedOut": false,
                "duration": 84,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "a09cb538-dee1-4427-aeb4-7ea0cdc36330",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot allow 0x0 addresses",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys cannot allow 0x0 addresses",
                "timedOut": false,
                "duration": 63,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys('0x0000000000000000000000000000000000000000').should.be.rejectedWith(ERROR_MSG);\nawait keysManager.initiateKeys('0x0').should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "0b606586-5f47-439e-afef-415d3544ff01",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow to initialize already initialized key",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys should not allow to initialize already initialized key",
                "timedOut": false,
                "duration": 80,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "dbf0ac1b-aea7-4679-8a47-906203f1fe1c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow to initialize already initialized key after validator created mining key",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys should not allow to initialize already initialized key after validator created mining key",
                "timedOut": false,
                "duration": 251,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.fulfilled;   \nawait keysManager.createKeys(accounts[3],accounts[4],accounts[5], {from: accounts[2]}).should.be.fulfilled;\nawait keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "1062609c-2835-41b0-9409-7dad8b523217",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not equal to master of ceremony",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys should not equal to master of ceremony",
                "timedOut": false,
                "duration": 37,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(masterOfCeremony, {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "f6b2cd67-f4bc-4b5a-a2a1-667d0f82b3b8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow to initialize more than maxNumberOfInitialKeys",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys should not allow to initialize more than maxNumberOfInitialKeys",
                "timedOut": false,
                "duration": 628,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let maxNumberOfInitialKeys = await keysManager.maxNumberOfInitialKeys.call();\nmaxNumberOfInitialKeys.should.be.bignumber.equal(12);\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000001', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000002', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000003', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000004', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000005', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000006', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000007', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000008', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000009', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000010', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000011', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000012', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000013', {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "1069f772-af98-477c-83fc-ca4e595f451b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment initialKeyCount by 1",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys should increment initialKeyCount by 1",
                "timedOut": false,
                "duration": 80,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let initialKeysCount = await keysManager.initialKeysCount.call();\ninitialKeysCount.should.be.bignumber.equal(0);\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\ninitialKeysCount = await keysManager.initialKeysCount.call();\ninitialKeysCount.should.be.bignumber.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "fed30d17-754f-4b54-ba11-f8de8df8a275",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set initialKeys hash to activated status",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys should set initialKeys hash to activated status",
                "timedOut": false,
                "duration": 89,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new web3.BigNumber(0).should.be.bignumber.equal(await keysManager.getInitialKeyStatus.call(accounts[1]));\nconst {logs} = await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nnew web3.BigNumber(1).should.be.bignumber.equal(await keysManager.getInitialKeyStatus.call(accounts[1]));\nlet initialKeysCount = await keysManager.initialKeysCount.call();\n// event InitialKeyCreated(address indexed initialKey, uint256 time, uint256 initialKeysCount);\nlogs[0].event.should.equal(\"InitialKeyCreated\");\nlogs[0].args.initialKey.should.be.equal(accounts[1]);\ninitialKeysCount.should.be.bignumber.equal(logs[0].args.initialKeysCount);",
                "err": {},
                "isRoot": false,
                "uuid": "29e0e675-aba0-4008-8791-29ca4ad676db",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a09cb538-dee1-4427-aeb4-7ea0cdc36330",
              "0b606586-5f47-439e-afef-415d3544ff01",
              "dbf0ac1b-aea7-4679-8a47-906203f1fe1c",
              "1062609c-2835-41b0-9409-7dad8b523217",
              "f6b2cd67-f4bc-4b5a-a2a1-667d0f82b3b8",
              "1069f772-af98-477c-83fc-ca4e595f451b",
              "fed30d17-754f-4b54-ba11-f8de8df8a275",
              "29e0e675-aba0-4008-8791-29ca4ad676db"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1312,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "bb9ee8e9-4cad-4743-a887-eec34fc23d20",
            "title": "#createKeys",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should only be called from initialized key",
                "fullTitle": "Contract: KeysManager [all features] #createKeys should only be called from initialized key",
                "timedOut": false,
                "duration": 173,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.createKeys(accounts[2], accounts[3], accounts[4], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(accounts[2], accounts[3], accounts[4], {from: accounts[1]}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "31be3df7-543d-4066-8519-ef6f582062d0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "params should not be equal to 0x0",
                "fullTitle": "Contract: KeysManager [all features] #createKeys params should not be equal to 0x0",
                "timedOut": false,
                "duration": 228,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(\n  '0x0000000000000000000000000000000000000000',\n  accounts[3],\n  accounts[4],\n  {from: accounts[1]}\n).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(\n  accounts[2],\n  '0x0000000000000000000000000000000000000000',\n  accounts[4],\n  {from: accounts[1]}\n).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(\n  accounts[2],\n  accounts[3],\n  '0x0000000000000000000000000000000000000000',\n  {from: accounts[1]}\n).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(\n  accounts[2],\n  accounts[3],\n  accounts[4],\n  {from: accounts[1]}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "1063ac32-d5ff-419a-928d-e48aaaef460c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "params should not be equal to each other",
                "fullTitle": "Contract: KeysManager [all features] #createKeys params should not be equal to each other",
                "timedOut": false,
                "duration": 215,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(masterOfCeremony, masterOfCeremony, accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(masterOfCeremony, accounts[2], accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(masterOfCeremony, accounts[2], masterOfCeremony, {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "7e6b9143-c2f5-4f51-a19d-a1e7804f2f45",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "any of params should not be equal to initialKey",
                "fullTitle": "Contract: KeysManager [all features] #createKeys any of params should not be equal to initialKey",
                "timedOut": false,
                "duration": 131,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(accounts[1], masterOfCeremony, accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(masterOfCeremony, accounts[1], accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(masterOfCeremony, accounts[2], accounts[1], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "146a96ac-67ea-4104-b5ac-15b9b41c6fb7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow passing the same key after it is already created",
                "fullTitle": "Contract: KeysManager [all features] #createKeys should not allow passing the same key after it is already created",
                "timedOut": false,
                "duration": 360,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(accounts[4], accounts[3], accounts[2], {from: accounts[1]}).should.be.fulfilled;\nawait keysManager.initiateKeys(accounts[5], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(accounts[8], accounts[7], accounts[2], {from: accounts[5]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(accounts[8], accounts[3], accounts[6], {from: accounts[5]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(accounts[4], accounts[7], accounts[6], {from: accounts[5]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(accounts[8], accounts[7], accounts[6], {from: accounts[5]}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "4e8e9f17-6a09-4df2-a012-03c07c2cf645",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assign mining, voting, payout keys to relative mappings",
                "fullTitle": "Contract: KeysManager [all features] #createKeys should assign mining, voting, payout keys to relative mappings",
                "timedOut": false,
                "duration": 185,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nconst {logs} = await keysManager.createKeys(accounts[4], accounts[3], accounts[2], {from: accounts[1]}).should.be.fulfilled;\ntrue.should.be.equal(\n  await keysManager.isMiningActive.call(accounts[4])\n)\ntrue.should.be.equal(\n  await keysManager.isVotingActive.call(accounts[3])\n)\ntrue.should.be.equal(\n  await keysManager.isPayoutActive.call(accounts[4])\n)\n// event ValidatorInitialized(address indexed miningKey, address indexed votingKey, address indexed payoutKey);\nlogs[0].event.should.be.equal('ValidatorInitialized');\nlogs[0].args.miningKey.should.be.equal(accounts[4]);\nlogs[0].args.votingKey.should.be.equal(accounts[3]);\nlogs[0].args.payoutKey.should.be.equal(accounts[2]);",
                "err": {},
                "isRoot": false,
                "uuid": "12bb4571-5f47-4e20-937d-d2d0a3a5b7ac",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assign voting <-> mining key and payout <-> mining key relationships",
                "fullTitle": "Contract: KeysManager [all features] #createKeys should assign voting <-> mining key and payout <-> mining key relationships",
                "timedOut": false,
                "duration": 190,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(accounts[4], accounts[3], accounts[2], {from: accounts[1]});\naccounts[4].should.be.equal(\n  await keysManager.getMiningKeyByVoting.call(accounts[3])\n);\naccounts[4].should.be.equal(\n  await keysManager.miningKeyByPayout.call(accounts[2])\n);",
                "err": {},
                "isRoot": false,
                "uuid": "ecb56e0a-b87d-4266-899b-7d3464612541",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "adds validator to poaConsensus contract",
                "fullTitle": "Contract: KeysManager [all features] #createKeys adds validator to poaConsensus contract",
                "timedOut": false,
                "duration": 151,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[4];\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(miningKey, accounts[3], accounts[2], {from: accounts[1]});\nconst index = await poaNetworkConsensusMock.getCurrentValidatorsLength.call();\n(await poaNetworkConsensusMock.pendingList.call(index)).should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "e547b065-ec00-46e0-88a5-7d38ba2bed58",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set validatorKeys hash",
                "fullTitle": "Contract: KeysManager [all features] #createKeys should set validatorKeys hash",
                "timedOut": false,
                "duration": 148,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[4];\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(miningKey, accounts[3], accounts[2], {from: accounts[1]});\nconst validatorKey = await keysManager.validatorKeys.call(miningKey);\nvalidatorKey.should.be.deep.equal([\n  accounts[3],\n  accounts[2],\n  true,\n  true,\n  true\n])",
                "err": {},
                "isRoot": false,
                "uuid": "fb6a94a3-7686-4bfe-b78b-b5e72897987e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set validatorKeys hash",
                "fullTitle": "Contract: KeysManager [all features] #createKeys should set validatorKeys hash",
                "timedOut": false,
                "duration": 146,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[4];\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(miningKey, accounts[3], accounts[2], {from: accounts[1]});\nnew web3.BigNumber(2).should.be.bignumber.equal(await keysManager.getInitialKeyStatus.call(accounts[1]));",
                "err": {},
                "isRoot": false,
                "uuid": "30ae78f9-ca67-4e49-b3d9-8c64a284bc70",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "31be3df7-543d-4066-8519-ef6f582062d0",
              "1063ac32-d5ff-419a-928d-e48aaaef460c",
              "7e6b9143-c2f5-4f51-a19d-a1e7804f2f45",
              "146a96ac-67ea-4104-b5ac-15b9b41c6fb7",
              "4e8e9f17-6a09-4df2-a012-03c07c2cf645",
              "12bb4571-5f47-4e20-937d-d2d0a3a5b7ac",
              "ecb56e0a-b87d-4266-899b-7d3464612541",
              "e547b065-ec00-46e0-88a5-7d38ba2bed58",
              "fb6a94a3-7686-4bfe-b78b-b5e72897987e",
              "30ae78f9-ca67-4e49-b3d9-8c64a284bc70"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1927,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "34bd3134-8516-4e70-af85-02402b362a30",
            "title": "#addMiningKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called if KeysManager.init had been called before",
                "fullTitle": "Contract: KeysManager [all features] #addMiningKey may only be called if KeysManager.init had been called before",
                "timedOut": false,
                "duration": 89,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.setInitEnabled().should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(accounts[2]);\nawait addMiningKey(accounts[1], false, {from: accounts[2]});",
                "err": {},
                "isRoot": false,
                "uuid": "79137e8a-058f-44c6-9e83-dd43c424c936",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should only be called from votingToChangeKeys",
                "fullTitle": "Contract: KeysManager [all features] #addMiningKey should only be called from votingToChangeKeys",
                "timedOut": false,
                "duration": 117,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.addMiningKey(accounts[1],{from: accounts[5]}).should.be.rejectedWith(ERROR_MSG);\nawait proxyStorageMock.setVotingContractMock(accounts[2]);\nawait addMiningKey(accounts[1], true, {from: accounts[2]});",
                "err": {},
                "isRoot": false,
                "uuid": "def1f8ea-1899-4d47-8e7b-b54188cb17bb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let add more than maxLimit",
                "fullTitle": "Contract: KeysManager [all features] #addMiningKey should not let add more than maxLimit",
                "timedOut": false,
                "duration": 57,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensusMock.setCurrentValidatorsLength(2001);\nawait addMiningKey(accounts[2], false);",
                "err": {},
                "isRoot": false,
                "uuid": "75592399-2158-4b3c-98a6-8ff07a0ac305",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set validatorKeys hash",
                "fullTitle": "Contract: KeysManager [all features] #addMiningKey should set validatorKeys hash",
                "timedOut": false,
                "duration": 96,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await keysManager.addMiningKey(accounts[2]).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys.call(accounts[2]);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false]\n)\nlogs[0].event.should.be.equal('MiningKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.action.should.be.equal('added');",
                "err": {},
                "isRoot": false,
                "uuid": "2121eb57-6ae0-467d-8ff8-bd9e02277b25",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "79137e8a-058f-44c6-9e83-dd43c424c936",
              "def1f8ea-1899-4d47-8e7b-b54188cb17bb",
              "75592399-2158-4b3c-98a6-8ff07a0ac305",
              "2121eb57-6ae0-467d-8ff8-bd9e02277b25"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 359,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "072edeb5-f1f5-40f9-834b-31f241ecba54",
            "title": "#addVotingKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called if KeysManager.init had been called before",
                "fullTitle": "Contract: KeysManager [all features] #addVotingKey may only be called if KeysManager.init had been called before",
                "timedOut": false,
                "duration": 140,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait keysManager.setInitEnabled().should.be.fulfilled;\nawait addVotingKey(accounts[2], accounts[1], false);",
                "err": {},
                "isRoot": false,
                "uuid": "b1a544df-2f52-4b39-8e66-62d22a71949d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "may only be called if params are not the same",
                "fullTitle": "Contract: KeysManager [all features] #addVotingKey may only be called if params are not the same",
                "timedOut": false,
                "duration": 147,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[1], accounts[1], false);\nawait addVotingKey(accounts[2], accounts[1], true);",
                "err": {},
                "isRoot": false,
                "uuid": "8e3dc18a-0fb4-425b-8c18-079f830d2621",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should add VotingKey",
                "fullTitle": "Contract: KeysManager [all features] #addVotingKey should add VotingKey",
                "timedOut": false,
                "duration": 181,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.addVotingKey(accounts[2], accounts[1], {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(accounts[1], true);\nconst {logs} = await keysManager.addVotingKey(accounts[2], accounts[1]).should.be.fulfilled;\ntrue.should.be.equal(await keysManager.isVotingActive.call(accounts[2]));\nlogs[0].event.should.be.equal('VotingKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.miningKey.should.be.equal(accounts[1]);\nlogs[0].args.action.should.be.equal('added');\nconst miningKey = await keysManager.getMiningKeyByVoting.call(accounts[2]);\nminingKey.should.be.equal(accounts[1]);",
                "err": {},
                "isRoot": false,
                "uuid": "12103bee-71d0-460a-b351-7444ab156252",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should only be called if mining is active",
                "fullTitle": "Contract: KeysManager [all features] #addVotingKey should only be called if mining is active",
                "timedOut": false,
                "duration": 322,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nconst {logs} = await keysManager.removeMiningKey(accounts[1]);\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nawait addVotingKey(accounts[2], accounts[1], false);",
                "err": {},
                "isRoot": false,
                "uuid": "acc34d41-e9cd-4802-b2fd-b332db45bc45",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "swaps keys if voting already exists",
                "fullTitle": "Contract: KeysManager [all features] #addVotingKey swaps keys if voting already exists",
                "timedOut": false,
                "duration": 235,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[2], accounts[1], true);\nawait addVotingKey(accounts[3], accounts[1], true);\nfalse.should.be.equal(await keysManager.isVotingActive.call(accounts[2]));\ntrue.should.be.equal(await keysManager.isVotingActive.call(accounts[3]));\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ accounts[3],\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "fb590c08-67ac-40a5-b517-2e9801068e13",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b1a544df-2f52-4b39-8e66-62d22a71949d",
              "8e3dc18a-0fb4-425b-8c18-079f830d2621",
              "12103bee-71d0-460a-b351-7444ab156252",
              "acc34d41-e9cd-4802-b2fd-b332db45bc45",
              "fb590c08-67ac-40a5-b517-2e9801068e13"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1025,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "c4ae46c2-56aa-4b11-9a2e-b23badbc3b0a",
            "title": "#addPayoutKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called if KeysManager.init had been called before",
                "fullTitle": "Contract: KeysManager [all features] #addPayoutKey may only be called if KeysManager.init had been called before",
                "timedOut": false,
                "duration": 133,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait keysManager.setInitEnabled().should.be.fulfilled;\nawait addPayoutKey(accounts[2], accounts[1], false);",
                "err": {},
                "isRoot": false,
                "uuid": "38a11951-94d1-4660-9a66-ae73809d1c53",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "may only be called if params are not the same",
                "fullTitle": "Contract: KeysManager [all features] #addPayoutKey may only be called if params are not the same",
                "timedOut": false,
                "duration": 144,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addPayoutKey(accounts[1], accounts[1], false);\nawait addPayoutKey(accounts[2], accounts[1], true);",
                "err": {},
                "isRoot": false,
                "uuid": "7dc7a846-5181-477a-82b9-5b70a379bdb6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should add PayoutKey",
                "fullTitle": "Contract: KeysManager [all features] #addPayoutKey should add PayoutKey",
                "timedOut": false,
                "duration": 276,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addPayoutKey(accounts[2], accounts[1], false);\nawait addMiningKey(accounts[1], true);\nconst {logs} = await keysManager.addPayoutKey(accounts[2], accounts[1]).should.be.fulfilled;\nlogs[0].event.should.be.equal('PayoutKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.miningKey.should.be.equal(accounts[1]);\nlogs[0].args.action.should.be.equal('added');\n(await keysManager.miningKeyByPayout.call(accounts[2])).should.be.equal(\n  accounts[1]\n);",
                "err": {},
                "isRoot": false,
                "uuid": "ddf98097-63dc-47b6-a41c-9174fcc12250",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should only be called if mining is active",
                "fullTitle": "Contract: KeysManager [all features] #addPayoutKey should only be called if mining is active",
                "timedOut": false,
                "duration": 234,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nconst {logs} = await keysManager.removeMiningKey(accounts[1]);\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nawait addPayoutKey(accounts[2], accounts[1], false);",
                "err": {},
                "isRoot": false,
                "uuid": "d2a1b508-80e5-44df-8ad5-b34d1587166a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "swaps keys if voting already exists",
                "fullTitle": "Contract: KeysManager [all features] #addPayoutKey swaps keys if voting already exists",
                "timedOut": false,
                "duration": 250,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addPayoutKey(accounts[2], accounts[1], true);\nawait addPayoutKey(accounts[3], accounts[1], true);\ntrue.should.be.equal(await keysManager.isPayoutActive.call(accounts[1]));\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  accounts[3],\n  true,\n  false,\n  true]\n);\n(await keysManager.miningKeyByPayout.call(accounts[3])).should.be.equal(\n  accounts[1]\n);\n(await keysManager.miningKeyByPayout.call(accounts[2])).should.be.equal(\n  '0x0000000000000000000000000000000000000000'\n);",
                "err": {},
                "isRoot": false,
                "uuid": "197ee580-011a-42f1-87da-2f183218779a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "38a11951-94d1-4660-9a66-ae73809d1c53",
              "7dc7a846-5181-477a-82b9-5b70a379bdb6",
              "ddf98097-63dc-47b6-a41c-9174fcc12250",
              "d2a1b508-80e5-44df-8ad5-b34d1587166a",
              "197ee580-011a-42f1-87da-2f183218779a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1037,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "bff14d6c-b3a7-4728-a61c-e33696489b68",
            "title": "#removeMiningKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called if KeysManager.init had been called before",
                "fullTitle": "Contract: KeysManager [all features] #removeMiningKey may only be called if KeysManager.init had been called before",
                "timedOut": false,
                "duration": 172,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[3], accounts[1], true);\nawait keysManager.setInitEnabled().should.be.fulfilled;\nlet result = await keysManager.removeMiningKey(accounts[1]);\nresult.logs.length.should.be.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "9ee3f296-2198-4179-ada2-790ac42a88ae",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should remove miningKey",
                "fullTitle": "Contract: KeysManager [all features] #removeMiningKey should remove miningKey",
                "timedOut": false,
                "duration": 635,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.removeMiningKey(accounts[1], {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[3], accounts[1], true);\nconst validatorData = [\n  \"Djamshut\", \"Roosvelt\", \"123asd\", \"Moskva\", \"ZZ\", \"234\", 23423\n];\nawait validatorMetadata.setTime(55555);\nawait validatorMetadata.createMetadata(...validatorData, {from: accounts[3]}).should.be.fulfilled;\n(await validatorMetadata.validators.call(accounts[1])).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2)\n]);\nconst {logs} = await keysManager.removeMiningKey(accounts[1]).should.be.fulfilled;\n(await validatorMetadata.validators.call(accounts[1])).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0)\n]);\n\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false ]\n);\nlogs[0].event.should.be.equal('MiningKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[1]);\nlogs[0].args.action.should.be.equal('removed');\nlogs[1].event.should.be.equal('VotingKeyChanged');\nlogs[1].args.key.should.be.equal(accounts[3]);\nlogs[1].args.miningKey.should.be.equal(accounts[1]);\nlogs[1].args.action.should.be.equal('removed');\n(await keysManager.getMiningKeyByVoting.call(validator[0])).should.be.equal(\n  '0x0000000000000000000000000000000000000000'\n);\n(await keysManager.miningKeyByPayout.call(validator[1])).should.be.equal(\n  '0x0000000000000000000000000000000000000000'\n);\nlet result = await keysManager.removeVotingKey(accounts[1]).should.be.fulfilled;\nresult.logs.length.should.be.equal(0);\nresult = await keysManager.removeMiningKey(accounts[1]);\nresult.logs.length.should.be.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "cfc6e176-1a6c-4a3b-962b-89c04758892f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "removes validator from poaConsensus",
                "fullTitle": "Contract: KeysManager [all features] #removeMiningKey removes validator from poaConsensus",
                "timedOut": false,
                "duration": 345,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst {logs} = await keysManager.removeMiningKey(accounts[1]);\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nlet currentValidatorsLength = await poaNetworkConsensusMock.getCurrentValidatorsLength.call();\nlet pendingList = [];\nfor(let i = 0; i < currentValidatorsLength.sub(1).toNumber(); i++){\n    let pending = await poaNetworkConsensusMock.pendingList.call(i);\n    pendingList.push(pending);\n}\npendingList.should.not.contain(accounts[1]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators.call();\nvalidators.should.not.contain(accounts[1]);\nconst expected = currentValidatorsLength.sub(1);\nconst actual = await poaNetworkConsensusMock.getCurrentValidatorsLength.call();\nexpected.should.be.bignumber.equal(actual);",
                "err": {},
                "isRoot": false,
                "uuid": "42fdf42b-ad0c-4c68-a1ff-88b7dc134e90",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "removes MoC from poaConsensus",
                "fullTitle": "Contract: KeysManager [all features] #removeMiningKey removes MoC from poaConsensus",
                "timedOut": false,
                "duration": 1079,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys('0x0000000000000000000000000000000000000001', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000002', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000003', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000004', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000005', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000006', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000007', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000008', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000009', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000010', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000011', {from: masterOfCeremony}).should.be.fulfilled;\n\nlet result = await keysManager.removeMiningKey(masterOfCeremony);\nresult.logs.length.should.be.equal(0);\n(await poaNetworkConsensusMock.isMasterOfCeremonyRemoved.call()).should.be.equal(false);\n(await keysManager.masterOfCeremony.call()).should.be.equal(masterOfCeremony);\n(await poaNetworkConsensusMock.isValidator.call(masterOfCeremony)).should.be.equal(true);\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(1);\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000012', {from: masterOfCeremony}).should.be.fulfilled;\n\nresult = await keysManager.removeMiningKey(masterOfCeremony);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\n(await poaNetworkConsensusMock.isMasterOfCeremonyRemovedPending.call()).should.be.equal(true);\n(await keysManager.masterOfCeremony.call()).should.be.equal(masterOfCeremony);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\n\n(await poaNetworkConsensusMock.isMasterOfCeremonyRemovedPending.call()).should.be.equal(false);\n(await poaNetworkConsensusMock.isMasterOfCeremonyRemoved.call()).should.be.equal(true);\n(await keysManager.masterOfCeremony.call()).should.be.equal(masterOfCeremony);\n(await poaNetworkConsensusMock.isValidator.call(masterOfCeremony)).should.be.equal(false);\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "0f9378e4-9b06-469e-84b2-02c09c3cac49",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should still enforce removal of votingKey to 0x0 even if voting key did not exist",
                "fullTitle": "Contract: KeysManager [all features] #removeMiningKey should still enforce removal of votingKey to 0x0 even if voting key did not exist",
                "timedOut": false,
                "duration": 306,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let result = await keysManager.removeMiningKey(accounts[1]).should.be.fulfilled;\nresult.logs.length.should.be.equal(0);\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(accounts[1], true);\nresult = await keysManager.removeMiningKey(accounts[1]).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('MiningKeyChanged');\nresult.logs[0].args.key.should.be.equal(accounts[1]);\nresult.logs[0].args.action.should.be.equal('removed');\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\n(await keysManager.getMiningKeyByVoting.call(validator[0])).should.be.equal(\n  '0x0000000000000000000000000000000000000000'\n);\n(await keysManager.miningKeyByPayout.call(validator[1])).should.be.equal(\n  '0x0000000000000000000000000000000000000000'\n);",
                "err": {},
                "isRoot": false,
                "uuid": "2723b480-20b7-4885-8b48-356ec20435d7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9ee3f296-2198-4179-ada2-790ac42a88ae",
              "cfc6e176-1a6c-4a3b-962b-89c04758892f",
              "42fdf42b-ad0c-4c68-a1ff-88b7dc134e90",
              "0f9378e4-9b06-469e-84b2-02c09c3cac49",
              "2723b480-20b7-4885-8b48-356ec20435d7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2537,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "27aaebe2-c61d-4a01-9e87-77171f5adff3",
            "title": "#removeVotingKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called if KeysManager.init had been called before",
                "fullTitle": "Contract: KeysManager [all features] #removeVotingKey may only be called if KeysManager.init had been called before",
                "timedOut": false,
                "duration": 226,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {mining, voting, payout} = {mining: accounts[1], voting: accounts[3], payout: accounts[2]};\nawait addMiningKey(mining, true);\nawait addVotingKey(voting, mining, true);\nawait addPayoutKey(payout, mining, true);\nawait keysManager.setInitEnabled().should.be.fulfilled;\nawait removeVotingKey(mining, false);",
                "err": {},
                "isRoot": false,
                "uuid": "b9733b0c-fc27-471d-a21e-8ba178b35af8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be successful only for active voting key",
                "fullTitle": "Contract: KeysManager [all features] #removeVotingKey should be successful only for active voting key",
                "timedOut": false,
                "duration": 224,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {mining, voting, payout} = {mining: accounts[1], voting: accounts[3], payout: accounts[2]};\nawait addMiningKey(mining, true);\nawait addPayoutKey(payout, mining, true);\nconst result = await keysManager.removeVotingKey(mining).should.be.fulfilled;\nresult.logs.length.should.be.equal(0);\nawait addVotingKey(voting, mining, true);\nconst {logs} = await keysManager.removeVotingKey(mining).should.be.fulfilled;\nlogs[0].event.should.be.equal('VotingKeyChanged');\nlogs[0].args.key.should.be.equal(voting);\nlogs[0].args.miningKey.should.be.equal(mining);\nlogs[0].args.action.should.be.equal('removed');",
                "err": {},
                "isRoot": false,
                "uuid": "23f4125b-4164-4a16-bf46-8f63759a37e1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should remove votingKey",
                "fullTitle": "Contract: KeysManager [all features] #removeVotingKey should remove votingKey",
                "timedOut": false,
                "duration": 341,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {mining, voting, payout} = {mining: accounts[1], voting: accounts[3], payout: accounts[2]};\nawait keysManager.removeVotingKey(mining, {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(mining, true);\nawait addVotingKey(voting, mining, true);\nawait addPayoutKey(payout, mining, true);\nconst {logs} = await keysManager.removeVotingKey(mining).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys.call(mining);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  payout,\n  true,\n  false,\n  true]\n)\nlogs[0].event.should.be.equal('VotingKeyChanged');\nlogs[0].args.key.should.be.equal(voting);\nlogs[0].args.action.should.be.equal('removed');\nconst miningKey = await keysManager.getMiningKeyByVoting.call(voting);\nminingKey.should.be.equal('0x0000000000000000000000000000000000000000');",
                "err": {},
                "isRoot": false,
                "uuid": "d4bbbf84-e3ee-41e8-8690-c397730cc783",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b9733b0c-fc27-471d-a21e-8ba178b35af8",
              "23f4125b-4164-4a16-bf46-8f63759a37e1",
              "d4bbbf84-e3ee-41e8-8690-c397730cc783"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 791,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "f997dfae-6e2a-423c-9e29-af988842b632",
            "title": "#removePayoutKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called if KeysManager.init had been called before",
                "fullTitle": "Contract: KeysManager [all features] #removePayoutKey may only be called if KeysManager.init had been called before",
                "timedOut": false,
                "duration": 213,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addPayoutKey(accounts[2], accounts[1], true);\nawait addVotingKey(accounts[3], accounts[1], true);\nawait keysManager.setInitEnabled().should.be.fulfilled;\nawait removePayoutKey(accounts[1], false);",
                "err": {},
                "isRoot": false,
                "uuid": "264be429-ee80-4693-97ee-8f2915039a25",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be successful only for active payout key",
                "fullTitle": "Contract: KeysManager [all features] #removePayoutKey should be successful only for active payout key",
                "timedOut": false,
                "duration": 241,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[3], accounts[1], true);\nawait removePayoutKey(accounts[1], false);\nawait addPayoutKey(accounts[2], accounts[1], true);\nconst {logs} = await keysManager.removePayoutKey(accounts[1]).should.be.fulfilled;\nlogs[0].event.should.be.equal('PayoutKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.miningKey.should.be.equal(accounts[1]);\nlogs[0].args.action.should.be.equal('removed');",
                "err": {},
                "isRoot": false,
                "uuid": "66dc9189-3e6f-4ac2-a618-d1e147b34c5a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should remove payoutKey",
                "fullTitle": "Contract: KeysManager [all features] #removePayoutKey should remove payoutKey",
                "timedOut": false,
                "duration": 273,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.removePayoutKey(accounts[1], {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(accounts[1], true);\nawait addPayoutKey(accounts[2], accounts[1], true);\nawait addVotingKey(accounts[3], accounts[1], true);\nconst {logs} = await keysManager.removePayoutKey(accounts[1]).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ accounts[3],\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false]\n)\nlogs[0].event.should.be.equal('PayoutKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.action.should.be.equal('removed');\nconst miningKey = await keysManager.miningKeyByPayout.call(accounts[2]);\nminingKey.should.be.equal('0x0000000000000000000000000000000000000000');",
                "err": {},
                "isRoot": false,
                "uuid": "bd2e0011-df0a-4ab7-b580-d5416fe22e47",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "264be429-ee80-4693-97ee-8f2915039a25",
              "66dc9189-3e6f-4ac2-a618-d1e147b34c5a",
              "bd2e0011-df0a-4ab7-b580-d5416fe22e47"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 727,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "e30e29eb-9199-45bd-a27e-eaa5daf08ee6",
            "title": "#swapMiningKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should swap mining key",
                "fullTitle": "Contract: KeysManager [all features] #swapMiningKey should swap mining key",
                "timedOut": false,
                "duration": 679,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.swapMiningKey(accounts[1], accounts[2], {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[5], accounts[1], true);\nconst validatorData = [\n  \"Djamshut\", \"Roosvelt\", \"123asd\", \"Moskva\", \"ZZ\", \"234\", 23423\n];\nawait validatorMetadata.setTime(55555);\nawait validatorMetadata.createMetadata(...validatorData, {from: accounts[5]}).should.be.fulfilled;\nawait swapMiningKey(accounts[2], accounts[1], true);\nawait swapMiningKey(accounts[4], accounts[3], false);\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false\n]);\nconst validatorNew = await keysManager.validatorKeys.call(accounts[2]);\nvalidatorNew.should.be.deep.equal([\n  accounts[5],\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false\n]);\n(await validatorMetadata.validators.call(accounts[2])).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2)\n]);\n(await validatorMetadata.validators.call(accounts[1])).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0)\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "044c1166-0349-4b50-8fe7-fda82f103f55",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should swap MoC",
                "fullTitle": "Contract: KeysManager [all features] #swapMiningKey should swap MoC",
                "timedOut": false,
                "duration": 355,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await keysManager.masterOfCeremony.call()).should.be.equal(masterOfCeremony);\n(await poaNetworkConsensusMock.masterOfCeremony.call()).should.be.equal(masterOfCeremony);\nawait swapMiningKey(accounts[1], masterOfCeremony, true);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\n(await keysManager.masterOfCeremony.call()).should.be.equal(accounts[1]);\n(await poaNetworkConsensusMock.masterOfCeremony.call()).should.be.equal(accounts[1]);\n(await poaNetworkConsensusMock.isValidator.call(masterOfCeremony)).should.be.equal(false);\n(await poaNetworkConsensusMock.isValidator.call(accounts[1])).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "43a8aa26-3d86-4578-8123-d0f6b3a5d1a1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should keep voting and payout keys",
                "fullTitle": "Contract: KeysManager [all features] #swapMiningKey should keep voting and payout keys",
                "timedOut": false,
                "duration": 553,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const oldMining = accounts[1];\nconst voting = accounts[2];\nconst payout = accounts[3];\nconst newMining = accounts[4];\nawait addMiningKey(oldMining, true);\nawait addVotingKey(voting, oldMining, true);\nawait addPayoutKey(payout, oldMining, true);\nconst {logs} = await keysManager.swapMiningKey(newMining, oldMining).should.be.fulfilled;\n//const mining = await keysManager.getMiningKeyByVoting.call(voting);\nconst validator = await keysManager.validatorKeys.call(oldMining);\nnewMining.should.be.equal(await keysManager.getMiningKeyByVoting.call(voting));\nnewMining.should.be.equal(await keysManager.miningKeyByPayout.call(payout));\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false ]\n)\nconst validatorNew = await keysManager.validatorKeys.call(newMining);\nvalidatorNew.should.be.deep.equal(\n  [ voting,\n  payout,\n  true,\n  true,\n  true]\n)\noldMining.should.be.equal(await keysManager.getMiningKeyHistory.call(newMining));\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators.call();\nvalidators.should.not.contain(oldMining);\nvalidators.should.contain(newMining);",
                "err": {},
                "isRoot": false,
                "uuid": "6bd87f11-b182-49fc-8ca8-19ccbec9ba4f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "044c1166-0349-4b50-8fe7-fda82f103f55",
              "43a8aa26-3d86-4578-8123-d0f6b3a5d1a1",
              "6bd87f11-b182-49fc-8ca8-19ccbec9ba4f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1587,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "c66a4733-a24e-43ee-ac1e-219dd47ac76a",
            "title": "#swapVotingKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should swap voting key",
                "fullTitle": "Contract: KeysManager [all features] #swapVotingKey should swap voting key",
                "timedOut": false,
                "duration": 215,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.swapVotingKey(accounts[1], accounts[2], {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[2], accounts[1], true);\nawait swapVotingKey(accounts[3], accounts[1], true);\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ accounts[3],\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "05fbfeb7-4f64-4eb4-a087-1d6e5a516a0b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "05fbfeb7-4f64-4eb4-a087-1d6e5a516a0b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 215,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "3c693af0-cd48-4d30-b1dc-b43dcfcdf855",
            "title": "#swapPayoutKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should swap payout key",
                "fullTitle": "Contract: KeysManager [all features] #swapPayoutKey should swap payout key",
                "timedOut": false,
                "duration": 244,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.swapPayoutKey(accounts[1], accounts[2], {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(accounts[1], true);\nawait addPayoutKey(accounts[2], accounts[1], true);\nconst {logs} = await keysManager.swapPayoutKey(accounts[3], accounts[1]);\nlogs[0].event.should.be.equal(\"PayoutKeyChanged\");\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  accounts[3],\n  true,\n  false,\n  true]\n);\n(await keysManager.miningKeyByPayout.call(accounts[2])).should.be.equal(\n  '0x0000000000000000000000000000000000000000'\n);\n(await keysManager.miningKeyByPayout.call(accounts[3])).should.be.equal(\n  accounts[1]\n);",
                "err": {},
                "isRoot": false,
                "uuid": "37a6be2c-dcc6-4788-8600-691b9f665869",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "37a6be2c-dcc6-4788-8600-691b9f665869"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 244,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "6dbbb98a-f34d-45c1-a4a5-c7b91539d34d",
            "title": "#migrateInitialKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "can copy initial keys",
                "fullTitle": "Contract: KeysManager [all features] #migrateInitialKey can copy initial keys",
                "timedOut": false,
                "duration": 472,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1]);\n\nlet newKeysManager = await KeysManagerMock.new();\nconst newKeysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, newKeysManager.address);\nnewKeysManager = await KeysManagerMock.at(newKeysManagerEternalStorage.address);\nawait newKeysManager.init(keysManager.address).should.be.fulfilled;\n\nkeysManager.address.should.be.equal(\n  await newKeysManager.previousKeysManager.call()\n);\nlet initialKeys = await newKeysManager.initialKeysCount.call();\ninitialKeys.should.be.bignumber.equal(1);\n\nawait newKeysManager.migrateInitialKey(\n  accounts[1],\n  {from: accounts[9]}\n).should.be.rejectedWith(ERROR_MSG);\nawait newKeysManager.migrateInitialKey(\n  '0x0000000000000000000000000000000000000000'\n).should.be.rejectedWith(ERROR_MSG);\nlet {logs} = await newKeysManager.migrateInitialKey(accounts[1]).should.be.fulfilled;\nlogs[0].event.should.equal(\"Migrated\");\nlogs[0].args.key.should.be.equal(accounts[1]);\nlogs[0].args.name.should.be.equal(\"initialKey\");\nawait newKeysManager.migrateInitialKey(accounts[1]).should.be.rejectedWith(ERROR_MSG);\nnew web3.BigNumber(1).should.be.bignumber.equal(\n  await newKeysManager.getInitialKeyStatus.call(accounts[1])\n)\nawait newKeysManager.migrateInitialKey(accounts[2]).should.be.rejectedWith(ERROR_MSG);\nnew web3.BigNumber(0).should.be.bignumber.equal(\n  await newKeysManager.getInitialKeyStatus.call(accounts[2])\n)",
                "err": {},
                "isRoot": false,
                "uuid": "761656de-7a41-45cd-a650-c95b31974493",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "761656de-7a41-45cd-a650-c95b31974493"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 472,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "7e700561-3b3a-430f-aeef-04d2c662b4c7",
            "title": "#migrateMiningKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "copies validator keys",
                "fullTitle": "Contract: KeysManager [all features] #migrateMiningKey copies validator keys",
                "timedOut": false,
                "duration": 1112,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const miningKey = accounts[2];\nconst votingKey = accounts[3];\nconst payoutKey = accounts[4];\nconst miningKey2 = accounts[5];\nconst miningKey3 = accounts[6];\n\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKey2, true);\nawait swapMiningKey(miningKey3, miningKey2, true);\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(miningKey, votingKey, payoutKey, {from: accounts[1]}).should.be.fulfilled;\n\nconst validatorKeyFromOld = await keysManager.validatorKeys.call(miningKey);\nvalidatorKeyFromOld.should.be.deep.equal([\n  votingKey,\n  payoutKey,\n  true,\n  true,\n  true\n]);\n\nlet newKeysManager = await KeysManagerMock.new();\nconst newKeysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, newKeysManager.address);\nnewKeysManager = await KeysManagerMock.at(newKeysManagerEternalStorage.address);\nawait newKeysManager.init(keysManager.address).should.be.fulfilled;\n\n// mining #1\nawait newKeysManager.migrateMiningKey(\n  '0x0000000000000000000000000000000000000000'\n).should.be.rejectedWith(ERROR_MSG);\nawait newKeysManager.migrateMiningKey(accounts[9]).should.be.rejectedWith(ERROR_MSG);\nlet {logs} = await newKeysManager.migrateMiningKey(miningKey).should.be.fulfilled;\nlogs[0].event.should.equal(\"Migrated\");\nlogs[0].args.key.should.be.equal(miningKey);\nlogs[0].args.name.should.be.equal(\"miningKey\");\nawait newKeysManager.migrateMiningKey(miningKey).should.be.rejectedWith(ERROR_MSG);\nlet initialKeys = await newKeysManager.initialKeysCount.call();\ninitialKeys.should.be.bignumber.equal(1);\nconst validatorKey = await newKeysManager.validatorKeys.call(miningKey);\nvalidatorKey.should.be.deep.equal([\n  votingKey,\n  payoutKey,\n  true,\n  true,\n  true\n]);\ntrue.should.be.equal(\n  await newKeysManager.successfulValidatorClone.call(miningKey)\n);\nminingKey.should.be.equal(\n  await newKeysManager.getMiningKeyByVoting.call(votingKey)\n);\nminingKey.should.be.equal(\n  await newKeysManager.miningKeyByPayout.call(payoutKey)\n);\ntrue.should.be.equal(\n  await newKeysManager.isMiningActive.call(miningKey)\n)\ntrue.should.be.equal(\n  await newKeysManager.isVotingActive.call(votingKey)\n)\ntrue.should.be.equal(\n  await newKeysManager.isPayoutActive.call(miningKey)\n)\n// mining #2\nawait newKeysManager.migrateMiningKey(miningKey3).should.be.fulfilled;\nconst validatorKey2 = await newKeysManager.validatorKeys.call(miningKey3);\nvalidatorKey2.should.be.deep.equal([\n  \"0x0000000000000000000000000000000000000000\",\n  \"0x0000000000000000000000000000000000000000\",\n  true,\n  false,\n  false\n]);\ntrue.should.be.equal(\n  await newKeysManager.isMiningActive.call(miningKey3)\n);\ntrue.should.be.equal(\n  await newKeysManager.successfulValidatorClone.call(miningKey3)\n);\n(await keysManager.getMiningKeyHistory.call(miningKey3)).should.be.equal(\n  miningKey2\n);\n(await newKeysManager.getMiningKeyHistory.call(miningKey3)).should.be.equal(\n  miningKey2\n);",
                "err": {},
                "isRoot": false,
                "uuid": "ae2edf64-c49d-4840-861e-717f6588da82",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "throws when trying to copy invalid mining key",
                "fullTitle": "Contract: KeysManager [all features] #migrateMiningKey throws when trying to copy invalid mining key",
                "timedOut": false,
                "duration": 228,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newKeysManager = await KeysManagerMock.new();\nconst newKeysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, newKeysManager.address);\nnewKeysManager = await KeysManagerMock.at(newKeysManagerEternalStorage.address);\nawait newKeysManager.init(keysManager.address).should.be.fulfilled;\n\ntrue.should.be.equal(\n  await newKeysManager.successfulValidatorClone.call(masterOfCeremony)\n);\nawait newKeysManager.migrateMiningKey(masterOfCeremony).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "60f3db34-74bf-4aa8-baae-e4461e6b7f1d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ae2edf64-c49d-4840-861e-717f6588da82",
              "60f3db34-74bf-4aa8-baae-e4461e6b7f1d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1340,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "9874326f-1ed5-4709-897b-8dde15eff105",
            "title": "#upgradeTo",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: KeysManager [all features] #upgradeTo \"before each\" hook",
                "timedOut": false,
                "duration": 182,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "proxyStorageStubAddress = accounts[8];\nkeysManager = await KeysManagerMock.new();\nkeysManagerOldImplementation = keysManager.address;\nkeysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, keysManager.address);\nkeysManager = await KeysManagerMock.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\nawait keysManager.setProxyStorage(proxyStorageStubAddress);",
                "err": {},
                "isRoot": false,
                "uuid": "97e956df-8aaa-4b96-a432-24d80e716ccb",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by ProxyStorage",
                "fullTitle": "Contract: KeysManager [all features] #upgradeTo may only be called by ProxyStorage",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let keysManagerNew = await KeysManagerNew.new();\nawait keysManagerEternalStorage.upgradeTo(keysManagerNew.address, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);\nawait upgradeTo(keysManagerNew.address, {from: proxyStorageStubAddress});",
                "err": {},
                "isRoot": false,
                "uuid": "f52c7194-f1ac-4596-b250-2688528b8a2a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change implementation address",
                "fullTitle": "Contract: KeysManager [all features] #upgradeTo should change implementation address",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let keysManagerNew = await KeysManagerNew.new();\nlet newImplementation = keysManagerNew.address;\n(await keysManagerEternalStorage.implementation.call()).should.be.equal(keysManagerOldImplementation);\nawait upgradeTo(newImplementation, {from: proxyStorageStubAddress});\n(await keysManagerEternalStorage.implementation.call()).should.be.equal(newImplementation);",
                "err": {},
                "isRoot": false,
                "uuid": "f9d45a4d-878d-4d27-9af1-c74c089286c8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment implementation version",
                "fullTitle": "Contract: KeysManager [all features] #upgradeTo should increment implementation version",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let keysManagerNew = await KeysManagerNew.new();\nlet oldVersion = await keysManagerEternalStorage.version.call();\nlet newVersion = oldVersion.add(1);\nawait upgradeTo(keysManagerNew.address, {from: proxyStorageStubAddress});\n(await keysManagerEternalStorage.version.call()).should.be.bignumber.equal(newVersion);",
                "err": {},
                "isRoot": false,
                "uuid": "1e076a5e-6b3b-4021-b5dd-cbee40da1a2d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should work",
                "fullTitle": "Contract: KeysManager [all features] #upgradeTo new implementation should work",
                "timedOut": false,
                "duration": 123,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let keysManagerNew = await KeysManagerNew.new();\nawait upgradeTo(keysManagerNew.address, {from: proxyStorageStubAddress});\nkeysManagerNew = await KeysManagerNew.at(keysManagerEternalStorage.address);\n(await keysManagerNew.initialized.call()).should.be.equal(false);\nawait keysManagerNew.initialize();\n(await keysManagerNew.initialized.call()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "ede88e61-58ac-4d62-8435-feb3a486a2e0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same proxyStorage address",
                "fullTitle": "Contract: KeysManager [all features] #upgradeTo new implementation should use the same proxyStorage address",
                "timedOut": false,
                "duration": 94,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let keysManagerNew = await KeysManagerNew.new();\nawait upgradeTo(keysManagerNew.address, {from: proxyStorageStubAddress});\nkeysManagerNew = await KeysManagerNew.at(keysManagerEternalStorage.address);\n(await keysManagerNew.proxyStorage.call()).should.be.equal(proxyStorageStubAddress);",
                "err": {},
                "isRoot": false,
                "uuid": "e9fcb45a-6547-478e-a17c-88279fd7f6a4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same storage",
                "fullTitle": "Contract: KeysManager [all features] #upgradeTo new implementation should use the same storage",
                "timedOut": false,
                "duration": 312,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let keys = await keysManager.validatorKeys.call(accounts[2]);\nkeys.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false\n]);\nawait keysManager.setProxyStorage(proxyStorageMock.address);\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait proxyStorageMock.setKeysManagerMock(keysManager.address);\nawait keysManager.createKeys(accounts[2], accounts[3], accounts[4], {from: accounts[1]}).should.be.fulfilled;\nlet keysManagerNew = await KeysManagerNew.new();\nawait keysManager.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(keysManagerNew.address, {from: proxyStorageStubAddress});\nkeysManagerNew = await KeysManagerNew.at(keysManagerEternalStorage.address);\nkeys = await keysManagerNew.validatorKeys.call(accounts[2]);\nkeys.should.be.deep.equal([accounts[3], accounts[4], true, true, true]);",
                "err": {},
                "isRoot": false,
                "uuid": "4d637597-4eb2-40dc-95de-cb1591eb7e50",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f52c7194-f1ac-4596-b250-2688528b8a2a",
              "f9d45a4d-878d-4d27-9af1-c74c089286c8",
              "1e076a5e-6b3b-4021-b5dd-cbee40da1a2d",
              "ede88e61-58ac-4d62-8435-feb3a486a2e0",
              "e9fcb45a-6547-478e-a17c-88279fd7f6a4",
              "4d637597-4eb2-40dc-95de-cb1591eb7e50"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 801,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "e16f51de-4835-4644-943f-b4c69b911c9c",
        "title": "Contract: KeysManager upgraded [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
        "file": "/test/keys_manager_upgrade_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: KeysManager upgraded [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 2982,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "155a6c18-04cc-4b23-85a3-a0dbf4a8527b",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: KeysManager upgraded [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "9747e3b1-b3ea-42d8-ada7-2e8fdcde43f4",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: KeysManager upgraded [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 704,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "masterOfCeremony = accounts[0];\npoaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony, []);\n\nproxyStorageMock = await ProxyStorageMock.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorageMock.address);\nproxyStorageMock = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorageMock.init(poaNetworkConsensusMock.address).should.be.fulfilled;\n\nkeysManager = await KeysManagerMock.new();\nkeysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, keysManager.address);\nkeysManager = await KeysManagerMock.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\",\n  {from: accounts[1]}\n).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\nlet ballotsStorage = await BallotsStorage.new();\nlet ballotsEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, ballotsStorage.address);\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\nvalidatorMetadata = await ValidatorMetadata.new();\nlet validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, validatorMetadata.address);\nvalidatorMetadata = ValidatorMetadata.at(validatorMetadataEternalStorage.address);\nlet keysManagerNew = await KeysManagerNew.new();\nawait keysManagerEternalStorage.setProxyStorage(accounts[6]);\nconst {logs} = await keysManagerEternalStorage.upgradeTo(keysManagerNew.address, {from: accounts[6]});\nlogs[0].event.should.be.equal(\"Upgraded\");\nawait keysManagerEternalStorage.setProxyStorage(proxyStorageMock.address);\nkeysManager = await KeysManagerNew.at(keysManagerEternalStorage.address);\n\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\nawait proxyStorageMock.initializeAddresses(\n  keysManager.address,\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  ballotsStorage.address,\n  validatorMetadata.address,\n  accounts[0]\n);",
            "err": {},
            "isRoot": false,
            "uuid": "13907a5e-e973-49a1-9fb5-a5c3d8a518e6",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: KeysManager upgraded [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "59c16d5d-c797-4824-aac1-925fc7bf52a8",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "285c5686-2669-4405-a428-c0a2cc5e6883",
            "title": "#constructor",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "sets masterOfCeremony, proxyStorage, poaConsensus",
                "fullTitle": "Contract: KeysManager upgraded [all features] #constructor sets masterOfCeremony, proxyStorage, poaConsensus",
                "timedOut": false,
                "duration": 58,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "masterOfCeremony.should.be.equal(await keysManager.masterOfCeremony.call());\nproxyStorageMock.address.should.be.equal(await keysManager.proxyStorage.call());\npoaNetworkConsensusMock.address.should.be.equal(await keysManager.poaNetworkConsensus.call());",
                "err": {},
                "isRoot": false,
                "uuid": "e0c88f0a-9732-4658-9f6d-9bf2f154af2e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "adds masterOfCeremony to validators hash",
                "fullTitle": "Contract: KeysManager upgraded [all features] #constructor adds masterOfCeremony to validators hash",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const validator = await keysManager.validatorKeys.call(masterOfCeremony);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "b0702dc8-1b4b-4844-a457-dc184130debb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be called twice",
                "fullTitle": "Contract: KeysManager upgraded [all features] #constructor cannot be called twice",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.init(\n  '0x0000000000000000000000000000000000000000'\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "b0794324-cccb-4b28-a902-1966c3f8204e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e0c88f0a-9732-4658-9f6d-9bf2f154af2e",
              "b0702dc8-1b4b-4844-a457-dc184130debb",
              "b0794324-cccb-4b28-a902-1966c3f8204e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 108,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "628f3906-0870-4a42-8f44-4d502c945282",
            "title": "#initiateKeys",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "can only be called by master of ceremony",
                "fullTitle": "Contract: KeysManager upgraded [all features] #initiateKeys can only be called by master of ceremony",
                "timedOut": false,
                "duration": 76,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "650ffa8e-0084-4b80-8341-a40f1c88114d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot allow 0x0 addresses",
                "fullTitle": "Contract: KeysManager upgraded [all features] #initiateKeys cannot allow 0x0 addresses",
                "timedOut": false,
                "duration": 53,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys('0x0000000000000000000000000000000000000000').should.be.rejectedWith(ERROR_MSG);\nawait keysManager.initiateKeys('0x0').should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "c0fe9cce-a8db-4c2f-a4a5-2e974a94993b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow to initialize already initialized key",
                "fullTitle": "Contract: KeysManager upgraded [all features] #initiateKeys should not allow to initialize already initialized key",
                "timedOut": false,
                "duration": 72,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "f2117bcb-c2da-420e-9073-ba666597bdd5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow to initialize already initialized key after validator created mining key",
                "fullTitle": "Contract: KeysManager upgraded [all features] #initiateKeys should not allow to initialize already initialized key after validator created mining key",
                "timedOut": false,
                "duration": 170,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.fulfilled;   \nawait keysManager.createKeys(accounts[3],accounts[4],accounts[5], {from: accounts[2]}).should.be.fulfilled;\nawait keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "51e3e293-edfd-47f2-a8da-5169a2406462",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not equal to master of ceremony",
                "fullTitle": "Contract: KeysManager upgraded [all features] #initiateKeys should not equal to master of ceremony",
                "timedOut": false,
                "duration": 39,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(masterOfCeremony, {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "97b196ea-f52c-4754-880c-32a9aaef1896",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow to initialize more than maxNumberOfInitialKeys",
                "fullTitle": "Contract: KeysManager upgraded [all features] #initiateKeys should not allow to initialize more than maxNumberOfInitialKeys",
                "timedOut": false,
                "duration": 578,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let maxNumberOfInitialKeys = await keysManager.maxNumberOfInitialKeys.call();\nmaxNumberOfInitialKeys.should.be.bignumber.equal(12);\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000001', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000002', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000003', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000004', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000005', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000006', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000007', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000008', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000009', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000010', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000011', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000012', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000013', {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "6b563301-df86-4437-874d-aa450bf7f800",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment initialKeyCount by 1",
                "fullTitle": "Contract: KeysManager upgraded [all features] #initiateKeys should increment initialKeyCount by 1",
                "timedOut": false,
                "duration": 100,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let initialKeysCount = await keysManager.initialKeysCount.call();\ninitialKeysCount.should.be.bignumber.equal(0);\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\ninitialKeysCount = await keysManager.initialKeysCount.call();\ninitialKeysCount.should.be.bignumber.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "b9f867c6-e4f5-44e6-a5c8-e24e28ce298e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set initialKeys hash to activated status",
                "fullTitle": "Contract: KeysManager upgraded [all features] #initiateKeys should set initialKeys hash to activated status",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new web3.BigNumber(0).should.be.bignumber.equal(await keysManager.getInitialKeyStatus.call(accounts[1]));\nconst {logs} = await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nnew web3.BigNumber(1).should.be.bignumber.equal(await keysManager.getInitialKeyStatus.call(accounts[1]));\nlet initialKeysCount = await keysManager.initialKeysCount.call();\n// event InitialKeyCreated(address indexed initialKey, uint256 time, uint256 initialKeysCount);\nlogs[0].event.should.equal(\"InitialKeyCreated\");\nlogs[0].args.initialKey.should.be.equal(accounts[1]);\ninitialKeysCount.should.be.bignumber.equal(logs[0].args.initialKeysCount);",
                "err": {},
                "isRoot": false,
                "uuid": "67aa8ed6-e1e0-4bc7-b784-961e47e8c859",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "650ffa8e-0084-4b80-8341-a40f1c88114d",
              "c0fe9cce-a8db-4c2f-a4a5-2e974a94993b",
              "f2117bcb-c2da-420e-9073-ba666597bdd5",
              "51e3e293-edfd-47f2-a8da-5169a2406462",
              "97b196ea-f52c-4754-880c-32a9aaef1896",
              "6b563301-df86-4437-874d-aa450bf7f800",
              "b9f867c6-e4f5-44e6-a5c8-e24e28ce298e",
              "67aa8ed6-e1e0-4bc7-b784-961e47e8c859"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1179,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "8dd8ac90-82c3-4361-ac38-e83ae387a706",
            "title": "#createKeys",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should only be called from initialized key",
                "fullTitle": "Contract: KeysManager upgraded [all features] #createKeys should only be called from initialized key",
                "timedOut": false,
                "duration": 155,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.createKeys(accounts[2], accounts[3], accounts[4], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(accounts[2], accounts[3], accounts[4], {from: accounts[1]}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "5620eb21-d0ec-4cf5-8587-06bd5ad5bec4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "params should not be equal to 0x0",
                "fullTitle": "Contract: KeysManager upgraded [all features] #createKeys params should not be equal to 0x0",
                "timedOut": false,
                "duration": 305,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(\n  '0x0000000000000000000000000000000000000000',\n  accounts[3],\n  accounts[4],\n  {from: accounts[1]}\n).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(\n  accounts[2],\n  '0x0000000000000000000000000000000000000000',\n  accounts[4],\n  {from: accounts[1]}\n).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(\n  accounts[2],\n  accounts[3],\n  '0x0000000000000000000000000000000000000000',\n  {from: accounts[1]}\n).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(\n  accounts[2],\n  accounts[3],\n  accounts[4],\n  {from: accounts[1]}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "b9c5a0e0-1a0d-4e73-9133-4200547260e4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "params should not be equal to each other",
                "fullTitle": "Contract: KeysManager upgraded [all features] #createKeys params should not be equal to each other",
                "timedOut": false,
                "duration": 142,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(masterOfCeremony, masterOfCeremony, accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(masterOfCeremony, accounts[2], accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(masterOfCeremony, accounts[2], masterOfCeremony, {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "085b4e84-37ae-4eeb-bd0c-89f7ae67f162",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "any of params should not be equal to initialKey",
                "fullTitle": "Contract: KeysManager upgraded [all features] #createKeys any of params should not be equal to initialKey",
                "timedOut": false,
                "duration": 147,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(accounts[1], masterOfCeremony, accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(masterOfCeremony, accounts[1], accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(masterOfCeremony, accounts[2], accounts[1], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "03ff1fb9-a09b-4f1e-bd36-e7104835ebe8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow passing the same key after it is already created",
                "fullTitle": "Contract: KeysManager upgraded [all features] #createKeys should not allow passing the same key after it is already created",
                "timedOut": false,
                "duration": 474,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(accounts[4], accounts[3], accounts[2], {from: accounts[1]}).should.be.fulfilled;\nawait keysManager.initiateKeys(accounts[5], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(accounts[8], accounts[7], accounts[2], {from: accounts[5]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(accounts[8], accounts[3], accounts[6], {from: accounts[5]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(accounts[4], accounts[7], accounts[6], {from: accounts[5]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(accounts[8], accounts[7], accounts[6], {from: accounts[5]}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "127fb876-82ae-4fe8-afca-3d8bf3cdd3fa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assign mining, voting, payout keys to relative mappings",
                "fullTitle": "Contract: KeysManager upgraded [all features] #createKeys should assign mining, voting, payout keys to relative mappings",
                "timedOut": false,
                "duration": 177,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nconst {logs} = await keysManager.createKeys(accounts[4], accounts[3], accounts[2], {from: accounts[1]}).should.be.fulfilled;\ntrue.should.be.equal(\n  await keysManager.isMiningActive.call(accounts[4])\n)\ntrue.should.be.equal(\n  await keysManager.isVotingActive.call(accounts[3])\n)\ntrue.should.be.equal(\n  await keysManager.isPayoutActive.call(accounts[4])\n)\n// event ValidatorInitialized(address indexed miningKey, address indexed votingKey, address indexed payoutKey);\nlogs[0].event.should.be.equal('ValidatorInitialized');\nlogs[0].args.miningKey.should.be.equal(accounts[4]);\nlogs[0].args.votingKey.should.be.equal(accounts[3]);\nlogs[0].args.payoutKey.should.be.equal(accounts[2]);",
                "err": {},
                "isRoot": false,
                "uuid": "10e39a61-a02f-4893-bffb-26ac66332fbc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assign voting <-> mining key and payout <-> mining key relationships",
                "fullTitle": "Contract: KeysManager upgraded [all features] #createKeys should assign voting <-> mining key and payout <-> mining key relationships",
                "timedOut": false,
                "duration": 169,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(accounts[4], accounts[3], accounts[2], {from: accounts[1]});\naccounts[4].should.be.equal(\n  await keysManager.getMiningKeyByVoting.call(accounts[3])\n);\naccounts[4].should.be.equal(\n  await keysManager.miningKeyByPayout.call(accounts[2])\n);",
                "err": {},
                "isRoot": false,
                "uuid": "9a247860-e903-44d9-91da-35bdc64fc2ff",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "adds validator to poaConsensus contract",
                "fullTitle": "Contract: KeysManager upgraded [all features] #createKeys adds validator to poaConsensus contract",
                "timedOut": false,
                "duration": 160,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[4];\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(miningKey, accounts[3], accounts[2], {from: accounts[1]});\nconst index = await poaNetworkConsensusMock.getCurrentValidatorsLength.call();\n(await poaNetworkConsensusMock.pendingList.call(index)).should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "24075985-26dd-45e8-8a07-ba68a529ee54",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set validatorKeys hash",
                "fullTitle": "Contract: KeysManager upgraded [all features] #createKeys should set validatorKeys hash",
                "timedOut": false,
                "duration": 257,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[4];\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(miningKey, accounts[3], accounts[2], {from: accounts[1]});\nconst validatorKey = await keysManager.validatorKeys.call(miningKey);\nvalidatorKey.should.be.deep.equal([\n  accounts[3],\n  accounts[2],\n  true,\n  true,\n  true\n])",
                "err": {},
                "isRoot": false,
                "uuid": "7b8e0549-2d01-46e2-973a-7c7729f47cf4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set validatorKeys hash",
                "fullTitle": "Contract: KeysManager upgraded [all features] #createKeys should set validatorKeys hash",
                "timedOut": false,
                "duration": 151,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[4];\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(miningKey, accounts[3], accounts[2], {from: accounts[1]});\nnew web3.BigNumber(2).should.be.bignumber.equal(await keysManager.getInitialKeyStatus.call(accounts[1]));",
                "err": {},
                "isRoot": false,
                "uuid": "9773051d-5c47-4ccb-89b9-cd118fcc6391",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5620eb21-d0ec-4cf5-8587-06bd5ad5bec4",
              "b9c5a0e0-1a0d-4e73-9133-4200547260e4",
              "085b4e84-37ae-4eeb-bd0c-89f7ae67f162",
              "03ff1fb9-a09b-4f1e-bd36-e7104835ebe8",
              "127fb876-82ae-4fe8-afca-3d8bf3cdd3fa",
              "10e39a61-a02f-4893-bffb-26ac66332fbc",
              "9a247860-e903-44d9-91da-35bdc64fc2ff",
              "24075985-26dd-45e8-8a07-ba68a529ee54",
              "7b8e0549-2d01-46e2-973a-7c7729f47cf4",
              "9773051d-5c47-4ccb-89b9-cd118fcc6391"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2137,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "3b33121a-dd24-477b-9570-5dbaf9793699",
            "title": "#addMiningKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called if KeysManager.init had been called before",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addMiningKey may only be called if KeysManager.init had been called before",
                "timedOut": false,
                "duration": 81,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.setInitEnabled().should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(accounts[2]);\nawait addMiningKey(accounts[1], false, {from: accounts[2]});",
                "err": {},
                "isRoot": false,
                "uuid": "4c34e5cd-cb1b-4129-a7f3-de4b7101f531",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should only be called from votingToChangeKeys",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addMiningKey should only be called from votingToChangeKeys",
                "timedOut": false,
                "duration": 131,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.addMiningKey(accounts[1],{from: accounts[5]}).should.be.rejectedWith(ERROR_MSG);\nawait proxyStorageMock.setVotingContractMock(accounts[2]);\nawait addMiningKey(accounts[1], true, {from: accounts[2]});",
                "err": {},
                "isRoot": false,
                "uuid": "80669fc3-3d5e-4d18-94f1-1424b80d56e9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let add more than maxLimit",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addMiningKey should not let add more than maxLimit",
                "timedOut": false,
                "duration": 61,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensusMock.setCurrentValidatorsLength(2001);\nawait addMiningKey(accounts[2], false);",
                "err": {},
                "isRoot": false,
                "uuid": "7c918063-cf2e-4802-afab-1f35a7d19dd1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set validatorKeys hash",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addMiningKey should set validatorKeys hash",
                "timedOut": false,
                "duration": 93,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await keysManager.addMiningKey(accounts[2]).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys.call(accounts[2]);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false]\n)\nlogs[0].event.should.be.equal('MiningKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.action.should.be.equal('added');",
                "err": {},
                "isRoot": false,
                "uuid": "56c9593a-25c1-468d-b05c-8f6f4ef571dd",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4c34e5cd-cb1b-4129-a7f3-de4b7101f531",
              "80669fc3-3d5e-4d18-94f1-1424b80d56e9",
              "7c918063-cf2e-4802-afab-1f35a7d19dd1",
              "56c9593a-25c1-468d-b05c-8f6f4ef571dd"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 366,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "e92176ef-eb81-45a0-99ff-d650edbbcb74",
            "title": "#addVotingKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called if KeysManager.init had been called before",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addVotingKey may only be called if KeysManager.init had been called before",
                "timedOut": false,
                "duration": 132,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait keysManager.setInitEnabled().should.be.fulfilled;\nawait addVotingKey(accounts[2], accounts[1], false);",
                "err": {},
                "isRoot": false,
                "uuid": "370fedb6-9263-45b1-bbd1-8f4336bad6ad",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "may only be called if params are not the same",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addVotingKey may only be called if params are not the same",
                "timedOut": false,
                "duration": 152,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[1], accounts[1], false);\nawait addVotingKey(accounts[2], accounts[1], true);",
                "err": {},
                "isRoot": false,
                "uuid": "a0ab3aa3-dad7-4f44-a06d-691e998bcc8f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should add VotingKey",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addVotingKey should add VotingKey",
                "timedOut": false,
                "duration": 166,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.addVotingKey(accounts[2], accounts[1], {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(accounts[1], true);\nconst {logs} = await keysManager.addVotingKey(accounts[2], accounts[1]).should.be.fulfilled;\ntrue.should.be.equal(await keysManager.isVotingActive.call(accounts[2]));\nlogs[0].event.should.be.equal('VotingKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.miningKey.should.be.equal(accounts[1]);\nlogs[0].args.action.should.be.equal('added');\nconst miningKey = await keysManager.getMiningKeyByVoting.call(accounts[2]);\nminingKey.should.be.equal(accounts[1]);",
                "err": {},
                "isRoot": false,
                "uuid": "5fb09730-f45b-4dc6-bcda-35853b801bb0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should only be called if mining is active",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addVotingKey should only be called if mining is active",
                "timedOut": false,
                "duration": 231,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nconst {logs} = await keysManager.removeMiningKey(accounts[1]);\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nawait addVotingKey(accounts[2], accounts[1], false);",
                "err": {},
                "isRoot": false,
                "uuid": "7ebb3e24-3b3a-4eef-8241-ecbe7a1d7ba0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "swaps keys if voting already exists",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addVotingKey swaps keys if voting already exists",
                "timedOut": false,
                "duration": 233,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[2], accounts[1], true);\nawait addVotingKey(accounts[3], accounts[1], true);\nfalse.should.be.equal(await keysManager.isVotingActive.call(accounts[2]));\ntrue.should.be.equal(await keysManager.isVotingActive.call(accounts[3]));\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ accounts[3],\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "82e51ae6-1db3-47a2-84c7-0c7bb74a4eda",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "370fedb6-9263-45b1-bbd1-8f4336bad6ad",
              "a0ab3aa3-dad7-4f44-a06d-691e998bcc8f",
              "5fb09730-f45b-4dc6-bcda-35853b801bb0",
              "7ebb3e24-3b3a-4eef-8241-ecbe7a1d7ba0",
              "82e51ae6-1db3-47a2-84c7-0c7bb74a4eda"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 914,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "795e6677-9d47-44d2-8bd3-42ee5144c7cf",
            "title": "#addPayoutKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called if KeysManager.init had been called before",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addPayoutKey may only be called if KeysManager.init had been called before",
                "timedOut": false,
                "duration": 120,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait keysManager.setInitEnabled().should.be.fulfilled;\nawait addPayoutKey(accounts[2], accounts[1], false);",
                "err": {},
                "isRoot": false,
                "uuid": "fec655d0-999e-44e2-bb69-a244ebfab6d6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "may only be called if params are not the same",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addPayoutKey may only be called if params are not the same",
                "timedOut": false,
                "duration": 150,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addPayoutKey(accounts[1], accounts[1], false);\nawait addPayoutKey(accounts[2], accounts[1], true);",
                "err": {},
                "isRoot": false,
                "uuid": "d2ee4547-a6c9-45da-8d31-4e4b47aef384",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should add PayoutKey",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addPayoutKey should add PayoutKey",
                "timedOut": false,
                "duration": 158,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addPayoutKey(accounts[2], accounts[1], false);\nawait addMiningKey(accounts[1], true);\nconst {logs} = await keysManager.addPayoutKey(accounts[2], accounts[1]).should.be.fulfilled;\nlogs[0].event.should.be.equal('PayoutKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.miningKey.should.be.equal(accounts[1]);\nlogs[0].args.action.should.be.equal('added');\n(await keysManager.miningKeyByPayout.call(accounts[2])).should.be.equal(\n  accounts[1]\n);",
                "err": {},
                "isRoot": false,
                "uuid": "a3bc6e36-bcd7-48e6-8fd4-57a2e6fd5a7f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should only be called if mining is active",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addPayoutKey should only be called if mining is active",
                "timedOut": false,
                "duration": 240,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nconst {logs} = await keysManager.removeMiningKey(accounts[1]);\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nawait addPayoutKey(accounts[2], accounts[1], false);",
                "err": {},
                "isRoot": false,
                "uuid": "82197bde-3fe1-4c83-bac3-1af7ce380cbf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "swaps keys if voting already exists",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addPayoutKey swaps keys if voting already exists",
                "timedOut": false,
                "duration": 236,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addPayoutKey(accounts[2], accounts[1], true);\nawait addPayoutKey(accounts[3], accounts[1], true);\ntrue.should.be.equal(await keysManager.isPayoutActive.call(accounts[1]));\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  accounts[3],\n  true,\n  false,\n  true]\n);\n(await keysManager.miningKeyByPayout.call(accounts[3])).should.be.equal(\n  accounts[1]\n);\n(await keysManager.miningKeyByPayout.call(accounts[2])).should.be.equal(\n  '0x0000000000000000000000000000000000000000'\n);",
                "err": {},
                "isRoot": false,
                "uuid": "8ab9cdac-a33a-41ad-afaa-820ca9a6d583",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "fec655d0-999e-44e2-bb69-a244ebfab6d6",
              "d2ee4547-a6c9-45da-8d31-4e4b47aef384",
              "a3bc6e36-bcd7-48e6-8fd4-57a2e6fd5a7f",
              "82197bde-3fe1-4c83-bac3-1af7ce380cbf",
              "8ab9cdac-a33a-41ad-afaa-820ca9a6d583"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 904,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "fc6e7c97-91dc-48a2-a406-4b666cd0290b",
            "title": "#removeMiningKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called if KeysManager.init had been called before",
                "fullTitle": "Contract: KeysManager upgraded [all features] #removeMiningKey may only be called if KeysManager.init had been called before",
                "timedOut": false,
                "duration": 165,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[3], accounts[1], true);\nawait keysManager.setInitEnabled().should.be.fulfilled;\nlet result = await keysManager.removeMiningKey(accounts[1]);\nresult.logs.length.should.be.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "17ffc518-6986-4e26-9ea5-545a5b8d5dbd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should remove miningKey",
                "fullTitle": "Contract: KeysManager upgraded [all features] #removeMiningKey should remove miningKey",
                "timedOut": false,
                "duration": 663,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.removeMiningKey(accounts[1], {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[3], accounts[1], true);\nconst validatorData = [\n  \"Djamshut\", \"Roosvelt\", \"123asd\", \"Moskva\", \"ZZ\", \"234\", 23423\n];\nawait validatorMetadata.setTime(55555);\nawait validatorMetadata.createMetadata(...validatorData, {from: accounts[3]}).should.be.fulfilled;\n(await validatorMetadata.validators.call(accounts[1])).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2)\n]);\nconst {logs} = await keysManager.removeMiningKey(accounts[1]).should.be.fulfilled;\n(await validatorMetadata.validators.call(accounts[1])).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0)\n]);\n\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false ]\n);\nlogs[0].event.should.be.equal('MiningKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[1]);\nlogs[0].args.action.should.be.equal('removed');\nlogs[1].event.should.be.equal('VotingKeyChanged');\nlogs[1].args.key.should.be.equal(accounts[3]);\nlogs[1].args.miningKey.should.be.equal(accounts[1]);\nlogs[1].args.action.should.be.equal('removed');\n(await keysManager.getMiningKeyByVoting.call(validator[0])).should.be.equal(\n  '0x0000000000000000000000000000000000000000'\n);\n(await keysManager.miningKeyByPayout.call(validator[1])).should.be.equal(\n  '0x0000000000000000000000000000000000000000'\n);\nlet result = await keysManager.removeVotingKey(accounts[1]).should.be.fulfilled;\nresult.logs.length.should.be.equal(0);\nresult = await keysManager.removeMiningKey(accounts[1]);\nresult.logs.length.should.be.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "6f3b1379-1615-45be-a8a1-85bbaa3a1c1b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "removes validator from poaConsensus",
                "fullTitle": "Contract: KeysManager upgraded [all features] #removeMiningKey removes validator from poaConsensus",
                "timedOut": false,
                "duration": 332,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst {logs} = await keysManager.removeMiningKey(accounts[1]);\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nlet currentValidatorsLength = await poaNetworkConsensusMock.getCurrentValidatorsLength.call();\nlet pendingList = [];\nfor(let i = 0; i < currentValidatorsLength.sub(1).toNumber(); i++){\n    let pending = await poaNetworkConsensusMock.pendingList.call(i);\n    pendingList.push(pending);\n}\npendingList.should.not.contain(accounts[1]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators.call();\nvalidators.should.not.contain(accounts[1]);\nconst expected = currentValidatorsLength.sub(1);\nconst actual = await poaNetworkConsensusMock.getCurrentValidatorsLength.call();\nexpected.should.be.bignumber.equal(actual);",
                "err": {},
                "isRoot": false,
                "uuid": "4c61dec0-7d49-4d50-a10a-d9645a7bde48",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "removes MoC from poaConsensus",
                "fullTitle": "Contract: KeysManager upgraded [all features] #removeMiningKey removes MoC from poaConsensus",
                "timedOut": false,
                "duration": 1028,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys('0x0000000000000000000000000000000000000001', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000002', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000003', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000004', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000005', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000006', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000007', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000008', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000009', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000010', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000011', {from: masterOfCeremony}).should.be.fulfilled;\n\nlet result = await keysManager.removeMiningKey(masterOfCeremony);\nresult.logs.length.should.be.equal(0);\n(await poaNetworkConsensusMock.isMasterOfCeremonyRemoved.call()).should.be.equal(false);\n(await keysManager.masterOfCeremony.call()).should.be.equal(masterOfCeremony);\n(await poaNetworkConsensusMock.isValidator.call(masterOfCeremony)).should.be.equal(true);\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(1);\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000012', {from: masterOfCeremony}).should.be.fulfilled;\n\nresult = await keysManager.removeMiningKey(masterOfCeremony);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\n(await poaNetworkConsensusMock.isMasterOfCeremonyRemovedPending.call()).should.be.equal(true);\n(await keysManager.masterOfCeremony.call()).should.be.equal(masterOfCeremony);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\n\n(await poaNetworkConsensusMock.isMasterOfCeremonyRemovedPending.call()).should.be.equal(false);\n(await poaNetworkConsensusMock.isMasterOfCeremonyRemoved.call()).should.be.equal(true);\n(await keysManager.masterOfCeremony.call()).should.be.equal(masterOfCeremony);\n(await poaNetworkConsensusMock.isValidator.call(masterOfCeremony)).should.be.equal(false);\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "13288052-e9e2-44cd-8630-c6e688e0892e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should still enforce removal of votingKey to 0x0 even if voting key did not exist",
                "fullTitle": "Contract: KeysManager upgraded [all features] #removeMiningKey should still enforce removal of votingKey to 0x0 even if voting key did not exist",
                "timedOut": false,
                "duration": 321,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let result = await keysManager.removeMiningKey(accounts[1]).should.be.fulfilled;\nresult.logs.length.should.be.equal(0);\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(accounts[1], true);\nresult = await keysManager.removeMiningKey(accounts[1]).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('MiningKeyChanged');\nresult.logs[0].args.key.should.be.equal(accounts[1]);\nresult.logs[0].args.action.should.be.equal('removed');\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\n(await keysManager.getMiningKeyByVoting.call(validator[0])).should.be.equal(\n  '0x0000000000000000000000000000000000000000'\n);\n(await keysManager.miningKeyByPayout.call(validator[1])).should.be.equal(\n  '0x0000000000000000000000000000000000000000'\n);",
                "err": {},
                "isRoot": false,
                "uuid": "85c31bcd-94a4-4970-9e12-5bed111f9f68",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "17ffc518-6986-4e26-9ea5-545a5b8d5dbd",
              "6f3b1379-1615-45be-a8a1-85bbaa3a1c1b",
              "4c61dec0-7d49-4d50-a10a-d9645a7bde48",
              "13288052-e9e2-44cd-8630-c6e688e0892e",
              "85c31bcd-94a4-4970-9e12-5bed111f9f68"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2509,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "8581943e-336d-4f74-9123-e2522761feac",
            "title": "#removeVotingKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called if KeysManager.init had been called before",
                "fullTitle": "Contract: KeysManager upgraded [all features] #removeVotingKey may only be called if KeysManager.init had been called before",
                "timedOut": false,
                "duration": 217,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {mining, voting, payout} = {mining: accounts[1], voting: accounts[3], payout: accounts[2]};\nawait addMiningKey(mining, true);\nawait addVotingKey(voting, mining, true);\nawait addPayoutKey(payout, mining, true);\nawait keysManager.setInitEnabled().should.be.fulfilled;\nawait removeVotingKey(mining, false);",
                "err": {},
                "isRoot": false,
                "uuid": "5051c924-0441-43fc-a655-81178de421ca",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be successful only for active voting key",
                "fullTitle": "Contract: KeysManager upgraded [all features] #removeVotingKey should be successful only for active voting key",
                "timedOut": false,
                "duration": 325,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {mining, voting, payout} = {mining: accounts[1], voting: accounts[3], payout: accounts[2]};\nawait addMiningKey(mining, true);\nawait addPayoutKey(payout, mining, true);\nconst result = await keysManager.removeVotingKey(mining).should.be.fulfilled;\nresult.logs.length.should.be.equal(0);\nawait addVotingKey(voting, mining, true);\nconst {logs} = await keysManager.removeVotingKey(mining).should.be.fulfilled;\nlogs[0].event.should.be.equal('VotingKeyChanged');\nlogs[0].args.key.should.be.equal(voting);\nlogs[0].args.miningKey.should.be.equal(mining);\nlogs[0].args.action.should.be.equal('removed');",
                "err": {},
                "isRoot": false,
                "uuid": "365a4354-fcdc-434f-aa1a-87d6db3596ee",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should remove votingKey",
                "fullTitle": "Contract: KeysManager upgraded [all features] #removeVotingKey should remove votingKey",
                "timedOut": false,
                "duration": 259,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {mining, voting, payout} = {mining: accounts[1], voting: accounts[3], payout: accounts[2]};\nawait keysManager.removeVotingKey(mining, {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(mining, true);\nawait addVotingKey(voting, mining, true);\nawait addPayoutKey(payout, mining, true);\nconst {logs} = await keysManager.removeVotingKey(mining).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys.call(mining);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  payout,\n  true,\n  false,\n  true]\n)\nlogs[0].event.should.be.equal('VotingKeyChanged');\nlogs[0].args.key.should.be.equal(voting);\nlogs[0].args.action.should.be.equal('removed');\nconst miningKey = await keysManager.getMiningKeyByVoting.call(voting);\nminingKey.should.be.equal('0x0000000000000000000000000000000000000000');",
                "err": {},
                "isRoot": false,
                "uuid": "30db5c62-ebb4-45ef-916b-db100fb20977",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5051c924-0441-43fc-a655-81178de421ca",
              "365a4354-fcdc-434f-aa1a-87d6db3596ee",
              "30db5c62-ebb4-45ef-916b-db100fb20977"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 801,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "6a0a9c12-7046-409e-a668-491da1000a07",
            "title": "#removePayoutKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called if KeysManager.init had been called before",
                "fullTitle": "Contract: KeysManager upgraded [all features] #removePayoutKey may only be called if KeysManager.init had been called before",
                "timedOut": false,
                "duration": 222,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addPayoutKey(accounts[2], accounts[1], true);\nawait addVotingKey(accounts[3], accounts[1], true);\nawait keysManager.setInitEnabled().should.be.fulfilled;\nawait removePayoutKey(accounts[1], false);",
                "err": {},
                "isRoot": false,
                "uuid": "4764040a-80e0-40da-aea1-e1d386d46dee",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be successful only for active payout key",
                "fullTitle": "Contract: KeysManager upgraded [all features] #removePayoutKey should be successful only for active payout key",
                "timedOut": false,
                "duration": 331,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[3], accounts[1], true);\nawait removePayoutKey(accounts[1], false);\nawait addPayoutKey(accounts[2], accounts[1], true);\nconst {logs} = await keysManager.removePayoutKey(accounts[1]).should.be.fulfilled;\nlogs[0].event.should.be.equal('PayoutKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.miningKey.should.be.equal(accounts[1]);\nlogs[0].args.action.should.be.equal('removed');",
                "err": {},
                "isRoot": false,
                "uuid": "7998a8d4-01eb-434c-8113-58fc6dff4355",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should remove payoutKey",
                "fullTitle": "Contract: KeysManager upgraded [all features] #removePayoutKey should remove payoutKey",
                "timedOut": false,
                "duration": 302,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.removePayoutKey(accounts[1], {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(accounts[1], true);\nawait addPayoutKey(accounts[2], accounts[1], true);\nawait addVotingKey(accounts[3], accounts[1], true);\nconst {logs} = await keysManager.removePayoutKey(accounts[1]).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ accounts[3],\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false]\n)\nlogs[0].event.should.be.equal('PayoutKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.action.should.be.equal('removed');\nconst miningKey = await keysManager.miningKeyByPayout.call(accounts[2]);\nminingKey.should.be.equal('0x0000000000000000000000000000000000000000');",
                "err": {},
                "isRoot": false,
                "uuid": "64fd4ec8-7217-49d0-9e8e-8ece92f3f1b8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4764040a-80e0-40da-aea1-e1d386d46dee",
              "7998a8d4-01eb-434c-8113-58fc6dff4355",
              "64fd4ec8-7217-49d0-9e8e-8ece92f3f1b8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 855,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "0538fdd6-4770-409f-87a1-4a4cd69bb720",
            "title": "#swapMiningKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should swap mining key",
                "fullTitle": "Contract: KeysManager upgraded [all features] #swapMiningKey should swap mining key",
                "timedOut": false,
                "duration": 727,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.swapMiningKey(accounts[1], accounts[2], {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[5], accounts[1], true);\nconst validatorData = [\n  \"Djamshut\", \"Roosvelt\", \"123asd\", \"Moskva\", \"ZZ\", \"234\", 23423\n];\nawait validatorMetadata.setTime(55555);\nawait validatorMetadata.createMetadata(...validatorData, {from: accounts[5]}).should.be.fulfilled;\nawait swapMiningKey(accounts[2], accounts[1], true);\nawait swapMiningKey(accounts[4], accounts[3], false);\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false\n]);\nconst validatorNew = await keysManager.validatorKeys.call(accounts[2]);\nvalidatorNew.should.be.deep.equal([\n  accounts[5],\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false\n]);\n(await validatorMetadata.validators.call(accounts[2])).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2)\n]);\n(await validatorMetadata.validators.call(accounts[1])).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0)\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "3bcb3b9c-42b7-49dc-a675-d09da98dcad0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should swap MoC",
                "fullTitle": "Contract: KeysManager upgraded [all features] #swapMiningKey should swap MoC",
                "timedOut": false,
                "duration": 355,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await keysManager.masterOfCeremony.call()).should.be.equal(masterOfCeremony);\n(await poaNetworkConsensusMock.masterOfCeremony.call()).should.be.equal(masterOfCeremony);\nawait swapMiningKey(accounts[1], masterOfCeremony, true);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\n(await keysManager.masterOfCeremony.call()).should.be.equal(accounts[1]);\n(await poaNetworkConsensusMock.masterOfCeremony.call()).should.be.equal(accounts[1]);\n(await poaNetworkConsensusMock.isValidator.call(masterOfCeremony)).should.be.equal(false);\n(await poaNetworkConsensusMock.isValidator.call(accounts[1])).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "c903cabb-abc9-4a3c-87dd-b9eaddf3e50e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should keep voting and payout keys",
                "fullTitle": "Contract: KeysManager upgraded [all features] #swapMiningKey should keep voting and payout keys",
                "timedOut": false,
                "duration": 655,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const oldMining = accounts[1];\nconst voting = accounts[2];\nconst payout = accounts[3];\nconst newMining = accounts[4];\nawait addMiningKey(oldMining, true);\nawait addVotingKey(voting, oldMining, true);\nawait addPayoutKey(payout, oldMining, true);\nconst {logs} = await keysManager.swapMiningKey(newMining, oldMining).should.be.fulfilled;\n//const mining = await keysManager.getMiningKeyByVoting.call(voting);\nconst validator = await keysManager.validatorKeys.call(oldMining);\nnewMining.should.be.equal(await keysManager.getMiningKeyByVoting.call(voting));\nnewMining.should.be.equal(await keysManager.miningKeyByPayout.call(payout));\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false ]\n)\nconst validatorNew = await keysManager.validatorKeys.call(newMining);\nvalidatorNew.should.be.deep.equal(\n  [ voting,\n  payout,\n  true,\n  true,\n  true]\n)\noldMining.should.be.equal(await keysManager.getMiningKeyHistory.call(newMining));\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators.call();\nvalidators.should.not.contain(oldMining);\nvalidators.should.contain(newMining);",
                "err": {},
                "isRoot": false,
                "uuid": "906f5df7-017b-4896-b7aa-0dcb91bb3f5a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3bcb3b9c-42b7-49dc-a675-d09da98dcad0",
              "c903cabb-abc9-4a3c-87dd-b9eaddf3e50e",
              "906f5df7-017b-4896-b7aa-0dcb91bb3f5a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1737,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "17eb0234-6948-456d-aec9-5c0a9c35ea81",
            "title": "#swapVotingKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should swap voting key",
                "fullTitle": "Contract: KeysManager upgraded [all features] #swapVotingKey should swap voting key",
                "timedOut": false,
                "duration": 278,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.swapVotingKey(accounts[1], accounts[2], {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[2], accounts[1], true);\nawait swapVotingKey(accounts[3], accounts[1], true);\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ accounts[3],\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "b4a97d0d-2432-4589-8177-2d4e7f9ed5f5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b4a97d0d-2432-4589-8177-2d4e7f9ed5f5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 278,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "ec4f9d70-6025-4a0e-95f7-f4612200ae41",
            "title": "#swapPayoutKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should swap payout key",
                "fullTitle": "Contract: KeysManager upgraded [all features] #swapPayoutKey should swap payout key",
                "timedOut": false,
                "duration": 247,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.swapPayoutKey(accounts[1], accounts[2], {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(accounts[1], true);\nawait addPayoutKey(accounts[2], accounts[1], true);\nconst {logs} = await keysManager.swapPayoutKey(accounts[3], accounts[1]);\nlogs[0].event.should.be.equal(\"PayoutKeyChanged\");\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  accounts[3],\n  true,\n  false,\n  true]\n);\n(await keysManager.miningKeyByPayout.call(accounts[2])).should.be.equal(\n  '0x0000000000000000000000000000000000000000'\n);\n(await keysManager.miningKeyByPayout.call(accounts[3])).should.be.equal(\n  accounts[1]\n);",
                "err": {},
                "isRoot": false,
                "uuid": "9939edb4-2ce7-4349-9862-cbdc690b54a9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9939edb4-2ce7-4349-9862-cbdc690b54a9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 247,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "a22916c1-1077-419e-9602-1aaab93e76fa",
            "title": "#migrateInitialKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "can copy initial keys",
                "fullTitle": "Contract: KeysManager upgraded [all features] #migrateInitialKey can copy initial keys",
                "timedOut": false,
                "duration": 403,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1]);\n\nlet newKeysManager = await KeysManagerMock.new();\nconst newKeysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, newKeysManager.address);\nnewKeysManager = await KeysManagerMock.at(newKeysManagerEternalStorage.address);\nawait newKeysManager.init(keysManager.address).should.be.fulfilled;\n\nkeysManager.address.should.be.equal(\n  await newKeysManager.previousKeysManager.call()\n);\nlet initialKeys = await newKeysManager.initialKeysCount.call();\ninitialKeys.should.be.bignumber.equal(1);\n\nawait newKeysManager.migrateInitialKey(\n  accounts[1],\n  {from: accounts[9]}\n).should.be.rejectedWith(ERROR_MSG);\nawait newKeysManager.migrateInitialKey(\n  '0x0000000000000000000000000000000000000000'\n).should.be.rejectedWith(ERROR_MSG);\nlet {logs} = await newKeysManager.migrateInitialKey(accounts[1]).should.be.fulfilled;\nlogs[0].event.should.equal(\"Migrated\");\nlogs[0].args.key.should.be.equal(accounts[1]);\nlogs[0].args.name.should.be.equal(\"initialKey\");\nawait newKeysManager.migrateInitialKey(accounts[1]).should.be.rejectedWith(ERROR_MSG);\nnew web3.BigNumber(1).should.be.bignumber.equal(\n  await newKeysManager.getInitialKeyStatus.call(accounts[1])\n)\nawait newKeysManager.migrateInitialKey(accounts[2]).should.be.rejectedWith(ERROR_MSG);\nnew web3.BigNumber(0).should.be.bignumber.equal(\n  await newKeysManager.getInitialKeyStatus.call(accounts[2])\n)",
                "err": {},
                "isRoot": false,
                "uuid": "fc4b4f6c-9c00-4941-9e37-86fb8f8d6325",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "fc4b4f6c-9c00-4941-9e37-86fb8f8d6325"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 403,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "c013e8b0-9280-4a94-98cb-66707664af06",
            "title": "#migrateMiningKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "copies validator keys",
                "fullTitle": "Contract: KeysManager upgraded [all features] #migrateMiningKey copies validator keys",
                "timedOut": false,
                "duration": 1078,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const miningKey = accounts[2];\nconst votingKey = accounts[3];\nconst payoutKey = accounts[4];\nconst miningKey2 = accounts[5];\nconst miningKey3 = accounts[6];\n\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKey2, true);\nawait swapMiningKey(miningKey3, miningKey2, true);\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(miningKey, votingKey, payoutKey, {from: accounts[1]}).should.be.fulfilled;\n\nconst validatorKeyFromOld = await keysManager.validatorKeys.call(miningKey);\nvalidatorKeyFromOld.should.be.deep.equal([\n  votingKey,\n  payoutKey,\n  true,\n  true,\n  true\n]);\n\nlet newKeysManager = await KeysManagerMock.new();\nconst newKeysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, newKeysManager.address);\nnewKeysManager = await KeysManagerMock.at(newKeysManagerEternalStorage.address);\nawait newKeysManager.init(keysManager.address).should.be.fulfilled;\n\n// mining #1\nawait newKeysManager.migrateMiningKey(\n  '0x0000000000000000000000000000000000000000'\n).should.be.rejectedWith(ERROR_MSG);\nawait newKeysManager.migrateMiningKey(accounts[9]).should.be.rejectedWith(ERROR_MSG);\nlet {logs} = await newKeysManager.migrateMiningKey(miningKey).should.be.fulfilled;\nlogs[0].event.should.equal(\"Migrated\");\nlogs[0].args.key.should.be.equal(miningKey);\nlogs[0].args.name.should.be.equal(\"miningKey\");\nawait newKeysManager.migrateMiningKey(miningKey).should.be.rejectedWith(ERROR_MSG);\nlet initialKeys = await newKeysManager.initialKeysCount.call();\ninitialKeys.should.be.bignumber.equal(1);\nconst validatorKey = await newKeysManager.validatorKeys.call(miningKey);\nvalidatorKey.should.be.deep.equal([\n  votingKey,\n  payoutKey,\n  true,\n  true,\n  true\n]);\ntrue.should.be.equal(\n  await newKeysManager.successfulValidatorClone.call(miningKey)\n);\nminingKey.should.be.equal(\n  await newKeysManager.getMiningKeyByVoting.call(votingKey)\n);\nminingKey.should.be.equal(\n  await newKeysManager.miningKeyByPayout.call(payoutKey)\n);\ntrue.should.be.equal(\n  await newKeysManager.isMiningActive.call(miningKey)\n)\ntrue.should.be.equal(\n  await newKeysManager.isVotingActive.call(votingKey)\n)\ntrue.should.be.equal(\n  await newKeysManager.isPayoutActive.call(miningKey)\n)\n// mining #2\nawait newKeysManager.migrateMiningKey(miningKey3).should.be.fulfilled;\nconst validatorKey2 = await newKeysManager.validatorKeys.call(miningKey3);\nvalidatorKey2.should.be.deep.equal([\n  \"0x0000000000000000000000000000000000000000\",\n  \"0x0000000000000000000000000000000000000000\",\n  true,\n  false,\n  false\n]);\ntrue.should.be.equal(\n  await newKeysManager.isMiningActive.call(miningKey3)\n);\ntrue.should.be.equal(\n  await newKeysManager.successfulValidatorClone.call(miningKey3)\n);\n(await keysManager.getMiningKeyHistory.call(miningKey3)).should.be.equal(\n  miningKey2\n);\n(await newKeysManager.getMiningKeyHistory.call(miningKey3)).should.be.equal(\n  miningKey2\n);",
                "err": {},
                "isRoot": false,
                "uuid": "6b1f95f9-c5e1-45ea-baa4-0297b1084d33",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "throws when trying to copy invalid mining key",
                "fullTitle": "Contract: KeysManager upgraded [all features] #migrateMiningKey throws when trying to copy invalid mining key",
                "timedOut": false,
                "duration": 254,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newKeysManager = await KeysManagerMock.new();\nconst newKeysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, newKeysManager.address);\nnewKeysManager = await KeysManagerMock.at(newKeysManagerEternalStorage.address);\nawait newKeysManager.init(keysManager.address).should.be.fulfilled;\n\ntrue.should.be.equal(\n  await newKeysManager.successfulValidatorClone.call(masterOfCeremony)\n);\nawait newKeysManager.migrateMiningKey(masterOfCeremony).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "b2d02c0e-cc64-4ab2-91af-a8207af8e914",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6b1f95f9-c5e1-45ea-baa4-0297b1084d33",
              "b2d02c0e-cc64-4ab2-91af-a8207af8e914"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1332,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "e0f0dbbc-69ea-456d-ba52-951ad920d5a7",
        "title": "Contract: ValidatorMetadata [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
        "file": "/test/metadata_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: ValidatorMetadata [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 3973,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "0613577d-0ff6-47f7-aff8-89f8c306b645",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: ValidatorMetadata [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "c69d4788-a5e1-4da7-8be1-527b33644ace",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: ValidatorMetadata [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 910,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "if (typeof masterOfCeremony === 'undefined') {\n  masterOfCeremony = accounts[0];\n}\nvotingKey = accounts[2];\nvotingKey2 = accounts[3];\nminingKey = accounts[1];\nminingKey2 = accounts[4];\nminingKey3 = accounts[5];\nvotingKey3 = accounts[7];\npoaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony, []);\n\nproxyStorageMock = await ProxyStorageMock.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorageMock.address);\nproxyStorageMock = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorageMock.init(poaNetworkConsensusMock.address).should.be.fulfilled;\n\nkeysManager = await KeysManagerMock.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, keysManager.address);\nkeysManager = await KeysManagerMock.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\n\nlet ballotsStorage = await BallotsStorage.new();\nconst ballotsEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, ballotsStorage.address);\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\n\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\nmetadata = await ValidatorMetadata.new();\nmetadataEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, metadata.address);\nmetadata = await ValidatorMetadata.at(metadataEternalStorage.address);\n\nawait proxyStorageMock.initializeAddresses(\n  keysManager.address,\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  ballotsEternalStorage.address,\n  metadataEternalStorage.address,\n  accounts[0]\n);\n\nawait addMiningKey(miningKey);\nawait addVotingKey(votingKey, miningKey);\nawait addMiningKey(miningKey2);\nawait addVotingKey(votingKey2, miningKey2);\nawait addMiningKey(miningKey3);\nawait addVotingKey(votingKey3, miningKey3);\nawait metadata.setTime(55555);",
            "err": {},
            "isRoot": false,
            "uuid": "6668ef04-ded6-4761-82ae-af89fa8c46b2",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: ValidatorMetadata [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "e66ca738-749b-43ef-91ec-560836d77b6b",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "4d9c4035-a0eb-4e9b-9a4e-31af262f9653",
            "title": "#createMetadata",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata [all features] #createMetadata happy path",
                "timedOut": false,
                "duration": 212,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await metadata.getTime.call()).should.be.bignumber.equal(55555);\nconst {logs} = await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nconst validators = await metadata.validators.call(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2)\n]);\nlogs[0].event.should.be.equal('MetadataCreated');\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "18e58994-3a84-46d6-b9fe-1028c20a5a76",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create metadata if fullAddress is too long",
                "fullTitle": "Contract: ValidatorMetadata [all features] #createMetadata should not let create metadata if fullAddress is too long",
                "timedOut": false,
                "duration": 202,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let localFakeData = fakeData.slice();\nlocalFakeData[3] = 'a'.repeat(201);\nawait metadata.createMetadata(...localFakeData, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nlocalFakeData[3] = 'a'.repeat(200);\nawait metadata.createMetadata(...localFakeData, {from: votingKey}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "53fc890b-7b08-43f9-8e7c-c764fc5ea92d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create metadata if called by non-voting key",
                "fullTitle": "Contract: ValidatorMetadata [all features] #createMetadata should not let create metadata if called by non-voting key",
                "timedOut": false,
                "duration": 85,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await metadata.createMetadata(...fakeData, {from: miningKey}).should.be.rejectedWith(ERROR_MSG);\nconst validators = await metadata.validators.call(miningKey);\nvalidators.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  \"\",\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0)\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "8da9dac9-7b14-4fac-b1f3-b44f0f819e92",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create metadata if called second time",
                "fullTitle": "Contract: ValidatorMetadata [all features] #createMetadata should not let create metadata if called second time",
                "timedOut": false,
                "duration": 162,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "e0292196-2355-4b24-ac71-78821cd1b439",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "18e58994-3a84-46d6-b9fe-1028c20a5a76",
              "53fc890b-7b08-43f9-8e7c-c764fc5ea92d",
              "8da9dac9-7b14-4fac-b1f3-b44f0f819e92",
              "e0292196-2355-4b24-ac71-78821cd1b439"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 661,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "d0e806c2-b927-41a8-9305-abe46588c907",
            "title": "#clearMetadata",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata [all features] #clearMetadata happy path",
                "timedOut": false,
                "duration": 730,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let result = await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\n(await metadata.validators.call(miningKey)).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2)\n]);\nresult.logs[0].event.should.be.equal('MetadataCreated');\nresult.logs[0].args.miningKey.should.be.equal(miningKey);\nawait metadata.setTime(4444);\nresult = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\n(await metadata.pendingChanges.call(miningKey)).should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2)\n]);\nresult.logs[0].event.should.be.equal(\"ChangeRequestInitiated\");\nresult.logs[0].args.miningKey.should.be.equal(miningKey);\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.fulfilled;\nlet confirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(1); // voters count\nconfirmations[1][0].should.be.equal(miningKey2); // voters array\nawait proxyStorageMock.setKeysManagerMock(accounts[0]);\nresult = await metadata.clearMetadata(miningKey);\nresult.logs[0].event.should.be.equal('MetadataCleared');\nresult.logs[0].args.miningKey.should.be.equal(miningKey);\nawait proxyStorageMock.setKeysManagerMock(keysManager.address);\nconfirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(0); // voters count\n(await metadata.validators.call(miningKey)).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0)\n]);\n(await metadata.pendingChanges.call(miningKey)).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0)\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "7750bdda-c392-49d4-bfc1-0ce1c8e9fbd4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7750bdda-c392-49d4-bfc1-0ce1c8e9fbd4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 730,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "30d96b0e-b7e7-40d6-9f69-a4ad30ccf014",
            "title": "#moveMetadata",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata [all features] #moveMetadata happy path",
                "timedOut": false,
                "duration": 1120,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let result = await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\n(await metadata.validators.call(miningKey)).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2)\n]);\nresult.logs[0].event.should.be.equal('MetadataCreated');\nresult.logs[0].args.miningKey.should.be.equal(miningKey);\nawait metadata.setTime(4444);\nresult = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\n(await metadata.pendingChanges.call(miningKey)).should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2)\n]);\nresult.logs[0].event.should.be.equal(\"ChangeRequestInitiated\");\nresult.logs[0].args.miningKey.should.be.equal(miningKey);\nawait metadata.confirmPendingChange(miningKey, {from: votingKey3}).should.be.fulfilled;\nlet confirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(1); // voters count\nconfirmations[1][0].should.be.equal(miningKey3); // voters array\n(await metadata.validators.call(miningKey2)).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0)\n]);\n(await metadata.pendingChanges.call(miningKey2)).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0)\n]);\nawait proxyStorageMock.setKeysManagerMock(accounts[0]);\nresult = await metadata.moveMetadata(miningKey, miningKey2);\nresult.logs[0].event.should.be.equal('MetadataMoved');\nresult.logs[0].args.oldMiningKey.should.be.equal(miningKey);\nresult.logs[0].args.newMiningKey.should.be.equal(miningKey2);\nawait proxyStorageMock.setKeysManagerMock(keysManager.address);\nconfirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(0); // voters count\n(await metadata.validators.call(miningKey)).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0)\n]);\n(await metadata.pendingChanges.call(miningKey)).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0)\n]);\nconfirmations = await metadata.confirmations.call(miningKey2);\nconfirmations[0].should.be.bignumber.equal(1); // voters count\nconfirmations[1][0].should.be.equal(miningKey3); // voters array\n(await metadata.validators.call(miningKey2)).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2)\n]);\n(await metadata.pendingChanges.call(miningKey2)).should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2)\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "63f18837-22f8-4585-b289-70b6c4dea4e3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "63f18837-22f8-4585-b289-70b6c4dea4e3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1120,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "73c34193-6a05-4adb-abdd-bf5663c87104",
            "title": "#initMetadata",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata [all features] #initMetadata happy path",
                "timedOut": false,
                "duration": 604,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let validatorData = [\n  \"Djamshut\", // bytes32 _firstName\n  \"Roosvelt\", // bytes32 _lastName\n  \"123asd\",   // bytes32 _licenseId\n  \"Moskva\",   // string _fullAddress\n  \"ZZ\",       // bytes32 _state\n  \"234\",      // bytes32 _zipcode\n  23423,      // uint256 _expirationDate\n  123,        // uint256 _createdDate\n  0,          // uint256 _updatedDate\n  3,          // uint256 _minThreshold\n  accounts[8] // address _miningKey\n];\nawait metadata.initMetadata(...validatorData, {from: accounts[8]}).should.be.rejectedWith(ERROR_MSG);\nawait metadata.initMetadata(...validatorData).should.be.rejectedWith(ERROR_MSG);\nvalidatorData[10] = miningKey;\nawait metadata.initMetadata(...validatorData).should.be.fulfilled;\nawait metadata.initMetadata(...validatorData).should.be.rejectedWith(ERROR_MSG);\n(await metadata.validators.call(miningKey)).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(123),\n  new web3.BigNumber(0),\n  new web3.BigNumber(3)\n]);\nvalidatorData[7] = 0;\nvalidatorData[10] = miningKey2;\nawait metadata.initMetadata(...validatorData).should.be.rejectedWith(ERROR_MSG);\nvalidatorData[7] = 123;\nawait metadata.initMetadata(...validatorData).should.be.fulfilled;\n(await metadata.validators.call(miningKey2)).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(123),\n  new web3.BigNumber(0),\n  new web3.BigNumber(3)\n]);\nvalidatorData[10] = miningKey3;\nawait metadata.initMetadataDisable({from: accounts[8]}).should.be.rejectedWith(ERROR_MSG);\nawait metadata.initMetadataDisable().should.be.fulfilled;\n(await metadata.initMetadataDisabled.call()).should.be.equal(true);\nawait metadata.initMetadata(...validatorData).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "4c13f665-8a63-4b10-98f6-11a638509a26",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4c13f665-8a63-4b10-98f6-11a638509a26"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 604,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "87922d16-cae9-46ad-badc-27be1f0dd7b9",
            "title": "#changeRequest",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: ValidatorMetadata [all features] #changeRequest \"before each\" hook",
                "timedOut": false,
                "duration": 109,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "548fc019-9872-4106-9a99-3e4d181e53ee",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata [all features] #changeRequest happy path",
                "timedOut": false,
                "duration": 176,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.setTime(4444);\nconst {logs} = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nconst pendingChanges = await metadata.pendingChanges.call(miningKey);\npendingChanges.should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2)\n]);\nlogs[0].event.should.be.equal(\"ChangeRequestInitiated\");\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "cff2759b-37b8-4632-be63-d2d869a16f0e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let call if there is no metadata",
                "fullTitle": "Contract: ValidatorMetadata [all features] #changeRequest should not let call if there is no metadata",
                "timedOut": false,
                "duration": 36,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.changeRequest(...newMetadata, {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "3b3ea1de-886a-4d95-b58d-99e191a17bfa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "resets confirmations when changeRequest recreated",
                "fullTitle": "Contract: ValidatorMetadata [all features] #changeRequest resets confirmations when changeRequest recreated",
                "timedOut": false,
                "duration": 508,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.setTime(4444);\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2});\nawait metadata.confirmPendingChange(miningKey, {from: votingKey3});\nlet confirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(2); // voters count\nconst {logs} = await metadata.changeRequest(...anotherData, {from: votingKey}).should.be.fulfilled;\nconfirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(0); // voters count\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2});\nconfirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(1); // voters count",
                "err": {},
                "isRoot": false,
                "uuid": "fd964c6d-0b6f-4e48-bcbd-d85eef5216a7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "cff2759b-37b8-4632-be63-d2d869a16f0e",
              "3b3ea1de-886a-4d95-b58d-99e191a17bfa",
              "fd964c6d-0b6f-4e48-bcbd-d85eef5216a7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 720,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "66388bce-a7a3-4fbe-b460-8ab70c59a0de",
            "title": "#cancelPendingChange",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata [all features] #cancelPendingChange happy path",
                "timedOut": false,
                "duration": 495,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.cancelPendingChange({from: votingKey}).should.be.fulfilled;\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.setTime(4444);\nconst {logs} = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.cancelPendingChange({from: votingKey}).should.be.fulfilled;\nconst pendingChanges = await metadata.pendingChanges.call(miningKey);\npendingChanges.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  \"\",\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0)\n]);\nconst validators = await metadata.validators.call(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2)\n]);\nlogs[0].event.should.be.equal(\"ChangeRequestInitiated\");\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "ec44441d-3b04-4553-bad3-91e2045844fa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let delete records for someone else miningKey",
                "fullTitle": "Contract: ValidatorMetadata [all features] #cancelPendingChange should not let delete records for someone else miningKey",
                "timedOut": false,
                "duration": 583,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.cancelPendingChange({from: votingKey}).should.be.fulfilled;\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.setTime(4444);\nconst {logs} = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.cancelPendingChange({from: votingKey2}).should.be.fulfilled;\nconst pendingChanges = await metadata.pendingChanges.call(miningKey);\npendingChanges.should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2)\n]);\nconst validators = await metadata.validators.call(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2)\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "649e4df5-a79d-43db-a3f9-8e9d8489277b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ec44441d-3b04-4553-bad3-91e2045844fa",
              "649e4df5-a79d-43db-a3f9-8e9d8489277b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1078,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "100986a0-24a9-4640-b378-7dd37072f4c9",
            "title": "#confirmPendingChange",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should not let confirm your own changes",
                "fullTitle": "Contract: ValidatorMetadata [all features] #confirmPendingChange should not let confirm your own changes",
                "timedOut": false,
                "duration": 244,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "39009dab-8ab7-4268-8a8c-4744d88d3bd3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should confirm changes",
                "fullTitle": "Contract: ValidatorMetadata [all features] #confirmPendingChange should confirm changes",
                "timedOut": false,
                "duration": 326,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nconst {logs} = await metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.fulfilled;\nconst confirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(1); // voters count\nlogs[0].event.should.be.equal('Confirmed');\nlogs[0].args.miningKey.should.be.equal(miningKey);\nlogs[0].args.votingSender.should.be.equal(votingKey2);",
                "err": {},
                "isRoot": false,
                "uuid": "ac2cf21c-e26c-4c23-8768-fcd70970215c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevent from double voting",
                "fullTitle": "Contract: ValidatorMetadata [all features] #confirmPendingChange prevent from double voting",
                "timedOut": false,
                "duration": 458,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nconst {logs} = await metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nconst confirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(1); // voters count",
                "err": {},
                "isRoot": false,
                "uuid": "a9073c40-2e0e-41d1-be71-21574d6a52c1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not exceed confirmations limit",
                "fullTitle": "Contract: ValidatorMetadata [all features] #confirmPendingChange should not exceed confirmations limit",
                "timedOut": false,
                "duration": 576,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const miningKey4 = accounts[8];\nconst votingKey4 = accounts[9];\nawait addMiningKey(miningKey4);\nawait addVotingKey(votingKey4, miningKey4);\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey4}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey3}).should.be.rejectedWith(ERROR_MSG);\nconst confirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(2); // voters count",
                "err": {},
                "isRoot": false,
                "uuid": "b4427110-44f5-45f6-87c3-26968da9c3d9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "39009dab-8ab7-4268-8a8c-4744d88d3bd3",
              "ac2cf21c-e26c-4c23-8768-fcd70970215c",
              "a9073c40-2e0e-41d1-be71-21574d6a52c1",
              "b4427110-44f5-45f6-87c3-26968da9c3d9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1604,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "5b4a8c85-d059-4b1e-927f-ba7b69977b67",
            "title": "#finalize",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata [all features] #finalize happy path",
                "timedOut": false,
                "duration": 853,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.setTime(4444);\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2});\nawait metadata.finalize(miningKey, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait metadata.confirmPendingChange(miningKey, {from: votingKey3});\nconst {logs} = await metadata.finalize(miningKey, {from: votingKey}).should.be.fulfilled;\nawait metadata.finalize(miningKey2, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nconst validators = await metadata.validators.call(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2)\n]);\nconst pendingChanges = await metadata.pendingChanges.call(miningKey);\npendingChanges.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  \"\",\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0)\n]);\nlogs[0].event.should.be.equal('FinalizedChange');\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "a0b00c49-6c07-4f31-81cd-054d1495baa0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a0b00c49-6c07-4f31-81cd-054d1495baa0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 853,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "d005e3ca-5d87-44d7-93b7-8603d741c827",
            "title": "#getMinThreshold",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns default value",
                "fullTitle": "Contract: ValidatorMetadata [all features] #getMinThreshold returns default value",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await metadata.getMinThreshold.call()).should.be.bignumber.equal(2);",
                "err": {},
                "isRoot": false,
                "uuid": "f5e668ea-ab1a-4998-8476-fb1945b69850",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f5e668ea-ab1a-4998-8476-fb1945b69850"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 21,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "64c2c13f-d4b4-405e-abfe-dbcb2c2f9af0",
            "title": "#upgradeTo",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: ValidatorMetadata [all features] #upgradeTo \"before each\" hook",
                "timedOut": false,
                "duration": 91,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "proxyStorageStubAddress = accounts[8];\nmetadata = await ValidatorMetadata.new();\nmetadataOldImplementation = metadata.address;\nmetadataEternalStorage = await EternalStorageProxy.new(proxyStorageStubAddress, metadata.address);\nmetadata = await ValidatorMetadata.at(metadataEternalStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "4bcd98a7-9121-44d7-874c-8964974cfbd2",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by ProxyStorage",
                "fullTitle": "Contract: ValidatorMetadata [all features] #upgradeTo may only be called by ProxyStorage",
                "timedOut": false,
                "duration": 86,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let metadataNew = await ValidatorMetadataNew.new();\nawait metadataEternalStorage.upgradeTo(metadataNew.address, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);\nawait upgradeTo(metadataNew.address, {from: proxyStorageStubAddress});",
                "err": {},
                "isRoot": false,
                "uuid": "35434fbe-a998-4c8c-b44b-d8f87c479b88",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change implementation address",
                "fullTitle": "Contract: ValidatorMetadata [all features] #upgradeTo should change implementation address",
                "timedOut": false,
                "duration": 92,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let metadataNew = await ValidatorMetadataNew.new();\nlet newImplementation = metadataNew.address;\n(await metadataEternalStorage.implementation.call()).should.be.equal(metadataOldImplementation);\nawait upgradeTo(newImplementation, {from: proxyStorageStubAddress});\n(await metadataEternalStorage.implementation.call()).should.be.equal(newImplementation);",
                "err": {},
                "isRoot": false,
                "uuid": "541cc3a2-d226-4dbd-9f91-0a7a31633407",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment implementation version",
                "fullTitle": "Contract: ValidatorMetadata [all features] #upgradeTo should increment implementation version",
                "timedOut": false,
                "duration": 89,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let metadataNew = await ValidatorMetadataNew.new();\nlet oldVersion = await metadataEternalStorage.version.call();\nlet newVersion = oldVersion.add(1);\nawait upgradeTo(metadataNew.address, {from: proxyStorageStubAddress});\n(await metadataEternalStorage.version.call()).should.be.bignumber.equal(newVersion);",
                "err": {},
                "isRoot": false,
                "uuid": "1238fd55-70a9-418d-9680-c43e4a7acf5f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should work",
                "fullTitle": "Contract: ValidatorMetadata [all features] #upgradeTo new implementation should work",
                "timedOut": false,
                "duration": 121,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let metadataNew = await ValidatorMetadataNew.new();\nawait upgradeTo(metadataNew.address, {from: proxyStorageStubAddress});\nmetadataNew = await ValidatorMetadataNew.at(metadataEternalStorage.address);\n(await metadataNew.initialized.call()).should.be.equal(false);\nawait metadataNew.initialize();\n(await metadataNew.initialized.call()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "16c294d6-bf4b-46a0-970a-b17442b8e802",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same proxyStorage address",
                "fullTitle": "Contract: ValidatorMetadata [all features] #upgradeTo new implementation should use the same proxyStorage address",
                "timedOut": false,
                "duration": 86,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let metadataNew = await ValidatorMetadataNew.new();\nawait upgradeTo(metadataNew.address, {from: proxyStorageStubAddress});\nmetadataNew = await ValidatorMetadataNew.at(metadataEternalStorage.address);\n(await metadataNew.proxyStorage.call()).should.be.equal(proxyStorageStubAddress);",
                "err": {},
                "isRoot": false,
                "uuid": "5e3589b4-8685-452e-8b4e-f6df83fa0f93",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same storage",
                "fullTitle": "Contract: ValidatorMetadata [all features] #upgradeTo new implementation should use the same storage",
                "timedOut": false,
                "duration": 304,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.setTime(55555);\nawait metadataEternalStorage.setProxyStorage(proxyStorageMock.address);\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadataEternalStorage.setProxyStorage(proxyStorageStubAddress);\nlet metadataNew = await ValidatorMetadataNew.new();\nawait upgradeTo(metadataNew.address, {from: proxyStorageStubAddress});\nmetadataNew = await ValidatorMetadataNew.at(metadataEternalStorage.address);\nconst validators = await metadataNew.validators.call(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2)\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "a92e6cb2-b782-476b-83a7-49703ce93f8c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "35434fbe-a998-4c8c-b44b-d8f87c479b88",
              "541cc3a2-d226-4dbd-9f91-0a7a31633407",
              "1238fd55-70a9-418d-9680-c43e4a7acf5f",
              "16c294d6-bf4b-46a0-970a-b17442b8e802",
              "5e3589b4-8685-452e-8b4e-f6df83fa0f93",
              "a92e6cb2-b782-476b-83a7-49703ce93f8c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 778,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "953b312c-7225-475d-a638-278fce7b2a2c",
        "title": "Contract: ValidatorMetadata upgraded [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
        "file": "/test/metadata_upgrade_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: ValidatorMetadata upgraded [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 1836,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "c6817dac-be45-4441-9e55-274a2d3baf3f",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: ValidatorMetadata upgraded [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "42c3f384-9e35-4673-8b79-b6a409c263fc",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: ValidatorMetadata upgraded [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 1142,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "if (typeof masterOfCeremony === 'undefined') {\n  masterOfCeremony = accounts[0];\n}\nvotingKey = accounts[2];\nvotingKey2 = accounts[3];\nminingKey = accounts[1];\nminingKey2 = accounts[4];\nminingKey3 = accounts[5];\nvotingKey3 = accounts[7];\npoaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony, []);\n\nproxyStorageMock = await ProxyStorageMock.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorageMock.address);\nproxyStorageMock = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorageMock.init(poaNetworkConsensusMock.address).should.be.fulfilled;\n\nkeysManager = await KeysManagerMock.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, keysManager.address);\nkeysManager = await KeysManagerMock.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\n\nlet ballotsStorage = await BallotsStorage.new();\nconst ballotsEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, ballotsStorage.address);\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\n\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\nmetadata = await ValidatorMetadata.new();\nmetadataEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, metadata.address);\nmetadata = await ValidatorMetadata.at(metadataEternalStorage.address);\n\nawait proxyStorageMock.initializeAddresses(\n  keysManager.address,\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  ballotsEternalStorage.address,\n  metadataEternalStorage.address,\n  accounts[0]\n);\nlet metadataNew = await ValidatorMetadataNew.new();\nawait metadataEternalStorage.setProxyStorage(accounts[6]);\nconst {logs} = await metadataEternalStorage.upgradeTo(metadataNew.address, {from: accounts[6]});\nlogs[0].event.should.be.equal(\"Upgraded\");\nawait metadataEternalStorage.setProxyStorage(proxyStorageMock.address);\nmetadata = await ValidatorMetadataNew.at(metadataEternalStorage.address);\nawait addMiningKey(miningKey);\nawait addVotingKey(votingKey, miningKey);\nawait addMiningKey(miningKey2);\nawait addVotingKey(votingKey2, miningKey2);\nawait addMiningKey(miningKey3);\nawait addVotingKey(votingKey3, miningKey3);\nawait metadata.setTime(55555);",
            "err": {},
            "isRoot": false,
            "uuid": "109097e0-9c72-4248-89f6-68c2acac4ca6",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: ValidatorMetadata upgraded [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "c8a224bb-426a-4a36-ab09-ae0daf6f8326",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "62ed6d6a-2274-4790-b4e2-49d718b31320",
            "title": "#createMetadata",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
            "file": "/test/metadata_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #createMetadata happy path",
                "timedOut": false,
                "duration": 162,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await metadata.getTime.call()).should.be.bignumber.equal(55555);\nconst {logs} = await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nconst validators = await metadata.validators.call(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2)\n]);\nlogs[0].event.should.be.equal('MetadataCreated');\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "e3da3de6-f7d0-4e3a-9159-4ca6f5717a6a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create metadata if fullAddress is too long",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #createMetadata should not let create metadata if fullAddress is too long",
                "timedOut": false,
                "duration": 197,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let localFakeData = fakeData.slice();\nlocalFakeData[3] = 'a'.repeat(201);\nawait metadata.createMetadata(...localFakeData, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nlocalFakeData[3] = 'a'.repeat(200);\nawait metadata.createMetadata(...localFakeData, {from: votingKey}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "8298aa30-83a2-4459-991f-50a3364f7b72",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create metadata if called by non-voting key",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #createMetadata should not let create metadata if called by non-voting key",
                "timedOut": false,
                "duration": 156,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await metadata.createMetadata(...fakeData, {from: miningKey}).should.be.rejectedWith(ERROR_MSG);\nconst validators = await metadata.validators.call(miningKey);\nvalidators.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  \"\",\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0)\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "3fa5a372-b7a3-485f-b1e3-c277a7e5ca55",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create metadata if called second time",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #createMetadata should not let create metadata if called second time",
                "timedOut": false,
                "duration": 153,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "f9c48c55-55a3-42e8-bc0d-432b9836743e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e3da3de6-f7d0-4e3a-9159-4ca6f5717a6a",
              "8298aa30-83a2-4459-991f-50a3364f7b72",
              "3fa5a372-b7a3-485f-b1e3-c277a7e5ca55",
              "f9c48c55-55a3-42e8-bc0d-432b9836743e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 668,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "3ad5a33e-1b91-4fc0-9639-b624787e20e0",
            "title": "#clearMetadata",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
            "file": "/test/metadata_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #clearMetadata happy path",
                "timedOut": false,
                "duration": 675,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let result = await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\n(await metadata.validators.call(miningKey)).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2)\n]);\nresult.logs[0].event.should.be.equal('MetadataCreated');\nresult.logs[0].args.miningKey.should.be.equal(miningKey);\nawait metadata.setTime(4444);\nresult = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\n(await metadata.pendingChanges.call(miningKey)).should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2)\n]);\nresult.logs[0].event.should.be.equal(\"ChangeRequestInitiated\");\nresult.logs[0].args.miningKey.should.be.equal(miningKey);\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.fulfilled;\nlet confirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(1); // voters count\nconfirmations[1][0].should.be.equal(miningKey2); // voters array\nawait proxyStorageMock.setKeysManagerMock(accounts[0]);\nresult = await metadata.clearMetadata(miningKey);\nresult.logs[0].event.should.be.equal('MetadataCleared');\nresult.logs[0].args.miningKey.should.be.equal(miningKey);\nawait proxyStorageMock.setKeysManagerMock(keysManager.address);\nconfirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(0); // voters count\n(await metadata.validators.call(miningKey)).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0)\n]);\n(await metadata.pendingChanges.call(miningKey)).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0)\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "3356a17d-87ed-4a54-b30b-b70c977d1ea8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3356a17d-87ed-4a54-b30b-b70c977d1ea8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 675,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "2aa90bf0-3892-4baa-8dde-637fb30b2389",
            "title": "#moveMetadata",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
            "file": "/test/metadata_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #moveMetadata happy path",
                "timedOut": false,
                "duration": 1074,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let result = await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\n(await metadata.validators.call(miningKey)).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2)\n]);\nresult.logs[0].event.should.be.equal('MetadataCreated');\nresult.logs[0].args.miningKey.should.be.equal(miningKey);\nawait metadata.setTime(4444);\nresult = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\n(await metadata.pendingChanges.call(miningKey)).should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2)\n]);\nresult.logs[0].event.should.be.equal(\"ChangeRequestInitiated\");\nresult.logs[0].args.miningKey.should.be.equal(miningKey);\nawait metadata.confirmPendingChange(miningKey, {from: votingKey3}).should.be.fulfilled;\nlet confirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(1); // voters count\nconfirmations[1][0].should.be.equal(miningKey3); // voters array\n(await metadata.validators.call(miningKey2)).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0)\n]);\n(await metadata.pendingChanges.call(miningKey2)).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0)\n]);\nawait proxyStorageMock.setKeysManagerMock(accounts[0]);\nresult = await metadata.moveMetadata(miningKey, miningKey2);\nresult.logs[0].event.should.be.equal('MetadataMoved');\nresult.logs[0].args.oldMiningKey.should.be.equal(miningKey);\nresult.logs[0].args.newMiningKey.should.be.equal(miningKey2);\nawait proxyStorageMock.setKeysManagerMock(keysManager.address);\nconfirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(0); // voters count\n(await metadata.validators.call(miningKey)).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0)\n]);\n(await metadata.pendingChanges.call(miningKey)).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0)\n]);\nconfirmations = await metadata.confirmations.call(miningKey2);\nconfirmations[0].should.be.bignumber.equal(1); // voters count\nconfirmations[1][0].should.be.equal(miningKey3); // voters array\n(await metadata.validators.call(miningKey2)).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2)\n]);\n(await metadata.pendingChanges.call(miningKey2)).should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2)\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "4e51f10c-6ec7-4fe1-be6a-8da606f14a39",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4e51f10c-6ec7-4fe1-be6a-8da606f14a39"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1074,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "a145a22f-26d5-4e59-9d2d-aef954483987",
            "title": "#initMetadata",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
            "file": "/test/metadata_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #initMetadata happy path",
                "timedOut": false,
                "duration": 454,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let validatorData = [\n  \"Djamshut\", // bytes32 _firstName\n  \"Roosvelt\", // bytes32 _lastName\n  \"123asd\",   // bytes32 _licenseId\n  \"Moskva\",   // string _fullAddress\n  \"ZZ\",       // bytes32 _state\n  \"234\",      // bytes32 _zipcode\n  23423,      // uint256 _expirationDate\n  123,        // uint256 _createdDate\n  0,          // uint256 _updatedDate\n  3,          // uint256 _minThreshold\n  accounts[8] // address _miningKey\n];\nawait metadata.initMetadata(...validatorData, {from: accounts[8]}).should.be.rejectedWith(ERROR_MSG);\nawait metadata.initMetadata(...validatorData).should.be.rejectedWith(ERROR_MSG);\nvalidatorData[10] = miningKey;\nawait metadata.initMetadata(...validatorData).should.be.fulfilled;\nawait metadata.initMetadata(...validatorData).should.be.rejectedWith(ERROR_MSG);\n(await metadata.validators.call(miningKey)).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(123),\n  new web3.BigNumber(0),\n  new web3.BigNumber(3)\n]);\nvalidatorData[7] = 0;\nvalidatorData[10] = miningKey2;\nawait metadata.initMetadata(...validatorData).should.be.rejectedWith(ERROR_MSG);\nvalidatorData[7] = 123;\nawait metadata.initMetadata(...validatorData).should.be.fulfilled;\n(await metadata.validators.call(miningKey2)).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(123),\n  new web3.BigNumber(0),\n  new web3.BigNumber(3)\n]);\nvalidatorData[10] = miningKey3;\nawait metadata.initMetadataDisable({from: accounts[8]}).should.be.rejectedWith(ERROR_MSG);\nawait metadata.initMetadataDisable().should.be.fulfilled;\n(await metadata.initMetadataDisabled.call()).should.be.equal(true);\nawait metadata.initMetadata(...validatorData).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "304736c0-88cf-4375-a6de-2547b776c99b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "304736c0-88cf-4375-a6de-2547b776c99b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 454,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "d5badd85-17b0-4ad0-82ab-5aad1f0d3860",
            "title": "#changeRequest",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
            "file": "/test/metadata_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #changeRequest \"before each\" hook",
                "timedOut": false,
                "duration": 111,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "b8ad6436-b827-45db-98b1-a0f96f859ede",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #changeRequest happy path",
                "timedOut": false,
                "duration": 178,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.setTime(4444);\nconst {logs} = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nconst pendingChanges = await metadata.pendingChanges.call(miningKey);\npendingChanges.should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2)\n]);\nlogs[0].event.should.be.equal(\"ChangeRequestInitiated\");\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "b8bc69fd-bbb2-47f7-9dd8-b7eceb7c7d31",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let call if there is no metadata",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #changeRequest should not let call if there is no metadata",
                "timedOut": false,
                "duration": 27,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.changeRequest(...newMetadata, {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "821839b9-433d-40fa-889c-2d5b6fd2a959",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "resets confirmations when changeRequest recreated",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #changeRequest resets confirmations when changeRequest recreated",
                "timedOut": false,
                "duration": 597,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.setTime(4444);\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2});\nawait metadata.confirmPendingChange(miningKey, {from: votingKey3});\nlet confirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(2); // voters count\nconst {logs} = await metadata.changeRequest(...anotherData, {from: votingKey}).should.be.fulfilled;\nconfirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(0); // voters count\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2});\nconfirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(1); // voters count",
                "err": {},
                "isRoot": false,
                "uuid": "f195e45c-5a7d-4fb6-a051-50b0c3dabd78",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b8bc69fd-bbb2-47f7-9dd8-b7eceb7c7d31",
              "821839b9-433d-40fa-889c-2d5b6fd2a959",
              "f195e45c-5a7d-4fb6-a051-50b0c3dabd78"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 802,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "fabd9175-d679-4cb1-bc11-1d5fbd950701",
            "title": "#cancelPendingChange",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
            "file": "/test/metadata_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #cancelPendingChange happy path",
                "timedOut": false,
                "duration": 476,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.cancelPendingChange({from: votingKey}).should.be.fulfilled;\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.setTime(4444);\nconst {logs} = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.cancelPendingChange({from: votingKey}).should.be.fulfilled;\nconst pendingChanges = await metadata.pendingChanges.call(miningKey);\npendingChanges.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  \"\",\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0)\n]);\nconst validators = await metadata.validators.call(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2)\n]);\nlogs[0].event.should.be.equal(\"ChangeRequestInitiated\");\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "9e6deb4f-70c9-48df-ba41-0be1c184557d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let delete records for someone else miningKey",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #cancelPendingChange should not let delete records for someone else miningKey",
                "timedOut": false,
                "duration": 657,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.cancelPendingChange({from: votingKey}).should.be.fulfilled;\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.setTime(4444);\nconst {logs} = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.cancelPendingChange({from: votingKey2}).should.be.fulfilled;\nconst pendingChanges = await metadata.pendingChanges.call(miningKey);\npendingChanges.should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2)\n]);\nconst validators = await metadata.validators.call(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2)\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "45c97b9c-ec3d-400a-85d7-2599ba90e7b3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9e6deb4f-70c9-48df-ba41-0be1c184557d",
              "45c97b9c-ec3d-400a-85d7-2599ba90e7b3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1133,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "15cc9832-9bd0-4302-9de5-e098b14719d3",
            "title": "#confirmPendingChange",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
            "file": "/test/metadata_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should not let confirm your own changes",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #confirmPendingChange should not let confirm your own changes",
                "timedOut": false,
                "duration": 249,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "6f491ead-492c-4417-a266-6ab5dcb2cf04",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should confirm changes",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #confirmPendingChange should confirm changes",
                "timedOut": false,
                "duration": 407,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nconst {logs} = await metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.fulfilled;\nconst confirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(1); // voters count\nlogs[0].event.should.be.equal('Confirmed');\nlogs[0].args.miningKey.should.be.equal(miningKey);\nlogs[0].args.votingSender.should.be.equal(votingKey2);",
                "err": {},
                "isRoot": false,
                "uuid": "b33dec92-c23c-411b-b903-4e6e8bbc626b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevent from double voting",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #confirmPendingChange prevent from double voting",
                "timedOut": false,
                "duration": 360,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nconst {logs} = await metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nconst confirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(1); // voters count",
                "err": {},
                "isRoot": false,
                "uuid": "91e166f9-69a1-4a6e-aaa0-4587dedfab8c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not exceed confirmations limit",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #confirmPendingChange should not exceed confirmations limit",
                "timedOut": false,
                "duration": 605,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const miningKey4 = accounts[8];\nconst votingKey4 = accounts[9];\nawait addMiningKey(miningKey4);\nawait addVotingKey(votingKey4, miningKey4);\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey4}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey3}).should.be.rejectedWith(ERROR_MSG);\nconst confirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(2); // voters count",
                "err": {},
                "isRoot": false,
                "uuid": "f6225ab3-d17e-41f2-90f7-80efa3744d27",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6f491ead-492c-4417-a266-6ab5dcb2cf04",
              "b33dec92-c23c-411b-b903-4e6e8bbc626b",
              "91e166f9-69a1-4a6e-aaa0-4587dedfab8c",
              "f6225ab3-d17e-41f2-90f7-80efa3744d27"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1621,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "cac19db3-ef85-461a-8cb4-a76dc0389251",
            "title": "#finalize",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
            "file": "/test/metadata_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #finalize happy path",
                "timedOut": false,
                "duration": 763,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.setTime(4444);\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2});\nawait metadata.finalize(miningKey, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait metadata.confirmPendingChange(miningKey, {from: votingKey3});\nconst {logs} = await metadata.finalize(miningKey, {from: votingKey}).should.be.fulfilled;\nawait metadata.finalize(miningKey2, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nconst validators = await metadata.validators.call(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2)\n]);\nconst pendingChanges = await metadata.pendingChanges.call(miningKey);\npendingChanges.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  \"\",\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0)\n]);\nlogs[0].event.should.be.equal('FinalizedChange');\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "79520d51-7213-4730-b5c7-b6899772b8e7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "79520d51-7213-4730-b5c7-b6899772b8e7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 763,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "8feebe87-a802-479c-b668-81eca7533f42",
            "title": "#getMinThreshold",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
            "file": "/test/metadata_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns default value",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #getMinThreshold returns default value",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await metadata.getMinThreshold.call()).should.be.bignumber.equal(2);",
                "err": {},
                "isRoot": false,
                "uuid": "0c759572-903d-4f29-9814-8c99c222a536",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0c759572-903d-4f29-9814-8c99c222a536"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 21,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "cd812828-3c87-4dd3-bb7d-e435fae30568",
        "title": "Contract: PoaNetworkConsensus [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
        "file": "/test/poa_network_consensus_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: PoaNetworkConsensus [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 1472,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "141eadb1-a6de-4ebb-aecb-4a8ae9e512c3",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: PoaNetworkConsensus [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "b7c081ea-392b-42d7-8735-fa3fa809a727",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: PoaNetworkConsensus [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 229,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "masterOfCeremony = accounts[9];\nawait PoaNetworkConsensus.new('0x0000000000000000000000000000000000000000', []).should.be.rejectedWith(ERROR_MSG);\npoaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony, []).should.be.fulfilled;;\n\nproxyStorageMock = await ProxyStorageMock.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorageMock.address);\nproxyStorageMock = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorageMock.init(poaNetworkConsensus.address).should.be.fulfilled;\n\nawait poaNetworkConsensus.setProxyStorage(proxyStorageMock.address).should.be.fulfilled;\nawait poaNetworkConsensus.setProxyStorage(proxyStorageMock.address).should.be.rejectedWith(ERROR_MSG);\n\nawait proxyStorageMock.initializeAddresses(\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  accounts[0]\n);",
            "err": {},
            "isRoot": false,
            "uuid": "36b9ab4a-660f-4e92-be94-6a2e24eb3e4d",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: PoaNetworkConsensus [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "0cd4fd43-1b49-4168-82bf-db5ec3493be0",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "3eeb11aa-086b-4257-8627-092057dab2ac",
            "title": "default values",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "finalized should be false",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] default values finalized should be false",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let validators = await poaNetworkConsensus.getValidators.call();\nlet finalized = await poaNetworkConsensus.finalized.call();\nvalidators.should.be.deep.equal([\n  masterOfCeremony\n]);\nfinalized.should.be.false;",
                "err": {},
                "isRoot": false,
                "uuid": "98fbc6d0-1b80-4f07-b66d-599ddfe746d5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "checks systemAddress",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] default values checks systemAddress",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let systemAddress = await poaNetworkConsensus.systemAddress.call();\nsystemAddress.should.be.equal('0xfffffffffffffffffffffffffffffffffffffffe');",
                "err": {},
                "isRoot": false,
                "uuid": "6337d154-f92f-47cd-9f9d-7643d4b0a36e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "allows you to set current list of validators",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] default values allows you to set current list of validators",
                "timedOut": false,
                "duration": 79,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let validatorsList = [accounts[2], accounts[3], accounts[4]];\nlet poa = await PoaNetworkConsensus.new(masterOfCeremony, validatorsList).should.be.fulfilled;\nlet validators = await poa.getValidators.call();\nvalidators.should.be.deep.equal([\n  masterOfCeremony,\n  ...validatorsList\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "e1317c2d-a354-467f-a6a6-09ef21fa23c5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "validators in the list must differ",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] default values validators in the list must differ",
                "timedOut": false,
                "duration": 128,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await PoaNetworkConsensus.new(\n  masterOfCeremony,\n  [masterOfCeremony, accounts[3], accounts[4]]\n).should.be.rejectedWith(ERROR_MSG);\nawait PoaNetworkConsensus.new(\n  masterOfCeremony,\n  [accounts[2], accounts[2], accounts[4]]\n).should.be.rejectedWith(ERROR_MSG);\nawait PoaNetworkConsensus.new(\n  masterOfCeremony,\n  [accounts[2], accounts[3], accounts[3]]\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "754c4d2f-6a95-4d66-a8d5-d3c53203b11d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "98fbc6d0-1b80-4f07-b66d-599ddfe746d5",
              "6337d154-f92f-47cd-9f9d-7643d4b0a36e",
              "e1317c2d-a354-467f-a6a6-09ef21fa23c5",
              "754c4d2f-6a95-4d66-a8d5-d3c53203b11d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 236,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "259537a4-3531-4f0a-ac2a-cc937cd4dca0",
            "title": "#finalizeChange",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should only be called by systemAddress",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #finalizeChange should only be called by systemAddress",
                "timedOut": false,
                "duration": 65,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.finalizeChange().should.be.rejectedWith(ERROR_MSG);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.finalizeChange().should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "de08e773-fa8b-4cd4-8b81-7f6768f10a6f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set finalized to true",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #finalizeChange should set finalized to true",
                "timedOut": false,
                "duration": 57,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let finalized = await poaNetworkConsensus.finalized.call();\nfinalized.should.be.false;\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nfinalized = await poaNetworkConsensus.finalized.call();\nfinalized.should.be.true;",
                "err": {},
                "isRoot": false,
                "uuid": "6b2433a0-75e7-4a54-8b54-7e580fb60282",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set currentValidators to pendingList",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #finalizeChange should set currentValidators to pendingList",
                "timedOut": false,
                "duration": 75,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.setSystemAddress(accounts[0]);\nconst { logs } = await poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nlet currentValidatorsLength = await poaNetworkConsensus.getCurrentValidatorsLength.call();\nlet currentValidators = [];\nlet pendingList = [];\nfor (let i = 0; i < currentValidatorsLength.toNumber(10); i++) {\n  let validator = await poaNetworkConsensus.currentValidators.call(i);\n  currentValidators.push(validator);\n  let pending = await poaNetworkConsensus.pendingList.call(i);\n  pendingList.push(pending);\n}\ncurrentValidators.should.be.deep.equal(pendingList);\nlogs[0].event.should.be.equal('ChangeFinalized');\nlogs[0].args.newSet.should.be.deep.equal(currentValidators);",
                "err": {},
                "isRoot": false,
                "uuid": "e02881b8-8dfd-4b7e-b67d-3302a7322f33",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "set currentValidators to pendingList after addValidator call",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #finalizeChange set currentValidators to pendingList after addValidator call",
                "timedOut": false,
                "duration": 302,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.addValidator(accounts[1], true, {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait addValidator(accounts[1], true);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nlet currentValidatorsLength = await poaNetworkConsensus.getCurrentValidatorsLength.call();\nlet currentValidators = [];\nlet pendingList = [];\nfor (let i = 0; i < currentValidatorsLength.toNumber(10); i++) {\n  let validator = await poaNetworkConsensus.currentValidators.call(i);\n  currentValidators.push(validator);\n  let pending = await poaNetworkConsensus.pendingList.call(i);\n  pendingList.push(pending);\n}\ncurrentValidators.should.be.deep.equal(pendingList);\nawait addValidator(accounts[2], true);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\ncurrentValidatorsLength = await poaNetworkConsensus.getCurrentValidatorsLength.call()\nconst expected = [masterOfCeremony, accounts[1], accounts[2]];\ncurrentValidatorsLength = await poaNetworkConsensus.getCurrentValidatorsLength.call();\ncurrentValidators = [];\npendingList = [];\nfor (let i = 0; i < currentValidatorsLength.toNumber(10); i++) {\n  let validator = await poaNetworkConsensus.currentValidators.call(i);\n  currentValidators.push(validator);\n  let pending = await poaNetworkConsensus.pendingList.call(i);\n  pendingList.push(pending);\n}\nexpected.should.be.deep.equal(pendingList);\nexpected.should.be.deep.equal(currentValidators);",
                "err": {},
                "isRoot": false,
                "uuid": "2d489900-307d-4ff3-b469-41e54cb00a70",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "de08e773-fa8b-4cd4-8b81-7f6768f10a6f",
              "6b2433a0-75e7-4a54-8b54-7e580fb60282",
              "e02881b8-8dfd-4b7e-b67d-3302a7322f33",
              "2d489900-307d-4ff3-b469-41e54cb00a70"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 499,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "ae2eecd4-4e1d-418f-be46-bc017b20ac80",
            "title": "#addValidator",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should only be called from keys manager",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #addValidator should only be called from keys manager",
                "timedOut": false,
                "duration": 77,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.addValidator(accounts[1], true, {from: accounts[2]}).should.be.rejectedWith(ERROR_MSG);\nawait proxyStorageMock.setKeysManagerMock(accounts[5]);\nawait addValidator(accounts[1], true, {from: accounts[5]});",
                "err": {},
                "isRoot": false,
                "uuid": "df21a920-7555-44dd-8e21-92781ba13413",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow to add already existing validator",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #addValidator should not allow to add already existing validator",
                "timedOut": false,
                "duration": 80,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait addValidator(accounts[1], true);\nawait addValidator(accounts[1], false);",
                "err": {},
                "isRoot": false,
                "uuid": "d931cf5c-9773-4c40-ab76-e4c5c4d6862f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow 0x0 addresses",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #addValidator should not allow 0x0 addresses",
                "timedOut": false,
                "duration": 71,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait addValidator('0x0', false);\nawait addValidator('0x0000000000000000000000000000000000000000', false);",
                "err": {},
                "isRoot": false,
                "uuid": "6d8be2a0-89df-4729-8c4f-2396ffc3c68e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set validatorsState for new validator",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #addValidator should set validatorsState for new validator",
                "timedOut": false,
                "duration": 81,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait addValidator(accounts[1], true);\nlet state = await poaNetworkConsensus.validatorsState.call(accounts[1]);\nlet pendingList = await poaNetworkConsensus.getPendingList.call();\nstate[0].should.be.true;\nstate[2].should.be.bignumber.equal(pendingList.length - 1)",
                "err": {},
                "isRoot": false,
                "uuid": "137234b1-1d7e-4388-9b47-8480f4daac66",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set finalized to false",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #addValidator should set finalized to false",
                "timedOut": false,
                "duration": 73,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait addValidator(accounts[1], true);\nlet finalized = await poaNetworkConsensus.finalized.call();\nfinalized.should.be.false;",
                "err": {},
                "isRoot": false,
                "uuid": "a729f27a-d5d5-4f7a-8104-bcd072296af6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should emit InitiateChange with blockhash and pendingList as params",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #addValidator should emit InitiateChange with blockhash and pendingList as params",
                "timedOut": false,
                "duration": 178,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nconst {logs} = await poaNetworkConsensus.addValidator(accounts[1], true).should.be.fulfilled;\nlet currentValidatorsLength = await poaNetworkConsensus.getCurrentValidatorsLength.call();\nlet currentValidators = [];\nfor (let i = 0; i < currentValidatorsLength.toNumber(10); i++) {\n  let validator = await poaNetworkConsensus.currentValidators.call(i);\n  currentValidators.push(validator);\n}\ncurrentValidators.push(accounts[1]);\nlogs[0].args['newSet'].should.deep.equal(currentValidators);  \nlogs[0].event.should.be.equal('InitiateChange');",
                "err": {},
                "isRoot": false,
                "uuid": "cfdb57d5-b4a3-432c-8ae2-dc363f695d48",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "df21a920-7555-44dd-8e21-92781ba13413",
              "d931cf5c-9773-4c40-ab76-e4c5c4d6862f",
              "6d8be2a0-89df-4729-8c4f-2396ffc3c68e",
              "137234b1-1d7e-4388-9b47-8480f4daac66",
              "a729f27a-d5d5-4f7a-8104-bcd072296af6",
              "cfdb57d5-b4a3-432c-8ae2-dc363f695d48"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 560,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "02cf3b13-d2db-4795-9eee-792d310dc928",
            "title": "#swapValidatorKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should swap validator key",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #swapValidatorKey should swap validator key",
                "timedOut": false,
                "duration": 268,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait addValidator(accounts[1], true);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensus.getCurrentValidatorsLength.call()).should.be.bignumber.equal(2);\n(await poaNetworkConsensus.isValidator.call(accounts[1])).should.be.equal(true);\n(await poaNetworkConsensus.isValidator.call(accounts[2])).should.be.equal(false);\n\nawait swapValidatorKey(accounts[2], accounts[3], false);\nawait swapValidatorKey(accounts[2], accounts[1], true);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensus.getCurrentValidatorsLength.call()).should.be.bignumber.equal(2);\n(await poaNetworkConsensus.isValidator.call(accounts[1])).should.be.equal(false);\n(await poaNetworkConsensus.isValidator.call(accounts[2])).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "fe9c2765-25d7-43ee-8f2d-7d76ee06c2b7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should swap MoC",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #swapValidatorKey should swap MoC",
                "timedOut": false,
                "duration": 257,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\n(await poaNetworkConsensus.getCurrentValidatorsLength.call()).should.be.bignumber.equal(1);\n(await poaNetworkConsensus.isValidator.call(masterOfCeremony)).should.be.equal(true);\n(await poaNetworkConsensus.isValidator.call(accounts[1])).should.be.equal(false);\n(await poaNetworkConsensus.masterOfCeremony.call()).should.be.equal(masterOfCeremony);\n(await poaNetworkConsensus.masterOfCeremonyPending.call()).should.be.equal('0x0000000000000000000000000000000000000000');\n\nawait swapValidatorKey(accounts[1], masterOfCeremony, true);\n(await poaNetworkConsensus.masterOfCeremonyPending.call()).should.be.equal(accounts[1]);\n(await poaNetworkConsensus.isMasterOfCeremonyRemovedPending.call()).should.be.equal(false);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensus.getCurrentValidatorsLength.call()).should.be.bignumber.equal(1);\n(await poaNetworkConsensus.isValidator.call(masterOfCeremony)).should.be.equal(false);\n(await poaNetworkConsensus.isValidator.call(accounts[1])).should.be.equal(true);\n(await poaNetworkConsensus.masterOfCeremony.call()).should.be.equal(accounts[1]);\n(await poaNetworkConsensus.masterOfCeremonyPending.call()).should.be.equal('0x0000000000000000000000000000000000000000');\n(await poaNetworkConsensus.isMasterOfCeremonyRemoved.call()).should.be.equal(false);\n(await poaNetworkConsensus.isMasterOfCeremonyRemovedPending.call()).should.be.equal(false);",
                "err": {},
                "isRoot": false,
                "uuid": "5f550017-e2ef-4841-8f3d-db446f77064f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "fe9c2765-25d7-43ee-8f2d-7d76ee06c2b7",
              "5f550017-e2ef-4841-8f3d-db446f77064f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 525,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "ac2a07f3-8375-41bc-bdfc-39e889216b5e",
            "title": "#removeValidator",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should remove validator",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #removeValidator should remove validator",
                "timedOut": false,
                "duration": 97,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait addValidator(accounts[1], true);\nawait removeValidator(accounts[1], true);",
                "err": {},
                "isRoot": false,
                "uuid": "f265d222-6c2a-497c-b695-9abac459399f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should remove MoC",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #removeValidator should remove MoC",
                "timedOut": false,
                "duration": 235,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\n(await poaNetworkConsensus.isValidator.call(masterOfCeremony)).should.be.equal(true);\n(await poaNetworkConsensus.masterOfCeremony.call()).should.be.equal(masterOfCeremony);\n(await poaNetworkConsensus.isMasterOfCeremonyRemoved.call()).should.be.equal(false);\n(await poaNetworkConsensus.isMasterOfCeremonyRemovedPending.call()).should.be.equal(false);\n(await poaNetworkConsensus.getCurrentValidatorsLength.call()).should.be.bignumber.equal(1);\nawait removeValidator(masterOfCeremony, true);\n(await poaNetworkConsensus.isMasterOfCeremonyRemoved.call()).should.be.equal(false);\n(await poaNetworkConsensus.isMasterOfCeremonyRemovedPending.call()).should.be.equal(true);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensus.getCurrentValidatorsLength.call()).should.be.bignumber.equal(0);\n(await poaNetworkConsensus.isValidator.call(masterOfCeremony)).should.be.equal(false);\n(await poaNetworkConsensus.masterOfCeremony.call()).should.be.equal(masterOfCeremony);\n(await poaNetworkConsensus.isMasterOfCeremonyRemoved.call()).should.be.equal(true);\n(await poaNetworkConsensus.isMasterOfCeremonyRemovedPending.call()).should.be.equal(false);",
                "err": {},
                "isRoot": false,
                "uuid": "a0119be5-df0e-4b4f-b547-d372027ea5f5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should only be called from keys manager",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #removeValidator should only be called from keys manager",
                "timedOut": false,
                "duration": 120,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await removeValidator(accounts[1], false);\nawait proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait addValidator(accounts[1], true);\nawait removeValidator(accounts[1], true);",
                "err": {},
                "isRoot": false,
                "uuid": "831a2d61-4810-45d1-94a8-0e4ef2318541",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should only be allowed to remove from existing set of validators",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #removeValidator should only be allowed to remove from existing set of validators",
                "timedOut": false,
                "duration": 51,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait removeValidator(accounts[1], false);",
                "err": {},
                "isRoot": false,
                "uuid": "2828040d-0193-466c-9b1f-d9a37e06184c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should decrease length of pendingList",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #removeValidator should decrease length of pendingList",
                "timedOut": false,
                "duration": 377,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait addValidator(accounts[1], true);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait addValidator(accounts[2], true);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nlet currentValidatorsLength = await poaNetworkConsensus.getCurrentValidatorsLength.call();\nlet pendingList = [];\nfor(let i = 0; i < currentValidatorsLength; i++){\n  let pending = await poaNetworkConsensus.pendingList.call(i);\n  pendingList.push(pending);\n}\nconst indexOfRemovedElement = pendingList.indexOf(accounts[1]);\npendingList.splice(indexOfRemovedElement, 1);\nconst { logs } = await poaNetworkConsensus.removeValidator(accounts[1],true).should.be.fulfilled;\nlet pendingListFromContract = logs[0].args['newSet'];\npendingListFromContract.length.should.be.equal(currentValidatorsLength.toNumber(10) - 1);\npendingList.should.be.deep.equal(pendingListFromContract);\nlogs[0].event.should.be.equal('InitiateChange');\nconst expected = [masterOfCeremony, accounts[2]];\nexpected.should.be.deep.equal(pendingList);",
                "err": {},
                "isRoot": false,
                "uuid": "66e4c607-2738-4908-b922-1c88615e3e76",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change validatorsState",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #removeValidator should change validatorsState",
                "timedOut": false,
                "duration": 101,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait addValidator(accounts[1], true);\nawait removeValidator(accounts[1], true);\nconst state = await poaNetworkConsensus.validatorsState.call(accounts[1]);\nstate[0].should.be.false;\nstate[2].should.be.bignumber.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "8ed9890a-146b-492e-b9ff-4bca02ee422e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set finalized to false",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #removeValidator should set finalized to false",
                "timedOut": false,
                "duration": 93,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait addValidator(accounts[1], true);\nawait removeValidator(accounts[1], true);\nconst finalized = await poaNetworkConsensus.finalized.call();\nfinalized.should.be.false;",
                "err": {},
                "isRoot": false,
                "uuid": "6485f534-5919-4040-94b6-98b7c0950609",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f265d222-6c2a-497c-b695-9abac459399f",
              "a0119be5-df0e-4b4f-b547-d372027ea5f5",
              "831a2d61-4810-45d1-94a8-0e4ef2318541",
              "2828040d-0193-466c-9b1f-d9a37e06184c",
              "66e4c607-2738-4908-b922-1c88615e3e76",
              "8ed9890a-146b-492e-b9ff-4bca02ee422e",
              "6485f534-5919-4040-94b6-98b7c0950609"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1074,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "a36ae83b-179a-4f4d-a076-2f8b040b9a00",
            "title": "#setProxyStorage",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "can be called by MoC",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage can be called by MoC",
                "timedOut": false,
                "duration": 58,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.setWasProxyStorageSetMock(false);\nawait poaNetworkConsensus.setProxyStorage(accounts[5], {from: accounts[6]}).should.be.rejectedWith(ERROR_MSG);\nawait poaNetworkConsensus.setProxyStorage(accounts[5], {from: masterOfCeremony}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "ed350dde-893f-4c22-94e7-ed2a6a6cd838",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "can be called by owner",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage can be called by owner",
                "timedOut": false,
                "duration": 52,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.setWasProxyStorageSetMock(false);\nawait poaNetworkConsensus.setProxyStorage(accounts[5], {from: accounts[6]}).should.be.rejectedWith(ERROR_MSG);\nawait poaNetworkConsensus.setProxyStorage(accounts[5], {from: accounts[0]}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "b97a5450-0cba-46d8-a4fe-2d80024cbfb9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "can only be called once",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage can only be called once",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// we already call it in the beforeEach block, hence why I expect it to be rejected\nawait poaNetworkConsensus.setProxyStorage(nonOwner, {from: nonOwner}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "22e4234f-2e76-48df-8b93-18f54091e1cc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be set to 0x0 address",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage cannot be set to 0x0 address",
                "timedOut": false,
                "duration": 39,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.setWasProxyStorageSetMock(false);\nawait poaNetworkConsensus.setProxyStorage('0x0000000000000000000000000000000000000000', {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "f767d424-7dd0-4bec-b4bc-0ebfb6d21659",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets proxyStorage",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage sets proxyStorage",
                "timedOut": false,
                "duration": 46,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newProxyStorage = accounts[3];\nawait poaNetworkConsensus.setWasProxyStorageSetMock(false);\nawait poaNetworkConsensus.setProxyStorage(newProxyStorage, {from: masterOfCeremony}).should.be.fulfilled;\n(await poaNetworkConsensus.proxyStorage.call()).should.be.equal(newProxyStorage);",
                "err": {},
                "isRoot": false,
                "uuid": "e2046aac-81ea-4363-88d1-83a307bf9d03",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets wasProxyStorageSet",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage sets wasProxyStorageSet",
                "timedOut": false,
                "duration": 46,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newProxyStorage = accounts[3];\nawait poaNetworkConsensus.setWasProxyStorageSetMock(false);\nawait poaNetworkConsensus.setProxyStorage(newProxyStorage, {from: masterOfCeremony}).should.be.fulfilled;\n(await poaNetworkConsensus.wasProxyStorageSet.call()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "b2c7db2e-ff7b-4457-b436-025cdb9eee7b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "emits MoCInitializedProxyStorage",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage emits MoCInitializedProxyStorage",
                "timedOut": false,
                "duration": 39,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newProxyStorage = accounts[3];\nawait poaNetworkConsensus.setWasProxyStorageSetMock(false);\nconst {logs} = await poaNetworkConsensus.setProxyStorage(newProxyStorage, {from: masterOfCeremony}).should.be.fulfilled;\nlogs[0].event.should.be.equal('MoCInitializedProxyStorage');\nlogs[0].args.proxyStorage.should.be.equal(newProxyStorage);",
                "err": {},
                "isRoot": false,
                "uuid": "c5272606-31f6-4365-8814-675ef26b7dfb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "#getKeysManager",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage #getKeysManager",
                "timedOut": false,
                "duration": 56,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newKeysManager = accounts[3];\nawait poaNetworkConsensus.setWasProxyStorageSetMock(false);\nawait proxyStorageMock.setKeysManagerMock(newKeysManager);\n(await poaNetworkConsensus.getKeysManager.call()).should.be.equal(newKeysManager);",
                "err": {},
                "isRoot": false,
                "uuid": "6315d85d-7f1a-46f6-a152-27d5391830a7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ed350dde-893f-4c22-94e7-ed2a6a6cd838",
              "b97a5450-0cba-46d8-a4fe-2d80024cbfb9",
              "22e4234f-2e76-48df-8b93-18f54091e1cc",
              "f767d424-7dd0-4bec-b4bc-0ebfb6d21659",
              "e2046aac-81ea-4363-88d1-83a307bf9d03",
              "b2c7db2e-ff7b-4457-b436-025cdb9eee7b",
              "c5272606-31f6-4365-8814-675ef26b7dfb",
              "6315d85d-7f1a-46f6-a152-27d5391830a7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 350,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "5b457b68-cc03-444b-bf55-6d15ceb030f1",
            "title": "#isValidator",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns true for validator",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #isValidator returns true for validator",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await poaNetworkConsensus.isValidator.call(masterOfCeremony)).should.be.equal(true);\n(await poaNetworkConsensus.isValidator.call(accounts[2])).should.be.equal(false);",
                "err": {},
                "isRoot": false,
                "uuid": "4f333383-1c6c-4438-b00b-27b9365be3e6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4f333383-1c6c-4438-b00b-27b9365be3e6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 20,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "c057448e-2a33-402e-87b6-5af58f57c3f7",
            "title": "#isValidatorFinalized",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns true for finalized validator",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #isValidatorFinalized returns true for finalized validator",
                "timedOut": false,
                "duration": 1431,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await poaNetworkConsensus.isValidatorFinalized.call(masterOfCeremony)).should.be.equal(true);\n(await poaNetworkConsensus.validatorsState.call(masterOfCeremony))[1].should.be.equal(true);\nfor (let i = 1; i <= 4; i++) {\n  (await poaNetworkConsensus.isValidatorFinalized.call(accounts[i])).should.be.equal(false);\n  (await poaNetworkConsensus.validatorsState.call(accounts[i]))[1].should.be.equal(false);\n}\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensus.finalized.call()).should.be.true;\n(await poaNetworkConsensus.isValidatorFinalized.call(masterOfCeremony)).should.be.equal(true);\n(await poaNetworkConsensus.validatorsState.call(masterOfCeremony))[1].should.be.equal(true);\nfor (let i = 1; i <= 4; i++) {\n  (await poaNetworkConsensus.isValidatorFinalized.call(accounts[i])).should.be.equal(false);\n  (await poaNetworkConsensus.validatorsState.call(accounts[i]))[1].should.be.equal(false);\n}\nfor (let i = 1; i <= 4; i++) {\n  await addValidator(accounts[i], true);\n}\nfor (let i = 1; i <= 4; i++) {\n  (await poaNetworkConsensus.isValidatorFinalized.call(accounts[i])).should.be.equal(false);\n  (await poaNetworkConsensus.validatorsState.call(accounts[i]))[1].should.be.equal(false);\n}\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n\nfor (let i = 1; i <= 4; i++) {\n  (await poaNetworkConsensus.isValidatorFinalized.call(accounts[i])).should.be.equal(true);\n  (await poaNetworkConsensus.validatorsState.call(accounts[i]))[1].should.be.equal(true);\n}\n(await poaNetworkConsensus.getValidators.call()).should.be.deep.equal(\n  await poaNetworkConsensus.getPendingList.call()\n);\n(await poaNetworkConsensus.getValidators.call()).should.be.deep.equal([\n  masterOfCeremony, accounts[1], accounts[2], accounts[3], accounts[4]\n]);\nawait swapValidatorKey(accounts[5], accounts[1], true);\n(await poaNetworkConsensus.getValidators.call()).should.not.be.deep.equal(\n  await poaNetworkConsensus.getPendingList.call()\n);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[1])).should.be.equal(false);\n(await poaNetworkConsensus.validatorsState.call(accounts[1]))[1].should.be.equal(false);\nfor (let i = 2; i <= 4; i++) {\n  (await poaNetworkConsensus.isValidatorFinalized.call(accounts[i])).should.be.equal(true);\n  (await poaNetworkConsensus.validatorsState.call(accounts[i]))[1].should.be.equal(true);\n}\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[5])).should.be.equal(false);\n(await poaNetworkConsensus.validatorsState.call(accounts[5]))[1].should.be.equal(false);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensus.getValidators.call()).should.be.deep.equal(\n  await poaNetworkConsensus.getPendingList.call()\n);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[1])).should.be.equal(false);\n(await poaNetworkConsensus.validatorsState.call(accounts[1]))[1].should.be.equal(false);\nfor (let i = 2; i <= 5; i++) {\n  (await poaNetworkConsensus.isValidatorFinalized.call(accounts[i])).should.be.equal(true);\n  (await poaNetworkConsensus.validatorsState.call(accounts[i]))[1].should.be.equal(true);\n}\nawait removeValidator(accounts[1], false);\nawait removeValidator(accounts[3], true);\n(await poaNetworkConsensus.isValidatorFinalized.call(masterOfCeremony)).should.be.equal(true);\n(await poaNetworkConsensus.validatorsState.call(masterOfCeremony))[1].should.be.equal(true);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[1])).should.be.equal(false);\n(await poaNetworkConsensus.validatorsState.call(accounts[1]))[1].should.be.equal(false);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[2])).should.be.equal(true);\n(await poaNetworkConsensus.validatorsState.call(accounts[2]))[1].should.be.equal(true);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[3])).should.be.equal(false);\n(await poaNetworkConsensus.validatorsState.call(accounts[3]))[1].should.be.equal(false);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[4])).should.be.equal(true);\n(await poaNetworkConsensus.validatorsState.call(accounts[4]))[1].should.be.equal(true);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[5])).should.be.equal(true);\n(await poaNetworkConsensus.validatorsState.call(accounts[5]))[1].should.be.equal(true);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[6])).should.be.equal(false);\n(await poaNetworkConsensus.validatorsState.call(accounts[6]))[1].should.be.equal(false);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensus.isValidatorFinalized.call(masterOfCeremony)).should.be.equal(true);\n(await poaNetworkConsensus.validatorsState.call(masterOfCeremony))[1].should.be.equal(true);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[1])).should.be.equal(false);\n(await poaNetworkConsensus.validatorsState.call(accounts[1]))[1].should.be.equal(false);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[2])).should.be.equal(true);\n(await poaNetworkConsensus.validatorsState.call(accounts[2]))[1].should.be.equal(true);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[3])).should.be.equal(false);\n(await poaNetworkConsensus.validatorsState.call(accounts[3]))[1].should.be.equal(false);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[4])).should.be.equal(true);\n(await poaNetworkConsensus.validatorsState.call(accounts[4]))[1].should.be.equal(true);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[5])).should.be.equal(true);\n(await poaNetworkConsensus.validatorsState.call(accounts[5]))[1].should.be.equal(true);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[6])).should.be.equal(false);\n(await poaNetworkConsensus.validatorsState.call(accounts[6]))[1].should.be.equal(false);\n(await poaNetworkConsensus.getValidators.call()).should.be.deep.equal([\n  masterOfCeremony, accounts[4], accounts[2], accounts[5]\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "d8d63c49-1c25-492a-a7fb-545b207c4c68",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d8d63c49-1c25-492a-a7fb-545b207c4c68"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1431,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "11696d82-4c5b-497b-abba-a9d3f2c64e3b",
        "title": "Contract: ProxyStorage [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/proxy_storage_test.js",
        "file": "/test/proxy_storage_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: ProxyStorage [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 1056,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "be4ab281-dee4-43d0-817d-fec27cd39d9d",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: ProxyStorage [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "59929ffd-9aa5-4e4a-9b46-8801410603ae",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: ProxyStorage [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 942,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "masterOfCeremony = accounts[0];\npoaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony, []);\n\nproxyStorage = await ProxyStorageMock.new();\nproxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorage.address);\nproxyStorage = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorage.init(poaNetworkConsensus.address).should.be.fulfilled;\n(await proxyStorageEternalStorage.getProxyStorage.call()).should.be.equal(\n  proxyStorageEternalStorage.address\n);\nkeysManager = await KeysManager.new();\nkeysManagerEternalStorage = await EternalStorageProxy.new(proxyStorage.address, keysManager.address);\nkeysManager = await KeysManager.at(keysManagerEternalStorage.address);\nvalidatorMetadata = await ValidatorMetadata.new();\nvalidatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorage.address, validatorMetadata.address);\n\nballotsStorage = await BallotsStorage.new();\nballotsEternalStorage = await EternalStorageProxy.new(proxyStorage.address, ballotsStorage.address);\nvotingToChangeKeys = await VotingToChangeKeys.new();\nvotingToChangeKeysEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingToChangeKeys.address);\nvotingToChangeMinThreshold = await VotingToChangeMinThreshold.new();\nvotingToChangeMinThresholdEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingToChangeMinThreshold.address);\nvotingToChangeProxy = await VotingToChangeProxy.new();\nvotingToChangeProxyEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingToChangeProxy.address);\nvotingToManageEmissionFunds = await VotingToManageEmissionFunds.new();\nvotingToManageEmissionFundsEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingToManageEmissionFunds.address);\nrewardByBlock = await RewardByBlock.new();\nrewardByBlockEternalStorage = await EternalStorageProxy.new(proxyStorage.address, rewardByBlock.address);",
            "err": {},
            "isRoot": false,
            "uuid": "3ef81482-b315-4e32-bc12-3e4eb0fec409",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: ProxyStorage [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "e9a568c8-f94f-4276-b31e-65126095be60",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "864183fb-46c1-4bb1-a6b6-c8e0c527ed3d",
            "title": "#constructor",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/proxy_storage_test.js",
            "file": "/test/proxy_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "sets PoA",
                "fullTitle": "Contract: ProxyStorage [all features] #constructor sets PoA",
                "timedOut": false,
                "duration": 27,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "poaNetworkConsensus.address.should.be.equal(\n  await proxyStorage.getPoaConsensus.call()\n);",
                "err": {},
                "isRoot": false,
                "uuid": "78e1c9f8-8539-4585-8b85-4cd43046d88a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "78e1c9f8-8539-4585-8b85-4cd43046d88a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 27,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "2d2c22f4-d598-4c62-b698-5db272c8d3dc",
            "title": "#initializeAddresses",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/proxy_storage_test.js",
            "file": "/test/proxy_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "sets all addresses",
                "fullTitle": "Contract: ProxyStorage [all features] #initializeAddresses sets all addresses",
                "timedOut": false,
                "duration": 184,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeysEternalStorage.address,\n  votingToChangeMinThresholdEternalStorage.address,\n  votingToChangeProxyEternalStorage.address,\n  votingToManageEmissionFundsEternalStorage.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlockEternalStorage.address,\n  {from: accounts[2]}\n).should.be.rejectedWith(ERROR_MSG);\nconst {logs} = await proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeysEternalStorage.address,\n  votingToChangeMinThresholdEternalStorage.address,\n  votingToChangeProxyEternalStorage.address,\n  votingToManageEmissionFundsEternalStorage.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlockEternalStorage.address\n).should.be.fulfilled;\nkeysManagerEternalStorage.address.should.be.equal(\n  await proxyStorage.getKeysManager.call()\n);\nvotingToChangeKeysEternalStorage.address.should.be.equal(\n  await proxyStorage.getVotingToChangeKeys.call()\n);\nvotingToChangeMinThresholdEternalStorage.address.should.be.equal(\n  await proxyStorage.getVotingToChangeMinThreshold.call()\n);\nvotingToChangeProxyEternalStorage.address.should.be.equal(\n  await proxyStorage.getVotingToChangeProxy.call()\n);\nvotingToManageEmissionFundsEternalStorage.address.should.be.equal(\n  await proxyStorage.getVotingToManageEmissionFunds.call()\n);\nballotsEternalStorage.address.should.be.equal(\n  await proxyStorage.getBallotsStorage.call()\n);\nvalidatorMetadataEternalStorage.address.should.be.equal(\n  await proxyStorage.getValidatorMetadata.call()\n);\nrewardByBlockEternalStorage.address.should.be.equal(\n  await proxyStorage.getRewardByBlock.call()\n);\nlogs[0].event.should.be.equal('ProxyInitialized');\nlogs[0].args.keysManagerEternalStorage.should.be.equal(keysManagerEternalStorage.address);\nlogs[0].args.votingToChangeKeysEternalStorage.should.be.equal(votingToChangeKeysEternalStorage.address);\nlogs[0].args.votingToChangeMinThresholdEternalStorage.should.be.equal(votingToChangeMinThresholdEternalStorage.address);\nlogs[0].args.votingToChangeProxyEternalStorage.should.be.equal(votingToChangeProxyEternalStorage.address);\nlogs[0].args.votingToManageEmissionFundsEternalStorage.should.be.equal(votingToManageEmissionFundsEternalStorage.address);\nlogs[0].args.ballotsStorageEternalStorage.should.be.equal(ballotsEternalStorage.address);\nlogs[0].args.validatorMetadataEternalStorage.should.be.equal(validatorMetadataEternalStorage.address);\nlogs[0].args.rewardByBlockEternalStorage.should.be.equal(rewardByBlockEternalStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "06564859-0c11-463b-859e-d28fee364b9f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevents Moc to call it more than once",
                "fullTitle": "Contract: ProxyStorage [all features] #initializeAddresses prevents Moc to call it more than once",
                "timedOut": false,
                "duration": 85,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "false.should.be.equal(await proxyStorage.mocInitialized.call());\nconst {logs} = await proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeysEternalStorage.address,\n  votingToChangeMinThresholdEternalStorage.address,\n  votingToChangeProxyEternalStorage.address,\n  votingToManageEmissionFundsEternalStorage.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlockEternalStorage.address\n).should.be.fulfilled;\ntrue.should.be.equal(await proxyStorage.mocInitialized.call());\nawait proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeysEternalStorage.address,\n  votingToChangeMinThresholdEternalStorage.address,\n  votingToChangeProxyEternalStorage.address,\n  votingToManageEmissionFundsEternalStorage.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlockEternalStorage.address\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "4f76f52b-cc26-44d6-87a8-96b4d0387ccf",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "06564859-0c11-463b-859e-d28fee364b9f",
              "4f76f52b-cc26-44d6-87a8-96b4d0387ccf"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 269,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "61fa4db9-6f40-4c89-9555-c46ebe77a9f0",
            "title": "#setContractAddress",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/proxy_storage_test.js",
            "file": "/test/proxy_storage_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress \"before each\" hook",
                "timedOut": false,
                "duration": 48,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeysEternalStorage.address,\n  votingToChangeMinThresholdEternalStorage.address,\n  votingToChangeProxyEternalStorage.address,\n  votingToManageEmissionFundsEternalStorage.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlockEternalStorage.address,\n  {from: masterOfCeremony}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "b6e75230-5bf7-49df-bdcd-4014f79576e1",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "can only be called from votingToChangeProxy address",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress can only be called from votingToChangeProxy address",
                "timedOut": false,
                "duration": 259,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setContractAddress(1, accounts[2], {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(1, accounts[2], true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "f4c9103f-68d6-407a-896e-28df3dea4aa8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be set to 0x0 address",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress cannot be set to 0x0 address",
                "timedOut": false,
                "duration": 58,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(1, '0x0000000000000000000000000000000000000000', false, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "7fc415ec-381e-4040-8a90-c6ece4071ae8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets keysManager",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress sets keysManager",
                "timedOut": false,
                "duration": 145,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let keysManagerNew = await KeysManager.new();\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(1, keysManagerNew.address, true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\n\nlet eternalProxyAddress = await proxyStorage.getKeysManager.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nkeysManagerNew.address.should.be.equal(\n  await eternalProxy.implementation.call()\n);",
                "err": {},
                "isRoot": false,
                "uuid": "267934bf-8781-48d8-acfa-8e23997149b5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets votingToChangeKeys",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress sets votingToChangeKeys",
                "timedOut": false,
                "duration": 253,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingToChangeKeysNew = await VotingToChangeKeys.new();\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(2, votingToChangeKeysNew.address, true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\n\nlet eternalProxyAddress = await proxyStorage.getVotingToChangeKeys.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nvotingToChangeKeysNew.address.should.be.equal(\n  await eternalProxy.implementation.call()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "3bb2e161-26ea-4b60-b974-157dcb774a53",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets votingToChangeMinThreshold",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress sets votingToChangeMinThreshold",
                "timedOut": false,
                "duration": 153,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingToChangeMinThresholdNew = await VotingToChangeMinThreshold.new();\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(3, votingToChangeMinThresholdNew.address, true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\n\nlet eternalProxyAddress = await proxyStorage.getVotingToChangeMinThreshold.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nvotingToChangeMinThresholdNew.address.should.be.equal(\n  await eternalProxy.implementation.call()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "9bca2300-e87c-40f9-a5b5-2b4d22399416",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets ballotsStorage",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress sets ballotsStorage",
                "timedOut": false,
                "duration": 197,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let ballotsStorageNew = await BallotsStorage.new();\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(5, ballotsStorageNew.address, true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\n\nlet eternalProxyAddress = await proxyStorage.getBallotsStorage.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nballotsStorageNew.address.should.be.equal(\n  await eternalProxy.implementation.call()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "63ca6d5a-4bfb-4b26-b029-600d1767600f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets poaConsensus",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress sets poaConsensus",
                "timedOut": false,
                "duration": 179,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(6, accounts[5], true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\naccounts[5].should.be.equal(\n  await proxyStorage.getPoaConsensus.call()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "b10f125e-bada-46ca-af7b-dbb143150360",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets validatorMetadata",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress sets validatorMetadata",
                "timedOut": false,
                "duration": 159,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let validatorMetadataNew = await ValidatorMetadata.new();\n\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(7, validatorMetadataNew.address, true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\n\nlet eternalProxyAddress = await proxyStorage.getValidatorMetadata.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nvalidatorMetadataNew.address.should.be.equal(\n  await eternalProxy.implementation.call()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "259260c0-ced1-42b4-918e-f8715d146aa9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "changes proxyStorage (itself) implementation",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress changes proxyStorage (itself) implementation",
                "timedOut": false,
                "duration": 148,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const oldVersion = await proxyStorageEternalStorage.version.call();\nconst newVersion = oldVersion.add(1);\nlet proxyStorageNew = await ProxyStorageMock.new();\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(8, proxyStorageNew.address, true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\n\nproxyStorageNew.address.should.be.equal(\n  await proxyStorageEternalStorage.implementation.call()\n);\nnewVersion.should.be.bignumber.equal(\n  await proxyStorageEternalStorage.version.call()\n);",
                "err": {},
                "isRoot": false,
                "uuid": "142f7fff-6f4e-4024-9b9e-950e03fce793",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f4c9103f-68d6-407a-896e-28df3dea4aa8",
              "7fc415ec-381e-4040-8a90-c6ece4071ae8",
              "267934bf-8781-48d8-acfa-8e23997149b5",
              "3bb2e161-26ea-4b60-b974-157dcb774a53",
              "9bca2300-e87c-40f9-a5b5-2b4d22399416",
              "63ca6d5a-4bfb-4b26-b029-600d1767600f",
              "b10f125e-bada-46ca-af7b-dbb143150360",
              "259260c0-ced1-42b4-918e-f8715d146aa9",
              "142f7fff-6f4e-4024-9b9e-950e03fce793"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1551,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "5f14e7e5-9dd9-467a-bdf5-6ab886db4d7a",
            "title": "#upgradeTo",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/proxy_storage_test.js",
            "file": "/test/proxy_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by ProxyStorage (itself)",
                "fullTitle": "Contract: ProxyStorage [all features] #upgradeTo may only be called by ProxyStorage (itself)",
                "timedOut": false,
                "duration": 239,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const proxyStorageNew = await ProxyStorageNew.new();\n(await proxyStorageEternalStorage.getProxyStorage.call()).should.be.equal(\n  proxyStorageEternalStorage.address\n);\nawait proxyStorageEternalStorage.upgradeTo(proxyStorageNew.address, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);\nawait proxyStorageEternalStorage.setProxyStorage(accounts[0]);\nawait upgradeTo(proxyStorageNew.address, {from: accounts[0]});\n(await proxyStorageEternalStorage.implementation.call()).should.be.equal(\n  proxyStorageNew.address\n);",
                "err": {},
                "isRoot": false,
                "uuid": "9eba8b10-ed1d-4a32-83c5-79a23aa58959",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change implementation address",
                "fullTitle": "Contract: ProxyStorage [all features] #upgradeTo should change implementation address",
                "timedOut": false,
                "duration": 127,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const proxyStorageNew = await ProxyStorageNew.new();\nawait proxyStorageEternalStorage.setProxyStorage(accounts[0]);\nawait upgradeTo(proxyStorageNew.address, {from: accounts[0]});\nawait proxyStorageEternalStorage.setProxyStorage(proxyStorageEternalStorage.address);\n(await proxyStorageEternalStorage.implementation.call()).should.be.equal(\n  proxyStorageNew.address\n);",
                "err": {},
                "isRoot": false,
                "uuid": "fa18a3b2-549d-40aa-addc-8fc1cafe8528",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment implementation version",
                "fullTitle": "Contract: ProxyStorage [all features] #upgradeTo should increment implementation version",
                "timedOut": false,
                "duration": 136,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proxyStorageNew = await ProxyStorageNew.new();\nconst oldVersion = await proxyStorageEternalStorage.version.call();\nconst newVersion = oldVersion.add(1);\nawait proxyStorageEternalStorage.setProxyStorage(accounts[0]);\nawait upgradeTo(proxyStorageNew.address, {from: accounts[0]});\nawait proxyStorageEternalStorage.setProxyStorage(proxyStorageEternalStorage.address);\n(await proxyStorageEternalStorage.version.call()).should.be.bignumber.equal(newVersion);",
                "err": {},
                "isRoot": false,
                "uuid": "7cbbc086-24e7-4fc2-8dc3-9b74cc29b957",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should work",
                "fullTitle": "Contract: ProxyStorage [all features] #upgradeTo new implementation should work",
                "timedOut": false,
                "duration": 193,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proxyStorageNew = await ProxyStorageNew.new();\nawait proxyStorageEternalStorage.setProxyStorage(accounts[0]);\nawait upgradeTo(proxyStorageNew.address, {from: accounts[0]});\nawait proxyStorageEternalStorage.setProxyStorage(proxyStorageEternalStorage.address);\nproxyStorageNew = await ProxyStorageNew.at(proxyStorageEternalStorage.address);\n(await proxyStorageNew.initialized.call()).should.be.equal(false);\nawait proxyStorageNew.initialize();\n(await proxyStorageNew.initialized.call()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "49d43f58-def3-426c-9650-d34f172b1a1d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same storage",
                "fullTitle": "Contract: ProxyStorage [all features] #upgradeTo new implementation should use the same storage",
                "timedOut": false,
                "duration": 137,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proxyStorageNew = await ProxyStorageNew.new();\nawait proxyStorageEternalStorage.setProxyStorage(accounts[0]);\nawait upgradeTo(proxyStorageNew.address, {from: accounts[0]});\nawait proxyStorageEternalStorage.setProxyStorage(proxyStorageEternalStorage.address);\nproxyStorageNew = await ProxyStorageNew.at(proxyStorageEternalStorage.address);\n(await proxyStorageNew.getPoaConsensus.call()).should.be.equal(poaNetworkConsensus.address);",
                "err": {},
                "isRoot": false,
                "uuid": "ba1ada00-b512-4377-a80e-9833a65197d9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9eba8b10-ed1d-4a32-83c5-79a23aa58959",
              "fa18a3b2-549d-40aa-addc-8fc1cafe8528",
              "7cbbc086-24e7-4fc2-8dc3-9b74cc29b957",
              "49d43f58-def3-426c-9650-d34f172b1a1d",
              "ba1ada00-b512-4377-a80e-9833a65197d9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 832,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "46c53f6d-8e0a-4220-aa20-f5d3d125bde8",
        "title": "Contract: ProxyStorage upgraded [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/proxy_storage_upgrade_test.js",
        "file": "/test/proxy_storage_upgrade_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: ProxyStorage upgraded [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 1545,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "be1ceb62-ac9c-461a-ab46-b2aadf659ea4",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: ProxyStorage upgraded [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "0437b712-1684-4fea-b73c-aed78cf2725d",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: ProxyStorage upgraded [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 961,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "masterOfCeremony = accounts[0];\npoaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony, []);\n\nproxyStorage = await ProxyStorageMock.new();\nproxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorage.address);\nproxyStorage = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorage.init(poaNetworkConsensus.address).should.be.fulfilled;\n(await proxyStorageEternalStorage.getProxyStorage.call()).should.be.equal(\n  proxyStorageEternalStorage.address\n);\nconst proxyStorageNew = await ProxyStorageNew.new();\nawait proxyStorageEternalStorage.setProxyStorage(accounts[6]);\nconst {logs} = await proxyStorageEternalStorage.upgradeTo(proxyStorageNew.address, {from: accounts[6]});\nlogs[0].event.should.be.equal(\"Upgraded\");\nawait proxyStorageEternalStorage.setProxyStorage(proxyStorageEternalStorage.address);\nproxyStorage = await ProxyStorageNew.at(proxyStorageEternalStorage.address);\nkeysManager = await KeysManager.new();\nkeysManagerEternalStorage = await EternalStorageProxy.new(proxyStorage.address, keysManager.address);\nkeysManager = await KeysManager.at(keysManagerEternalStorage.address);\nvalidatorMetadata = await ValidatorMetadata.new();\nvalidatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorage.address, validatorMetadata.address);\n\nballotsStorage = await BallotsStorage.new();\nballotsEternalStorage = await EternalStorageProxy.new(proxyStorage.address, ballotsStorage.address);\nvotingToChangeKeys = await VotingToChangeKeys.new();\nvotingToChangeKeysEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingToChangeKeys.address);\nvotingToChangeMinThreshold = await VotingToChangeMinThreshold.new();\nvotingToChangeMinThresholdEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingToChangeMinThreshold.address);\nvotingToChangeProxy = await VotingToChangeProxy.new();\nvotingToChangeProxyEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingToChangeProxy.address);\nvotingToManageEmissionFunds = await VotingToManageEmissionFunds.new();\nvotingToManageEmissionFundsEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingToManageEmissionFunds.address);\nrewardByBlock = await RewardByBlock.new();\nrewardByBlockEternalStorage = await EternalStorageProxy.new(proxyStorage.address, rewardByBlock.address);",
            "err": {},
            "isRoot": false,
            "uuid": "2748463a-70db-44c1-abcb-d7a415180179",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: ProxyStorage upgraded [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "d55af65f-e5df-439f-85b7-6e626c18e69b",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "4ee46b6a-e2d5-41a9-9c54-faf27b28e17b",
            "title": "#constructor",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/proxy_storage_upgrade_test.js",
            "file": "/test/proxy_storage_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "sets PoA",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #constructor sets PoA",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "poaNetworkConsensus.address.should.be.equal(\n  await proxyStorage.getPoaConsensus.call()\n);",
                "err": {},
                "isRoot": false,
                "uuid": "06493542-7709-444f-962a-942d9ba59748",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "06493542-7709-444f-962a-942d9ba59748"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 15,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "5d28476f-96b7-4ae8-833a-f918cd34c0b9",
            "title": "#initializeAddresses",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/proxy_storage_upgrade_test.js",
            "file": "/test/proxy_storage_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "sets all addresses",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #initializeAddresses sets all addresses",
                "timedOut": false,
                "duration": 154,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeysEternalStorage.address,\n  votingToChangeMinThresholdEternalStorage.address,\n  votingToChangeProxyEternalStorage.address,\n  votingToManageEmissionFundsEternalStorage.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlockEternalStorage.address,\n  {from: accounts[2]}\n).should.be.rejectedWith(ERROR_MSG);\nconst {logs} = await proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeysEternalStorage.address,\n  votingToChangeMinThresholdEternalStorage.address,\n  votingToChangeProxyEternalStorage.address,\n  votingToManageEmissionFundsEternalStorage.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlockEternalStorage.address\n).should.be.fulfilled;\nkeysManagerEternalStorage.address.should.be.equal(\n  await proxyStorage.getKeysManager.call()\n);\nvotingToChangeKeysEternalStorage.address.should.be.equal(\n  await proxyStorage.getVotingToChangeKeys.call()\n);\nvotingToChangeMinThresholdEternalStorage.address.should.be.equal(\n  await proxyStorage.getVotingToChangeMinThreshold.call()\n);\nvotingToChangeProxyEternalStorage.address.should.be.equal(\n  await proxyStorage.getVotingToChangeProxy.call()\n);\nvotingToManageEmissionFundsEternalStorage.address.should.be.equal(\n  await proxyStorage.getVotingToManageEmissionFunds.call()\n);\nballotsEternalStorage.address.should.be.equal(\n  await proxyStorage.getBallotsStorage.call()\n);\nvalidatorMetadataEternalStorage.address.should.be.equal(\n  await proxyStorage.getValidatorMetadata.call()\n);\nrewardByBlockEternalStorage.address.should.be.equal(\n  await proxyStorage.getRewardByBlock.call()\n);\nlogs[0].event.should.be.equal('ProxyInitialized');\nlogs[0].args.keysManagerEternalStorage.should.be.equal(keysManagerEternalStorage.address);\nlogs[0].args.votingToChangeKeysEternalStorage.should.be.equal(votingToChangeKeysEternalStorage.address);\nlogs[0].args.votingToChangeMinThresholdEternalStorage.should.be.equal(votingToChangeMinThresholdEternalStorage.address);\nlogs[0].args.votingToChangeProxyEternalStorage.should.be.equal(votingToChangeProxyEternalStorage.address);\nlogs[0].args.votingToManageEmissionFundsEternalStorage.should.be.equal(votingToManageEmissionFundsEternalStorage.address);\nlogs[0].args.ballotsStorageEternalStorage.should.be.equal(ballotsEternalStorage.address);\nlogs[0].args.validatorMetadataEternalStorage.should.be.equal(validatorMetadataEternalStorage.address);\nlogs[0].args.rewardByBlockEternalStorage.should.be.equal(rewardByBlockEternalStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "5d110e7d-692c-4d50-b85d-c7fe1f6533ca",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevents Moc to call it more than once",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #initializeAddresses prevents Moc to call it more than once",
                "timedOut": false,
                "duration": 94,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "false.should.be.equal(await proxyStorage.mocInitialized.call());\nconst {logs} = await proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeysEternalStorage.address,\n  votingToChangeMinThresholdEternalStorage.address,\n  votingToChangeProxyEternalStorage.address,\n  votingToManageEmissionFundsEternalStorage.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlockEternalStorage.address\n).should.be.fulfilled;\ntrue.should.be.equal(await proxyStorage.mocInitialized.call());\nawait proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeysEternalStorage.address,\n  votingToChangeMinThresholdEternalStorage.address,\n  votingToChangeProxyEternalStorage.address,\n  votingToManageEmissionFundsEternalStorage.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlockEternalStorage.address\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "72910d8c-d6e1-4498-8bf5-f7fa8b2495d7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5d110e7d-692c-4d50-b85d-c7fe1f6533ca",
              "72910d8c-d6e1-4498-8bf5-f7fa8b2495d7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 248,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "6bb70fb9-040e-4c9d-8b10-18f8f068a0e4",
            "title": "#setContractAddress",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/proxy_storage_upgrade_test.js",
            "file": "/test/proxy_storage_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #setContractAddress \"before each\" hook",
                "timedOut": false,
                "duration": 53,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeysEternalStorage.address,\n  votingToChangeMinThresholdEternalStorage.address,\n  votingToChangeProxyEternalStorage.address,\n  votingToManageEmissionFundsEternalStorage.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlockEternalStorage.address,\n  {from: masterOfCeremony}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "c05255bc-d802-4aa9-95df-3e43337c94b1",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "can only be called from votingToChangeProxy address",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #setContractAddress can only be called from votingToChangeProxy address",
                "timedOut": false,
                "duration": 94,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setContractAddress(1, accounts[2], {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(1, accounts[2], true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "311d203a-765b-4156-ae99-06eb35368675",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be set to 0x0 address",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #setContractAddress cannot be set to 0x0 address",
                "timedOut": false,
                "duration": 70,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(1, '0x0000000000000000000000000000000000000000', false, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "0161fea0-a39e-4955-a7e0-4f411d698848",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets keysManager",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #setContractAddress sets keysManager",
                "timedOut": false,
                "duration": 162,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let keysManagerNew = await KeysManager.new();\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(1, keysManagerNew.address, true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\n\nlet eternalProxyAddress = await proxyStorage.getKeysManager.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nkeysManagerNew.address.should.be.equal(\n  await eternalProxy.implementation.call()\n);",
                "err": {},
                "isRoot": false,
                "uuid": "e2ccf3a6-5fd0-453e-bd94-45754294af28",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets votingToChangeKeys",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #setContractAddress sets votingToChangeKeys",
                "timedOut": false,
                "duration": 147,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingToChangeKeysNew = await VotingToChangeKeys.new();\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(2, votingToChangeKeysNew.address, true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\n\nlet eternalProxyAddress = await proxyStorage.getVotingToChangeKeys.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nvotingToChangeKeysNew.address.should.be.equal(\n  await eternalProxy.implementation.call()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "f5e741e3-8515-4ac9-8e7b-0926d0c847e6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets votingToChangeMinThreshold",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #setContractAddress sets votingToChangeMinThreshold",
                "timedOut": false,
                "duration": 157,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingToChangeMinThresholdNew = await VotingToChangeMinThreshold.new();\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(3, votingToChangeMinThresholdNew.address, true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\n\nlet eternalProxyAddress = await proxyStorage.getVotingToChangeMinThreshold.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nvotingToChangeMinThresholdNew.address.should.be.equal(\n  await eternalProxy.implementation.call()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "f6e1ae89-3609-4511-8258-670879a839d6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets ballotsStorage",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #setContractAddress sets ballotsStorage",
                "timedOut": false,
                "duration": 134,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let ballotsStorageNew = await BallotsStorage.new();\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(5, ballotsStorageNew.address, true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\n\nlet eternalProxyAddress = await proxyStorage.getBallotsStorage.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nballotsStorageNew.address.should.be.equal(\n  await eternalProxy.implementation.call()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "101b0e3a-1ea2-4324-83e1-6aa3141ce2b9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets poaConsensus",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #setContractAddress sets poaConsensus",
                "timedOut": false,
                "duration": 82,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(6, accounts[5], true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\naccounts[5].should.be.equal(\n  await proxyStorage.getPoaConsensus.call()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "98cf4b14-2087-4dad-a941-2f461edf48f4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets validatorMetadata",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #setContractAddress sets validatorMetadata",
                "timedOut": false,
                "duration": 153,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let validatorMetadataNew = await ValidatorMetadata.new();\n\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(7, validatorMetadataNew.address, true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\n\nlet eternalProxyAddress = await proxyStorage.getValidatorMetadata.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nvalidatorMetadataNew.address.should.be.equal(\n  await eternalProxy.implementation.call()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "04bbcd54-ce70-4674-b927-3934374fa6a1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "changes proxyStorage (itself) implementation",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #setContractAddress changes proxyStorage (itself) implementation",
                "timedOut": false,
                "duration": 154,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const oldVersion = await proxyStorageEternalStorage.version.call();\nconst newVersion = oldVersion.add(1);\nlet proxyStorageNew = await ProxyStorageMock.new();\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(8, proxyStorageNew.address, true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\n\nproxyStorageNew.address.should.be.equal(\n  await proxyStorageEternalStorage.implementation.call()\n);\nnewVersion.should.be.bignumber.equal(\n  await proxyStorageEternalStorage.version.call()\n);",
                "err": {},
                "isRoot": false,
                "uuid": "1be17557-3ebf-4575-b2ef-7d61c22158d0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "311d203a-765b-4156-ae99-06eb35368675",
              "0161fea0-a39e-4955-a7e0-4f411d698848",
              "e2ccf3a6-5fd0-453e-bd94-45754294af28",
              "f5e741e3-8515-4ac9-8e7b-0926d0c847e6",
              "f6e1ae89-3609-4511-8258-670879a839d6",
              "101b0e3a-1ea2-4324-83e1-6aa3141ce2b9",
              "98cf4b14-2087-4dad-a941-2f461edf48f4",
              "04bbcd54-ce70-4674-b927-3934374fa6a1",
              "1be17557-3ebf-4575-b2ef-7d61c22158d0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1153,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "dc375028-965f-49ed-b898-38e441e032d1",
        "title": "Contract: RewardByBlock [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/reward_by_block_test.js",
        "file": "/test/reward_by_block_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: RewardByBlock [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 1419,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "2c6f99ba-a1e5-433d-96ef-139d5a0b5aeb",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: RewardByBlock [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "8b51d676-3af7-4a61-8180-2875a6232992",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: RewardByBlock [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 1011,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "coinbase = accounts[0];\nmasterOfCeremony = accounts[0];\nminingKey = accounts[1];\nminingKey2 = accounts[2];\nminingKey3 = accounts[3];\npayoutKey = accounts[4];\npayoutKey2 = accounts[5];\npayoutKey3 = accounts[6];\nsystemAddress = accounts[7];\nvotingToChangeKeys = accounts[9];\npoaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony, []);\nproxyStorage = await ProxyStorage.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorage.address);\nproxyStorage = await ProxyStorage.at(proxyStorageEternalStorage.address);\nawait proxyStorage.init(poaNetworkConsensus.address).should.be.fulfilled;\nawait poaNetworkConsensus.setProxyStorage(proxyStorage.address);\nkeysManager = await KeysManager.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorage.address, keysManager.address);\nkeysManager = await KeysManager.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorage.address, validatorMetadata.address);\nawait proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeys,\n  accounts[9],\n  accounts[9],\n  accounts[9],\n  accounts[9],\n  validatorMetadataEternalStorage.address,\n  accounts[9]\n);\nawait addMiningKey(miningKey);\nawait addMiningKey(miningKey2);\nawait addMiningKey(miningKey3);\nawait addPayoutKey(payoutKey, miningKey);\nawait addPayoutKey(payoutKey2, miningKey2);\nawait addPayoutKey(payoutKey3, miningKey3);\nawait poaNetworkConsensus.setSystemAddress(coinbase);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress('0xffffFFFfFFffffffffffffffFfFFFfffFFFfFFfE');\nrewardByBlock = await RewardByBlock.new();\nrewardByBlockOldImplementation = rewardByBlock.address;\nrewardByBlockEternalStorage = await EternalStorageProxy.new(proxyStorage.address, rewardByBlock.address);\nrewardByBlock = await RewardByBlock.at(rewardByBlockEternalStorage.address);\nblockRewardAmount = web3.toWei(1, 'ether');\nemissionFundsAmount = web3.toWei(1, 'ether');\nemissionFundsAddress = '0x0000000000000000000000000000000000000000';",
            "err": {},
            "isRoot": false,
            "uuid": "bb06166a-bd0b-497a-bca2-a391bdac5144",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: RewardByBlock [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "94559937-f789-4331-860a-286ca97e58d4",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "ba4da9f3-8401-4a32-bd58-3ad7a0a881c2",
            "title": "#reward",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/reward_by_block_test.js",
            "file": "/test/reward_by_block_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by system address",
                "fullTitle": "Contract: RewardByBlock [all features] #reward may only be called by system address",
                "timedOut": false,
                "duration": 118,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.reward([miningKey], [0]).should.be.rejectedWith(ERROR_MSG);\nawait rewardByBlock.setSystemAddress(systemAddress);\nawait rewardByBlock.reward([miningKey], [0], {from: systemAddress}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "f968fb1b-ac00-42fc-8ed6-e058dc340b19",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should revert if input array contains more than one item",
                "fullTitle": "Contract: RewardByBlock [all features] #reward should revert if input array contains more than one item",
                "timedOut": false,
                "duration": 36,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.setSystemAddress(systemAddress);\nawait rewardByBlock.reward(\n  [miningKey, miningKey2],\n  [0, 0],\n  {from: systemAddress}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "6e2c89f5-ddf8-4e3d-aa31-a1065e9985cb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should revert if lengths of input arrays are not equal",
                "fullTitle": "Contract: RewardByBlock [all features] #reward should revert if lengths of input arrays are not equal",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.setSystemAddress(systemAddress);\nawait rewardByBlock.reward(\n  [miningKey],\n  [0, 0],\n  {from: systemAddress}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "91d35ca6-5622-455b-b68e-6da4e07d0ac7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should revert if `kind` parameter is not 0",
                "fullTitle": "Contract: RewardByBlock [all features] #reward should revert if `kind` parameter is not 0",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.setSystemAddress(systemAddress);\nawait rewardByBlock.reward(\n  [miningKey],\n  [1],\n  {from: systemAddress}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "10ee50c2-b9ad-46f1-9b65-09bc49638308",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should revert if mining key does not exist",
                "fullTitle": "Contract: RewardByBlock [all features] #reward should revert if mining key does not exist",
                "timedOut": false,
                "duration": 271,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await keysManager.removeMiningKey(miningKey3, {from: votingToChangeKeys});\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nawait rewardByBlock.setSystemAddress(systemAddress);\nawait rewardByBlock.reward(\n  [miningKey3],\n  [0],\n  {from: systemAddress}\n).should.be.rejectedWith(ERROR_MSG);\nawait rewardByBlock.reward(\n  [miningKey2],\n  [0],\n  {from: systemAddress}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "f95efa76-94b4-4e3a-9f2b-29a374db7210",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assign rewards to payout key and EmissionFunds",
                "fullTitle": "Contract: RewardByBlock [all features] #reward should assign rewards to payout key and EmissionFunds",
                "timedOut": false,
                "duration": 1111,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await rewardByBlock.mintedForAccount.call(payoutKey)).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedForAccount.call(emissionFundsAddress)).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedForAccountInBlock.call(payoutKey, web3.eth.blockNumber)).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedForAccountInBlock.call(emissionFundsAddress, web3.eth.blockNumber)).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedInBlock.call(web3.eth.blockNumber)).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotally.call()).should.be.bignumber.equal(0);\nawait rewardByBlock.setSystemAddress(systemAddress);\nconst {logs} = await rewardByBlock.reward(\n  [miningKey],\n  [0],\n  {from: systemAddress}\n).should.be.fulfilled;\nlogs[0].event.should.be.equal('Rewarded');\nlogs[0].args.receivers.should.be.deep.equal([payoutKey, emissionFundsAddress]);\nlogs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nlogs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\n(await rewardByBlock.mintedForAccount.call(payoutKey)).should.be.bignumber.equal(blockRewardAmount);\n(await rewardByBlock.mintedForAccount.call(emissionFundsAddress)).should.be.bignumber.equal(emissionFundsAmount);\n(await rewardByBlock.mintedForAccountInBlock.call(payoutKey, web3.eth.blockNumber)).should.be.bignumber.equal(blockRewardAmount);\n(await rewardByBlock.mintedForAccountInBlock.call(emissionFundsAddress, web3.eth.blockNumber)).should.be.bignumber.equal(emissionFundsAmount);\nconst totalMinted = web3.toBigNumber(blockRewardAmount).plus(emissionFundsAmount);\n(await rewardByBlock.mintedInBlock.call(web3.eth.blockNumber)).should.be.bignumber.equal(totalMinted);\n(await rewardByBlock.mintedTotally.call()).should.be.bignumber.equal(totalMinted);",
                "err": {},
                "isRoot": false,
                "uuid": "1c5e4971-adac-4fd7-a822-a23030249331",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assign reward to mining key if payout key is 0",
                "fullTitle": "Contract: RewardByBlock [all features] #reward should assign reward to mining key if payout key is 0",
                "timedOut": false,
                "duration": 164,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = await keysManager.removePayoutKey(\n  miningKey,\n  {from: votingToChangeKeys}\n);\nresult.logs[0].event.should.be.equal(\"PayoutKeyChanged\");\nawait rewardByBlock.setSystemAddress(systemAddress);\nconst {logs} = await rewardByBlock.reward(\n  [miningKey],\n  [0],\n  {from: systemAddress}\n).should.be.fulfilled;\nlogs[0].event.should.be.equal('Rewarded');\nlogs[0].args.receivers.should.be.deep.equal([miningKey, emissionFundsAddress]);\nlogs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nlogs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());",
                "err": {},
                "isRoot": false,
                "uuid": "18b0f630-e643-44a6-a0fc-98b2896bc916",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assign rewards to extra receivers and clear extra receivers list",
                "fullTitle": "Contract: RewardByBlock [all features] #reward should assign rewards to extra receivers and clear extra receivers list",
                "timedOut": false,
                "duration": 1583,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await rewardByBlock.bridgeAmount.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[3])).should.be.bignumber.equal(0);\nawait rewardByBlock.addExtraReceiver(2, accounts[2], {from: accounts[1]}).should.be.fulfilled;\nawait rewardByBlock.addExtraReceiver(3, accounts[3], {from: accounts[1]}).should.be.fulfilled;\n(await rewardByBlock.bridgeAmount.call(accounts[1])).should.be.bignumber.equal(5);\n(await rewardByBlock.bridgeAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[3])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[3])).should.be.bignumber.equal(0);\nawait rewardByBlock.setSystemAddress(systemAddress);\nlet result = await rewardByBlock.reward(\n  [miningKey],\n  [0],\n  {from: systemAddress}\n).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([payoutKey, emissionFundsAddress, accounts[2], accounts[3]]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\nresult.logs[0].args.rewards[2].toString().should.be.equal('2');\nresult.logs[0].args.rewards[3].toString().should.be.equal('3');\n(await rewardByBlock.extraReceiverAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.extraReceiverAmount.call(accounts[3])).should.be.bignumber.equal(0);\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[3])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[1])).should.be.bignumber.equal(5);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[3])).should.be.bignumber.equal(0);\nawait rewardByBlock.addExtraReceiver(2, accounts[2], {from: accounts[1]}).should.be.fulfilled;\nawait rewardByBlock.addExtraReceiver(3, accounts[3], {from: accounts[1]}).should.be.fulfilled;\nresult = await rewardByBlock.reward(\n  [miningKey],\n  [0],\n  {from: systemAddress}\n).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([payoutKey, emissionFundsAddress, accounts[2], accounts[3]]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\nresult.logs[0].args.rewards[2].toString().should.be.equal('2');\nresult.logs[0].args.rewards[3].toString().should.be.equal('3');\n(await rewardByBlock.extraReceiverAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.extraReceiverAmount.call(accounts[3])).should.be.bignumber.equal(0);\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[1])).should.be.bignumber.equal(10);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[3])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedForAccount.call(payoutKey)).should.be.bignumber.equal(blockRewardAmount * 2);\n(await rewardByBlock.mintedForAccount.call(emissionFundsAddress)).should.be.bignumber.equal(emissionFundsAmount * 2);\n(await rewardByBlock.mintedForAccount.call(accounts[2])).should.be.bignumber.equal(4);\n(await rewardByBlock.mintedForAccount.call(accounts[3])).should.be.bignumber.equal(6);\n\n(await rewardByBlock.mintedForAccountInBlock.call(payoutKey, web3.eth.blockNumber)).should.be.bignumber.equal(blockRewardAmount);\n(await rewardByBlock.mintedForAccountInBlock.call(emissionFundsAddress, web3.eth.blockNumber)).should.be.bignumber.equal(emissionFundsAmount);\n(await rewardByBlock.mintedForAccountInBlock.call(accounts[2], web3.eth.blockNumber)).should.be.bignumber.equal(2);\n(await rewardByBlock.mintedForAccountInBlock.call(accounts[3], web3.eth.blockNumber)).should.be.bignumber.equal(3);\n\n(await rewardByBlock.mintedInBlock.call(web3.eth.blockNumber)).should.be.bignumber.equal(\n  web3.toBigNumber(blockRewardAmount).plus(emissionFundsAmount).plus(2).plus(3)\n);\n(await rewardByBlock.mintedTotally.call()).should.be.bignumber.equal(\n  web3.toBigNumber(blockRewardAmount).plus(emissionFundsAmount).plus(2).plus(3).mul(2)\n);",
                "err": {},
                "isRoot": false,
                "uuid": "c8d72d0b-eee1-4ee5-957d-8f878284789e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f968fb1b-ac00-42fc-8ed6-e058dc340b19",
              "6e2c89f5-ddf8-4e3d-aa31-a1065e9985cb",
              "91d35ca6-5622-455b-b68e-6da4e07d0ac7",
              "10ee50c2-b9ad-46f1-9b65-09bc49638308",
              "f95efa76-94b4-4e3a-9f2b-29a374db7210",
              "1c5e4971-adac-4fd7-a822-a23030249331",
              "18b0f630-e643-44a6-a0fc-98b2896bc916",
              "c8d72d0b-eee1-4ee5-957d-8f878284789e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3348,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "55809eb2-8ab0-4d8f-9157-a530e92ae56e",
            "title": "#addExtraReceiver",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/reward_by_block_test.js",
            "file": "/test/reward_by_block_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by bridge contract",
                "fullTitle": "Contract: RewardByBlock [all features] #addExtraReceiver may only be called by bridge contract",
                "timedOut": false,
                "duration": 57,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.addExtraReceiver(1, accounts[1]).should.be.rejectedWith(ERROR_MSG);\nawait rewardByBlock.addExtraReceiver(1, accounts[1], {from: accounts[2]}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "fb2d9fac-4fe4-4cf4-a806-cf4b12e3ea37",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should revert if receiver address is 0x0",
                "fullTitle": "Contract: RewardByBlock [all features] #addExtraReceiver should revert if receiver address is 0x0",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.addExtraReceiver(\n  1,\n  '0x0000000000000000000000000000000000000000',\n  {from: accounts[2]}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "79d28466-b22d-4e96-bcdc-839f605758fb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should revert if amount is 0",
                "fullTitle": "Contract: RewardByBlock [all features] #addExtraReceiver should revert if amount is 0",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.addExtraReceiver(\n  0,\n  accounts[1],\n  {from: accounts[2]}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "110f1924-5e6c-451e-b7c9-46cf0c097ae7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "can be called repeatedly for the same recipient",
                "fullTitle": "Contract: RewardByBlock [all features] #addExtraReceiver can be called repeatedly for the same recipient",
                "timedOut": false,
                "duration": 535,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await rewardByBlock.bridgeAmount.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[3])).should.be.bignumber.equal(0);\nawait rewardByBlock.addExtraReceiver(\n  1,\n  accounts[1],\n  {from: accounts[2]}\n).should.be.fulfilled;\nawait rewardByBlock.addExtraReceiver(\n  2,\n  accounts[1],\n  {from: accounts[3]}\n).should.be.fulfilled;\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(1);\n(await rewardByBlock.extraReceiverByIndex.call(0)).should.be.equal(accounts[1]);\n(await rewardByBlock.extraReceiverAmount.call(accounts[1])).should.be.bignumber.equal(3);\n(await rewardByBlock.bridgeAmount.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[2])).should.be.bignumber.equal(1);\n(await rewardByBlock.bridgeAmount.call(accounts[3])).should.be.bignumber.equal(2);\nawait rewardByBlock.setSystemAddress(systemAddress);\nconst result = await rewardByBlock.reward(\n  [miningKey],\n  [0],\n  {from: systemAddress}\n).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([payoutKey, emissionFundsAddress, accounts[1]]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\nresult.logs[0].args.rewards[2].toString().should.be.equal('3');\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(0);\n(await rewardByBlock.extraReceiverAmount.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[3])).should.be.bignumber.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "38ae8231-fd18-47d5-aa55-ce1ab18d54dd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should add receivers",
                "fullTitle": "Contract: RewardByBlock [all features] #addExtraReceiver should add receivers",
                "timedOut": false,
                "duration": 208,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await rewardByBlock.extraReceiverAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(0);\nlet result = await rewardByBlock.addExtraReceiver(2, accounts[2], {from: accounts[1]}).should.be.fulfilled;\n(await rewardByBlock.extraReceiverByIndex.call(0)).should.be.equal(accounts[2]);\n(await rewardByBlock.extraReceiverAmount.call(accounts[2])).should.be.bignumber.equal(2);\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(1);\nresult.logs[0].event.should.be.equal('AddedReceiver');\nresult.logs[0].args.receiver.should.be.equal(accounts[2]);\nresult.logs[0].args.amount.should.be.bignumber.equal(2);\nresult.logs[0].args.bridge.should.be.equal(accounts[1]);\nresult = await rewardByBlock.addExtraReceiver(3, accounts[3], {from: accounts[1]}).should.be.fulfilled;\n(await rewardByBlock.extraReceiverByIndex.call(0)).should.be.equal(accounts[2]);\n(await rewardByBlock.extraReceiverByIndex.call(1)).should.be.equal(accounts[3]);\n(await rewardByBlock.extraReceiverAmount.call(accounts[2])).should.be.bignumber.equal(2);\n(await rewardByBlock.extraReceiverAmount.call(accounts[3])).should.be.bignumber.equal(3);\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(2);\nresult.logs[0].event.should.be.equal('AddedReceiver');\nresult.logs[0].args.receiver.should.be.equal(accounts[3]);\nresult.logs[0].args.amount.should.be.bignumber.equal(3);\nresult.logs[0].args.bridge.should.be.equal(accounts[1]);",
                "err": {},
                "isRoot": false,
                "uuid": "586c0c58-5573-4c5f-a3e5-9a924f994ec9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "fb2d9fac-4fe4-4cf4-a806-cf4b12e3ea37",
              "79d28466-b22d-4e96-bcdc-839f605758fb",
              "110f1924-5e6c-451e-b7c9-46cf0c097ae7",
              "38ae8231-fd18-47d5-aa55-ce1ab18d54dd",
              "586c0c58-5573-4c5f-a3e5-9a924f994ec9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 834,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "29db6fa0-2f5c-4b63-a10e-536fb1715c69",
            "title": "#upgradeTo",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/reward_by_block_test.js",
            "file": "/test/reward_by_block_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by ProxyStorage",
                "fullTitle": "Contract: RewardByBlock [all features] #upgradeTo may only be called by ProxyStorage",
                "timedOut": false,
                "duration": 115,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const rewardByBlockNew = await RewardByBlockNew.new();\nawait rewardByBlockEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait rewardByBlockEternalStorage.upgradeTo(rewardByBlockNew.address, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);\nawait upgradeTo(rewardByBlockNew.address, {from: proxyStorageStubAddress});\nawait rewardByBlockEternalStorage.setProxyStorage(proxyStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "9cbc9924-a3e9-412d-8acd-83d548b331aa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change implementation address",
                "fullTitle": "Contract: RewardByBlock [all features] #upgradeTo should change implementation address",
                "timedOut": false,
                "duration": 123,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let rewardByBlockNew = await RewardByBlockNew.new();\nconst newImplementation = rewardByBlockNew.address;\n(await rewardByBlockEternalStorage.implementation.call()).should.be.equal(rewardByBlockOldImplementation);\nawait rewardByBlockEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(newImplementation, {from: proxyStorageStubAddress});\nawait rewardByBlockEternalStorage.setProxyStorage(proxyStorage.address);\n(await rewardByBlockEternalStorage.implementation.call()).should.be.equal(newImplementation);",
                "err": {},
                "isRoot": false,
                "uuid": "8bd07d67-c17a-4589-b9b8-b45ff4b58ded",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment implementation version",
                "fullTitle": "Contract: RewardByBlock [all features] #upgradeTo should increment implementation version",
                "timedOut": false,
                "duration": 119,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let rewardByBlockNew = await RewardByBlockNew.new();\nconst oldVersion = await rewardByBlockEternalStorage.version.call();\nconst newVersion = oldVersion.add(1);\nawait rewardByBlockEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(rewardByBlockNew.address, {from: proxyStorageStubAddress});\nawait rewardByBlockEternalStorage.setProxyStorage(proxyStorage.address);\n(await rewardByBlockEternalStorage.version.call()).should.be.bignumber.equal(newVersion);",
                "err": {},
                "isRoot": false,
                "uuid": "b1057628-7673-4d8d-98f8-d26bdb254bd1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should work",
                "fullTitle": "Contract: RewardByBlock [all features] #upgradeTo new implementation should work",
                "timedOut": false,
                "duration": 145,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let rewardByBlockNew = await RewardByBlockNew.new();\nawait rewardByBlockEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(rewardByBlockNew.address, {from: proxyStorageStubAddress});\nawait rewardByBlockEternalStorage.setProxyStorage(proxyStorage.address);\nrewardByBlockNew = await RewardByBlockNew.at(rewardByBlockEternalStorage.address);\n(await rewardByBlockNew.initialized.call()).should.be.equal(false);\nawait rewardByBlockNew.initialize();\n(await rewardByBlockNew.initialized.call()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "1c5a585b-e261-4b9c-8c2f-5665101d58a6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same proxyStorage address",
                "fullTitle": "Contract: RewardByBlock [all features] #upgradeTo new implementation should use the same proxyStorage address",
                "timedOut": false,
                "duration": 118,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let rewardByBlockNew = await RewardByBlockNew.new();\nawait rewardByBlockEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(rewardByBlockNew.address, {from: proxyStorageStubAddress});\nrewardByBlockNew = await RewardByBlockNew.at(rewardByBlockEternalStorage.address);\n(await rewardByBlockNew.proxyStorage.call()).should.be.equal(proxyStorageStubAddress);\nawait rewardByBlockEternalStorage.setProxyStorage(proxyStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "161f7979-d0d6-48ec-8450-c0265674be5e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9cbc9924-a3e9-412d-8acd-83d548b331aa",
              "8bd07d67-c17a-4589-b9b8-b45ff4b58ded",
              "b1057628-7673-4d8d-98f8-d26bdb254bd1",
              "1c5a585b-e261-4b9c-8c2f-5665101d58a6",
              "161f7979-d0d6-48ec-8450-c0265674be5e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 620,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "c2c3f724-5533-4f91-9949-afc5d7329196",
        "title": "Contract: RewardByBlock upgraded [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/reward_by_block_upgrade_test.js",
        "file": "/test/reward_by_block_upgrade_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: RewardByBlock upgraded [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 1412,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "16673936-2158-4181-90f4-243d70e054b2",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: RewardByBlock upgraded [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "d05dacb8-ad12-43ac-99f7-d92408f54a79",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: RewardByBlock upgraded [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 1031,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "coinbase = accounts[0];\nmasterOfCeremony = accounts[0];\nminingKey = accounts[1];\nminingKey2 = accounts[2];\nminingKey3 = accounts[3];\npayoutKey = accounts[4];\npayoutKey2 = accounts[5];\npayoutKey3 = accounts[6];\nsystemAddress = accounts[7];\nvotingToChangeKeys = accounts[9];\npoaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony, []);\nproxyStorage = await ProxyStorage.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorage.address);\nproxyStorage = await ProxyStorage.at(proxyStorageEternalStorage.address);\nawait proxyStorage.init(poaNetworkConsensus.address).should.be.fulfilled;\nawait poaNetworkConsensus.setProxyStorage(proxyStorage.address);\nkeysManager = await KeysManager.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorage.address, keysManager.address);\nkeysManager = await KeysManager.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorage.address, validatorMetadata.address);\nawait proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeys,\n  accounts[9],\n  accounts[9],\n  accounts[9],\n  accounts[9],\n  validatorMetadataEternalStorage.address,\n  accounts[9]\n);\nawait addMiningKey(miningKey);\nawait addMiningKey(miningKey2);\nawait addMiningKey(miningKey3);\nawait addPayoutKey(payoutKey, miningKey);\nawait addPayoutKey(payoutKey2, miningKey2);\nawait addPayoutKey(payoutKey3, miningKey3);\nawait poaNetworkConsensus.setSystemAddress(coinbase);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress('0xffffFFFfFFffffffffffffffFfFFFfffFFFfFFfE');\nrewardByBlock = await RewardByBlock.new();\nrewardByBlockEternalStorage = await EternalStorageProxy.new(proxyStorage.address, rewardByBlock.address);\nrewardByBlock = await RewardByBlock.at(rewardByBlockEternalStorage.address);\nconst rewardByBlockNew = await RewardByBlockNew.new();\nawait rewardByBlockEternalStorage.setProxyStorage(accounts[8]);\nconst {logs} = await rewardByBlockEternalStorage.upgradeTo(rewardByBlockNew.address, {from: accounts[8]});\nlogs[0].event.should.be.equal(\"Upgraded\");\nawait rewardByBlockEternalStorage.setProxyStorage(proxyStorage.address);\nrewardByBlock = await RewardByBlockNew.at(rewardByBlockEternalStorage.address);\nblockRewardAmount = web3.toWei(1, 'ether');\nemissionFundsAmount = web3.toWei(1, 'ether');\nemissionFundsAddress = '0x0000000000000000000000000000000000000000';",
            "err": {},
            "isRoot": false,
            "uuid": "d4b7bc7f-756a-439a-bbde-bb0b75cd7463",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: RewardByBlock upgraded [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "33ee455f-ed84-4e31-be5d-a6bbffc7781c",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "73d4cadc-10a5-4260-8132-7bedb76c4947",
            "title": "#reward",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/reward_by_block_upgrade_test.js",
            "file": "/test/reward_by_block_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by system address",
                "fullTitle": "Contract: RewardByBlock upgraded [all features] #reward may only be called by system address",
                "timedOut": false,
                "duration": 117,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.reward([miningKey], [0]).should.be.rejectedWith(ERROR_MSG);\nawait rewardByBlock.setSystemAddress(systemAddress);\nawait rewardByBlock.reward([miningKey], [0], {from: systemAddress}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "bf705b79-8cd4-4ecf-82de-eb9d177a3e8b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should revert if input array contains more than one item",
                "fullTitle": "Contract: RewardByBlock upgraded [all features] #reward should revert if input array contains more than one item",
                "timedOut": false,
                "duration": 35,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.setSystemAddress(systemAddress);\nawait rewardByBlock.reward(\n  [miningKey, miningKey2],\n  [0, 0],\n  {from: systemAddress}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "8eae88a8-148d-402b-8279-39bb83c09701",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should revert if lengths of input arrays are not equal",
                "fullTitle": "Contract: RewardByBlock upgraded [all features] #reward should revert if lengths of input arrays are not equal",
                "timedOut": false,
                "duration": 44,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.setSystemAddress(systemAddress);\nawait rewardByBlock.reward(\n  [miningKey],\n  [0, 0],\n  {from: systemAddress}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "fe7aceef-0d58-4980-85b9-2ac5641d58ae",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should revert if `kind` parameter is not 0",
                "fullTitle": "Contract: RewardByBlock upgraded [all features] #reward should revert if `kind` parameter is not 0",
                "timedOut": false,
                "duration": 33,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.setSystemAddress(systemAddress);\nawait rewardByBlock.reward(\n  [miningKey],\n  [1],\n  {from: systemAddress}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "a2c78827-2262-47f1-b9f5-5bea188d8098",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should revert if mining key does not exist",
                "fullTitle": "Contract: RewardByBlock upgraded [all features] #reward should revert if mining key does not exist",
                "timedOut": false,
                "duration": 262,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await keysManager.removeMiningKey(miningKey3, {from: votingToChangeKeys});\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nawait rewardByBlock.setSystemAddress(systemAddress);\nawait rewardByBlock.reward(\n  [miningKey3],\n  [0],\n  {from: systemAddress}\n).should.be.rejectedWith(ERROR_MSG);\nawait rewardByBlock.reward(\n  [miningKey2],\n  [0],\n  {from: systemAddress}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "becd7d3d-09d7-4c83-adb6-b178abfaace2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assign rewards to payout key and EmissionFunds",
                "fullTitle": "Contract: RewardByBlock upgraded [all features] #reward should assign rewards to payout key and EmissionFunds",
                "timedOut": false,
                "duration": 1112,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await rewardByBlock.mintedForAccount.call(payoutKey)).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedForAccount.call(emissionFundsAddress)).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedForAccountInBlock.call(payoutKey, web3.eth.blockNumber)).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedForAccountInBlock.call(emissionFundsAddress, web3.eth.blockNumber)).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedInBlock.call(web3.eth.blockNumber)).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotally.call()).should.be.bignumber.equal(0);\nawait rewardByBlock.setSystemAddress(systemAddress);\nconst {logs} = await rewardByBlock.reward(\n  [miningKey],\n  [0],\n  {from: systemAddress}\n).should.be.fulfilled;\nlogs[0].event.should.be.equal('Rewarded');\nlogs[0].args.receivers.should.be.deep.equal([payoutKey, emissionFundsAddress]);\nlogs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nlogs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\n(await rewardByBlock.mintedForAccount.call(payoutKey)).should.be.bignumber.equal(blockRewardAmount);\n(await rewardByBlock.mintedForAccount.call(emissionFundsAddress)).should.be.bignumber.equal(emissionFundsAmount);\n(await rewardByBlock.mintedForAccountInBlock.call(payoutKey, web3.eth.blockNumber)).should.be.bignumber.equal(blockRewardAmount);\n(await rewardByBlock.mintedForAccountInBlock.call(emissionFundsAddress, web3.eth.blockNumber)).should.be.bignumber.equal(emissionFundsAmount);\nconst totalMinted = web3.toBigNumber(blockRewardAmount).plus(emissionFundsAmount);\n(await rewardByBlock.mintedInBlock.call(web3.eth.blockNumber)).should.be.bignumber.equal(totalMinted);\n(await rewardByBlock.mintedTotally.call()).should.be.bignumber.equal(totalMinted);",
                "err": {},
                "isRoot": false,
                "uuid": "88957399-7787-4789-a551-48c41bc78287",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assign reward to mining key if payout key is 0",
                "fullTitle": "Contract: RewardByBlock upgraded [all features] #reward should assign reward to mining key if payout key is 0",
                "timedOut": false,
                "duration": 142,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = await keysManager.removePayoutKey(\n  miningKey,\n  {from: votingToChangeKeys}\n);\nresult.logs[0].event.should.be.equal(\"PayoutKeyChanged\");\nawait rewardByBlock.setSystemAddress(systemAddress);\nconst {logs} = await rewardByBlock.reward(\n  [miningKey],\n  [0],\n  {from: systemAddress}\n).should.be.fulfilled;\nlogs[0].event.should.be.equal('Rewarded');\nlogs[0].args.receivers.should.be.deep.equal([miningKey, emissionFundsAddress]);\nlogs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nlogs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());",
                "err": {},
                "isRoot": false,
                "uuid": "bf07df65-233e-4d3c-97e3-101611e82e1b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assign rewards to extra receivers and clear extra receivers list",
                "fullTitle": "Contract: RewardByBlock upgraded [all features] #reward should assign rewards to extra receivers and clear extra receivers list",
                "timedOut": false,
                "duration": 1556,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await rewardByBlock.bridgeAmount.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[3])).should.be.bignumber.equal(0);\nawait rewardByBlock.addExtraReceiver(2, accounts[2], {from: accounts[1]}).should.be.fulfilled;\nawait rewardByBlock.addExtraReceiver(3, accounts[3], {from: accounts[1]}).should.be.fulfilled;\n(await rewardByBlock.bridgeAmount.call(accounts[1])).should.be.bignumber.equal(5);\n(await rewardByBlock.bridgeAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[3])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[3])).should.be.bignumber.equal(0);\nawait rewardByBlock.setSystemAddress(systemAddress);\nlet result = await rewardByBlock.reward(\n  [miningKey],\n  [0],\n  {from: systemAddress}\n).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([payoutKey, emissionFundsAddress, accounts[2], accounts[3]]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\nresult.logs[0].args.rewards[2].toString().should.be.equal('2');\nresult.logs[0].args.rewards[3].toString().should.be.equal('3');\n(await rewardByBlock.extraReceiverAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.extraReceiverAmount.call(accounts[3])).should.be.bignumber.equal(0);\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[3])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[1])).should.be.bignumber.equal(5);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[3])).should.be.bignumber.equal(0);\nawait rewardByBlock.addExtraReceiver(2, accounts[2], {from: accounts[1]}).should.be.fulfilled;\nawait rewardByBlock.addExtraReceiver(3, accounts[3], {from: accounts[1]}).should.be.fulfilled;\nresult = await rewardByBlock.reward(\n  [miningKey],\n  [0],\n  {from: systemAddress}\n).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([payoutKey, emissionFundsAddress, accounts[2], accounts[3]]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\nresult.logs[0].args.rewards[2].toString().should.be.equal('2');\nresult.logs[0].args.rewards[3].toString().should.be.equal('3');\n(await rewardByBlock.extraReceiverAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.extraReceiverAmount.call(accounts[3])).should.be.bignumber.equal(0);\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[1])).should.be.bignumber.equal(10);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[3])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedForAccount.call(payoutKey)).should.be.bignumber.equal(blockRewardAmount * 2);\n(await rewardByBlock.mintedForAccount.call(emissionFundsAddress)).should.be.bignumber.equal(emissionFundsAmount * 2);\n(await rewardByBlock.mintedForAccount.call(accounts[2])).should.be.bignumber.equal(4);\n(await rewardByBlock.mintedForAccount.call(accounts[3])).should.be.bignumber.equal(6);\n\n(await rewardByBlock.mintedForAccountInBlock.call(payoutKey, web3.eth.blockNumber)).should.be.bignumber.equal(blockRewardAmount);\n(await rewardByBlock.mintedForAccountInBlock.call(emissionFundsAddress, web3.eth.blockNumber)).should.be.bignumber.equal(emissionFundsAmount);\n(await rewardByBlock.mintedForAccountInBlock.call(accounts[2], web3.eth.blockNumber)).should.be.bignumber.equal(2);\n(await rewardByBlock.mintedForAccountInBlock.call(accounts[3], web3.eth.blockNumber)).should.be.bignumber.equal(3);\n\n(await rewardByBlock.mintedInBlock.call(web3.eth.blockNumber)).should.be.bignumber.equal(\n  web3.toBigNumber(blockRewardAmount).plus(emissionFundsAmount).plus(2).plus(3)\n);\n(await rewardByBlock.mintedTotally.call()).should.be.bignumber.equal(\n  web3.toBigNumber(blockRewardAmount).plus(emissionFundsAmount).plus(2).plus(3).mul(2)\n);",
                "err": {},
                "isRoot": false,
                "uuid": "ff074588-f037-46d5-809d-342e6520a519",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "bf705b79-8cd4-4ecf-82de-eb9d177a3e8b",
              "8eae88a8-148d-402b-8279-39bb83c09701",
              "fe7aceef-0d58-4980-85b9-2ac5641d58ae",
              "a2c78827-2262-47f1-b9f5-5bea188d8098",
              "becd7d3d-09d7-4c83-adb6-b178abfaace2",
              "88957399-7787-4789-a551-48c41bc78287",
              "bf07df65-233e-4d3c-97e3-101611e82e1b",
              "ff074588-f037-46d5-809d-342e6520a519"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3301,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "3c3e49c4-95fa-403b-9e17-743bdd578ca9",
            "title": "#addExtraReceiver",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/reward_by_block_upgrade_test.js",
            "file": "/test/reward_by_block_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by bridge contract",
                "fullTitle": "Contract: RewardByBlock upgraded [all features] #addExtraReceiver may only be called by bridge contract",
                "timedOut": false,
                "duration": 74,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.addExtraReceiver(1, accounts[1]).should.be.rejectedWith(ERROR_MSG);\nawait rewardByBlock.addExtraReceiver(1, accounts[1], {from: accounts[2]}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "fee0026d-fb4b-41ae-b12a-0dc66cc9e6d4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should revert if receiver address is 0x0",
                "fullTitle": "Contract: RewardByBlock upgraded [all features] #addExtraReceiver should revert if receiver address is 0x0",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.addExtraReceiver(\n  1,\n  '0x0000000000000000000000000000000000000000',\n  {from: accounts[2]}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "0513a1ec-f649-48f9-937c-5c145c7bd672",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should revert if amount is 0",
                "fullTitle": "Contract: RewardByBlock upgraded [all features] #addExtraReceiver should revert if amount is 0",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.addExtraReceiver(\n  0,\n  accounts[1],\n  {from: accounts[2]}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "49c4e9bf-d3ad-4f25-8c6e-f4cf0bcdac4c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "can be called repeatedly for the same recipient",
                "fullTitle": "Contract: RewardByBlock upgraded [all features] #addExtraReceiver can be called repeatedly for the same recipient",
                "timedOut": false,
                "duration": 379,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await rewardByBlock.bridgeAmount.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[3])).should.be.bignumber.equal(0);\nawait rewardByBlock.addExtraReceiver(\n  1,\n  accounts[1],\n  {from: accounts[2]}\n).should.be.fulfilled;\nawait rewardByBlock.addExtraReceiver(\n  2,\n  accounts[1],\n  {from: accounts[3]}\n).should.be.fulfilled;\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(1);\n(await rewardByBlock.extraReceiverByIndex.call(0)).should.be.equal(accounts[1]);\n(await rewardByBlock.extraReceiverAmount.call(accounts[1])).should.be.bignumber.equal(3);\n(await rewardByBlock.bridgeAmount.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[2])).should.be.bignumber.equal(1);\n(await rewardByBlock.bridgeAmount.call(accounts[3])).should.be.bignumber.equal(2);\nawait rewardByBlock.setSystemAddress(systemAddress);\nconst result = await rewardByBlock.reward(\n  [miningKey],\n  [0],\n  {from: systemAddress}\n).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([payoutKey, emissionFundsAddress, accounts[1]]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\nresult.logs[0].args.rewards[2].toString().should.be.equal('3');\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(0);\n(await rewardByBlock.extraReceiverAmount.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[3])).should.be.bignumber.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "6c98f66d-de3d-43d5-93a3-73c6af6990f2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should add receivers",
                "fullTitle": "Contract: RewardByBlock upgraded [all features] #addExtraReceiver should add receivers",
                "timedOut": false,
                "duration": 195,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await rewardByBlock.extraReceiverAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(0);\nlet result = await rewardByBlock.addExtraReceiver(2, accounts[2], {from: accounts[1]}).should.be.fulfilled;\n(await rewardByBlock.extraReceiverByIndex.call(0)).should.be.equal(accounts[2]);\n(await rewardByBlock.extraReceiverAmount.call(accounts[2])).should.be.bignumber.equal(2);\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(1);\nresult.logs[0].event.should.be.equal('AddedReceiver');\nresult.logs[0].args.receiver.should.be.equal(accounts[2]);\nresult.logs[0].args.amount.should.be.bignumber.equal(2);\nresult.logs[0].args.bridge.should.be.equal(accounts[1]);\nresult = await rewardByBlock.addExtraReceiver(3, accounts[3], {from: accounts[1]}).should.be.fulfilled;\n(await rewardByBlock.extraReceiverByIndex.call(0)).should.be.equal(accounts[2]);\n(await rewardByBlock.extraReceiverByIndex.call(1)).should.be.equal(accounts[3]);\n(await rewardByBlock.extraReceiverAmount.call(accounts[2])).should.be.bignumber.equal(2);\n(await rewardByBlock.extraReceiverAmount.call(accounts[3])).should.be.bignumber.equal(3);\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(2);\nresult.logs[0].event.should.be.equal('AddedReceiver');\nresult.logs[0].args.receiver.should.be.equal(accounts[3]);\nresult.logs[0].args.amount.should.be.bignumber.equal(3);\nresult.logs[0].args.bridge.should.be.equal(accounts[1]);",
                "err": {},
                "isRoot": false,
                "uuid": "016532dc-419f-4aef-8818-d655e83d662e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "fee0026d-fb4b-41ae-b12a-0dc66cc9e6d4",
              "0513a1ec-f649-48f9-937c-5c145c7bd672",
              "49c4e9bf-d3ad-4f25-8c6e-f4cf0bcdac4c",
              "6c98f66d-de3d-43d5-93a3-73c6af6990f2",
              "016532dc-419f-4aef-8818-d655e83d662e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 682,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "27671cdb-9f81-4f95-a072-e9c541a7a032",
        "title": "Contract: RewardByTime [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/reward_by_time_test.js",
        "file": "/test/reward_by_time_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: RewardByTime [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 1299,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "32d7613e-bd3b-4fbe-b630-681d5493959d",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: RewardByTime [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "cf281dc5-a236-4ec0-bb51-e9c59266280f",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: RewardByTime [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 1033,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "coinbase = accounts[0];\nmasterOfCeremony = accounts[0];\nminingKey = accounts[1];\nminingKey2 = accounts[2];\nminingKey3 = accounts[3];\npayoutKey = accounts[4];\npayoutKey2 = accounts[5];\npayoutKey3 = accounts[6];\nsystemAddress = accounts[7];\nvotingToChangeKeys = accounts[9];\npoaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony, []);\nproxyStorage = await ProxyStorage.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorage.address);\nproxyStorage = await ProxyStorage.at(proxyStorageEternalStorage.address);\nawait proxyStorage.init(poaNetworkConsensus.address).should.be.fulfilled;\nawait poaNetworkConsensus.setProxyStorage(proxyStorage.address);\nkeysManager = await KeysManager.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorage.address, keysManager.address);\nkeysManager = await KeysManager.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorage.address, validatorMetadata.address);\nawait proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeys,\n  accounts[9],\n  accounts[9],\n  accounts[9],\n  accounts[9],\n  validatorMetadataEternalStorage.address,\n  accounts[9]\n);\nawait addMiningKey(miningKey);\nawait addMiningKey(miningKey2);\nawait addMiningKey(miningKey3);\nawait addPayoutKey(payoutKey, miningKey);\nawait addPayoutKey(payoutKey2, miningKey2);\nawait addPayoutKey(payoutKey3, miningKey3);\nawait poaNetworkConsensus.setSystemAddress(coinbase);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress('0xffffFFFfFFffffffffffffffFfFFFfffFFFfFFfE');\nrewardByTime = await RewardByTime.new();\nrewardByTimeOldImplementation = rewardByTime.address;\nrewardByTimeEternalStorage = await EternalStorageProxy.new(proxyStorage.address, rewardByTime.address);\nrewardByTime = await RewardByTime.at(rewardByTimeEternalStorage.address);\nblockRewardAmount = web3.toWei(1, 'ether');\nemissionFundsAmount = web3.toWei(1, 'ether');\nemissionFundsAddress = '0x0000000000000000000000000000000000000000';\nthreshold = 5;",
            "err": {},
            "isRoot": false,
            "uuid": "1ae22e45-c097-4ce8-bf35-281fb16a2c1a",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: RewardByTime [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "8b604f92-3dd0-472f-9ae6-9438f757edf6",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "a8da9ca9-fd83-43ca-91c9-34c5a664ca0a",
            "title": "#reward",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/reward_by_time_test.js",
            "file": "/test/reward_by_time_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by system address",
                "fullTitle": "Contract: RewardByTime [all features] #reward may only be called by system address",
                "timedOut": false,
                "duration": 144,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByTime.reward().should.be.rejectedWith(ERROR_MSG);\nawait rewardByTime.setSystemAddress(systemAddress);\nawait rewardByTime.reward({from: systemAddress}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "6de8652e-6062-42e2-9a40-c1c0ea990f21",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assign rewards to payout keys and EmissionFunds",
                "fullTitle": "Contract: RewardByTime [all features] #reward should assign rewards to payout keys and EmissionFunds",
                "timedOut": false,
                "duration": 2991,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByTime.setSystemAddress(systemAddress);\nlet result;\n\nawait rewardByTime.setTime(100);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([masterOfCeremony, emissionFundsAddress]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(100);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(1);\nawait rewardByTime.setTime(107);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([payoutKey, emissionFundsAddress]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(100 + threshold);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(2);\nawait rewardByTime.setTime(123);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([\n  payoutKey2,\n  payoutKey3,\n  masterOfCeremony,\n  emissionFundsAddress\n]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[2].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[3].toString().should.be.equal((emissionFundsAmount * 3).toString());\nlet lastTime = 100 + threshold * 4;\nlet keyIndex = 1;\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(lastTime);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(keyIndex);\nconst keysArray = [\n  masterOfCeremony,\n  payoutKey,\n  payoutKey2,\n  payoutKey3\n];\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal(keysArray);\nfor (let k = 0; k < 10; k++) {\n  const time = getRandomInt(lastTime + 4, lastTime + 81);\n  //console.log('time = ' + time);\n  const receiversCount = Math.floor((time - lastTime) / threshold);\n  let receivers = [];\n  await rewardByTime.setTime(time);\n  result = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\n  if (receiversCount > 0) {\n    result.logs[0].event.should.be.equal('Rewarded');\n  }\n  let i, n;\n  for (i = keyIndex, n = 0; n < receiversCount; i++, n++) {\n    receivers.push(keysArray[i % keysArray.length]);\n    result.logs[0].args.rewards[n].toString().should.be.equal(blockRewardAmount.toString());\n  }\n  if (receiversCount > 0) {\n    receivers.push(emissionFundsAddress);\n    result.logs[0].args.receivers.should.be.deep.equal(receivers);\n    result.logs[0].args.rewards[n].toString().should.be.equal((emissionFundsAmount * receiversCount).toString());\n    lastTime = lastTime + threshold * receiversCount;\n    keyIndex = i % keysArray.length;\n    (await rewardByTime.lastTime.call()).should.be.bignumber.equal(lastTime);\n    (await rewardByTime.keyIndex.call()).should.be.bignumber.equal(keyIndex);\n  }\n}",
                "err": {},
                "isRoot": false,
                "uuid": "6253da24-8573-493a-948b-f4f6010e64de",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should work fine after some validators are removed and added",
                "fullTitle": "Contract: RewardByTime [all features] #reward should work fine after some validators are removed and added",
                "timedOut": false,
                "duration": 1475,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByTime.setSystemAddress(systemAddress);\nlet result;\n\nawait rewardByTime.setTime(100);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([masterOfCeremony, emissionFundsAddress]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(100);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(1);\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey2,\n  payoutKey3\n]);\nresult = await keysManager.removeMiningKey(miningKey2, {from: votingToChangeKeys});\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nawait poaNetworkConsensus.setSystemAddress(coinbase);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress('0xffffFFFfFFffffffffffffffFfFFFfffFFFfFFfE');\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey2,\n  payoutKey3\n]);\nawait rewardByTime.setTime(107);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([payoutKey, emissionFundsAddress]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(100 + threshold);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(2);\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey2,\n  payoutKey3\n]);\nawait rewardByTime.setTime(123);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([\n  payoutKey2,\n  payoutKey3,\n  masterOfCeremony,\n  emissionFundsAddress\n]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[2].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[3].toString().should.be.equal((emissionFundsAmount * 3).toString());\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(100 + threshold * 4);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(1);\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey3\n]);\nawait rewardByTime.setTime(135);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([\n  payoutKey,\n  payoutKey3,\n  masterOfCeremony,\n  emissionFundsAddress\n]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[2].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[3].toString().should.be.equal((emissionFundsAmount * 3).toString());\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(100 + threshold * 7);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(1);\nawait addMiningKey(miningKey2);\nawait addPayoutKey(payoutKey2, miningKey2);\nawait poaNetworkConsensus.setSystemAddress(coinbase);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress('0xffffFFFfFFffffffffffffffFfFFFfffFFFfFFfE');\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey3\n]);\nawait rewardByTime.setTime(147);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([\n  payoutKey,\n  payoutKey3,\n  emissionFundsAddress\n]);\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey3,\n  payoutKey2\n]);\nawait rewardByTime.setTime(166);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey3,\n  payoutKey2,\n  emissionFundsAddress\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "1eebdbab-7984-49c2-8e1a-facea3b6900b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6de8652e-6062-42e2-9a40-c1c0ea990f21",
              "6253da24-8573-493a-948b-f4f6010e64de",
              "1eebdbab-7984-49c2-8e1a-facea3b6900b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 4610,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "5ebf741f-13c2-47cb-bbb5-c4b6c1b9baf2",
            "title": "#upgradeTo",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/reward_by_time_test.js",
            "file": "/test/reward_by_time_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by ProxyStorage",
                "fullTitle": "Contract: RewardByTime [all features] #upgradeTo may only be called by ProxyStorage",
                "timedOut": false,
                "duration": 109,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const rewardByTimeNew = await RewardByTimeNew.new();\nawait rewardByTimeEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait rewardByTimeEternalStorage.upgradeTo(rewardByTimeNew.address, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);\nawait upgradeTo(rewardByTimeNew.address, {from: proxyStorageStubAddress});\nawait rewardByTimeEternalStorage.setProxyStorage(proxyStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "0fb42293-043f-452f-9d84-dcddf0e3ed87",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change implementation address",
                "fullTitle": "Contract: RewardByTime [all features] #upgradeTo should change implementation address",
                "timedOut": false,
                "duration": 116,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let rewardByTimeNew = await RewardByTimeNew.new();\nconst newImplementation = rewardByTimeNew.address;\n(await rewardByTimeEternalStorage.implementation.call()).should.be.equal(rewardByTimeOldImplementation);\nawait rewardByTimeEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(newImplementation, {from: proxyStorageStubAddress});\nawait rewardByTimeEternalStorage.setProxyStorage(proxyStorage.address);\n(await rewardByTimeEternalStorage.implementation.call()).should.be.equal(newImplementation);",
                "err": {},
                "isRoot": false,
                "uuid": "62789d53-bf94-4621-be79-c83a07a2d550",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment implementation version",
                "fullTitle": "Contract: RewardByTime [all features] #upgradeTo should increment implementation version",
                "timedOut": false,
                "duration": 117,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let rewardByTimeNew = await RewardByTimeNew.new();\nconst oldVersion = await rewardByTimeEternalStorage.version.call();\nconst newVersion = oldVersion.add(1);\nawait rewardByTimeEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(rewardByTimeNew.address, {from: proxyStorageStubAddress});\nawait rewardByTimeEternalStorage.setProxyStorage(proxyStorage.address);\n(await rewardByTimeEternalStorage.version.call()).should.be.bignumber.equal(newVersion);",
                "err": {},
                "isRoot": false,
                "uuid": "4c9c23b3-5027-4176-8862-a57ca48d65ef",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should work",
                "fullTitle": "Contract: RewardByTime [all features] #upgradeTo new implementation should work",
                "timedOut": false,
                "duration": 151,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let rewardByTimeNew = await RewardByTimeNew.new();\nawait rewardByTimeEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(rewardByTimeNew.address, {from: proxyStorageStubAddress});\nawait rewardByTimeEternalStorage.setProxyStorage(proxyStorage.address);\nrewardByTimeNew = await RewardByTimeNew.at(rewardByTimeEternalStorage.address);\n(await rewardByTimeNew.initialized.call()).should.be.equal(false);\nawait rewardByTimeNew.initialize();\n(await rewardByTimeNew.initialized.call()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "a8972d74-7b2e-4f4a-924d-5688d465e8ef",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same proxyStorage address",
                "fullTitle": "Contract: RewardByTime [all features] #upgradeTo new implementation should use the same proxyStorage address",
                "timedOut": false,
                "duration": 120,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let rewardByTimeNew = await RewardByTimeNew.new();\nawait rewardByTimeEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(rewardByTimeNew.address, {from: proxyStorageStubAddress});\nrewardByTimeNew = await RewardByTimeNew.at(rewardByTimeEternalStorage.address);\n(await rewardByTimeNew.proxyStorage.call()).should.be.equal(proxyStorageStubAddress);\nawait rewardByTimeEternalStorage.setProxyStorage(proxyStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "d4b148e9-da52-4934-8fae-2c6f35917a6a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0fb42293-043f-452f-9d84-dcddf0e3ed87",
              "62789d53-bf94-4621-be79-c83a07a2d550",
              "4c9c23b3-5027-4176-8862-a57ca48d65ef",
              "a8972d74-7b2e-4f4a-924d-5688d465e8ef",
              "d4b148e9-da52-4934-8fae-2c6f35917a6a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 613,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "edb60176-7eb4-4784-b3bd-f9440ce50ed9",
        "title": "Contract: RewardByTime upgraded [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/reward_by_time_upgrade_test.js",
        "file": "/test/reward_by_time_upgrade_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: RewardByTime upgraded [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 741,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "d363c822-20d9-40bf-b6cb-b30d81d90c91",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: RewardByTime upgraded [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "5252fbb8-769a-40ef-88fa-f1fe516df3ea",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: RewardByTime upgraded [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 1087,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "coinbase = accounts[0];\nmasterOfCeremony = accounts[0];\nminingKey = accounts[1];\nminingKey2 = accounts[2];\nminingKey3 = accounts[3];\npayoutKey = accounts[4];\npayoutKey2 = accounts[5];\npayoutKey3 = accounts[6];\nsystemAddress = accounts[7];\nvotingToChangeKeys = accounts[9];\npoaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony, []);\nproxyStorage = await ProxyStorage.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorage.address);\nproxyStorage = await ProxyStorage.at(proxyStorageEternalStorage.address);\nawait proxyStorage.init(poaNetworkConsensus.address).should.be.fulfilled;\nawait poaNetworkConsensus.setProxyStorage(proxyStorage.address);\nkeysManager = await KeysManager.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorage.address, keysManager.address);\nkeysManager = await KeysManager.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorage.address, validatorMetadata.address);\nawait proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeys,\n  accounts[9],\n  accounts[9],\n  accounts[9],\n  accounts[9],\n  validatorMetadataEternalStorage.address,\n  accounts[9]\n);\nawait addMiningKey(miningKey);\nawait addMiningKey(miningKey2);\nawait addMiningKey(miningKey3);\nawait addPayoutKey(payoutKey, miningKey);\nawait addPayoutKey(payoutKey2, miningKey2);\nawait addPayoutKey(payoutKey3, miningKey3);\nawait poaNetworkConsensus.setSystemAddress(coinbase);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress('0xffffFFFfFFffffffffffffffFfFFFfffFFFfFFfE');\nrewardByTime = await RewardByTime.new();\nrewardByTimeEternalStorage = await EternalStorageProxy.new(proxyStorage.address, rewardByTime.address);\nrewardByTime = await RewardByTime.at(rewardByTimeEternalStorage.address);\nconst rewardByTimeNew = await RewardByTimeNew.new();\nawait rewardByTimeEternalStorage.setProxyStorage(accounts[8]);\nconst {logs} = await rewardByTimeEternalStorage.upgradeTo(rewardByTimeNew.address, {from: accounts[8]});\nlogs[0].event.should.be.equal(\"Upgraded\");\nawait rewardByTimeEternalStorage.setProxyStorage(proxyStorage.address);\nrewardByTime = await RewardByTimeNew.at(rewardByTimeEternalStorage.address);\nblockRewardAmount = web3.toWei(1, 'ether');\nemissionFundsAmount = web3.toWei(1, 'ether');\nemissionFundsAddress = '0x0000000000000000000000000000000000000000';\nthreshold = 5;",
            "err": {},
            "isRoot": false,
            "uuid": "67c0ea8d-bcd8-4f21-88a5-d0c2b5496be3",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: RewardByTime upgraded [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "6612f364-5e76-4d5a-b75f-96fbf64bc12b",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "b6ce9637-ae6d-4e0f-b01e-b415d415f5b6",
            "title": "#reward",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/reward_by_time_upgrade_test.js",
            "file": "/test/reward_by_time_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by system address",
                "fullTitle": "Contract: RewardByTime upgraded [all features] #reward may only be called by system address",
                "timedOut": false,
                "duration": 149,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByTime.reward().should.be.rejectedWith(ERROR_MSG);\nawait rewardByTime.setSystemAddress(systemAddress);\nawait rewardByTime.reward({from: systemAddress}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "0267993a-3ec7-4c41-a693-87ca61f1e0cf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assign rewards to payout keys and EmissionFunds",
                "fullTitle": "Contract: RewardByTime upgraded [all features] #reward should assign rewards to payout keys and EmissionFunds",
                "timedOut": false,
                "duration": 3132,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByTime.setSystemAddress(systemAddress);\nlet result;\n\nawait rewardByTime.setTime(100);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([masterOfCeremony, emissionFundsAddress]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(100);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(1);\nawait rewardByTime.setTime(107);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([payoutKey, emissionFundsAddress]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(100 + threshold);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(2);\nawait rewardByTime.setTime(123);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([\n  payoutKey2,\n  payoutKey3,\n  masterOfCeremony,\n  emissionFundsAddress\n]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[2].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[3].toString().should.be.equal((emissionFundsAmount * 3).toString());\nlet lastTime = 100 + threshold * 4;\nlet keyIndex = 1;\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(lastTime);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(keyIndex);\nconst keysArray = [\n  masterOfCeremony,\n  payoutKey,\n  payoutKey2,\n  payoutKey3\n];\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal(keysArray);\nfor (let k = 0; k < 10; k++) {\n  const time = getRandomInt(lastTime + 4, lastTime + 81);\n  //console.log('time = ' + time);\n  const receiversCount = Math.floor((time - lastTime) / threshold);\n  let receivers = [];\n  await rewardByTime.setTime(time);\n  result = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\n  if (receiversCount > 0) {\n    result.logs[0].event.should.be.equal('Rewarded');\n  }\n  let i, n;\n  for (i = keyIndex, n = 0; n < receiversCount; i++, n++) {\n    receivers.push(keysArray[i % keysArray.length]);\n    result.logs[0].args.rewards[n].toString().should.be.equal(blockRewardAmount.toString());\n  }\n  if (receiversCount > 0) {\n    receivers.push(emissionFundsAddress);\n    result.logs[0].args.receivers.should.be.deep.equal(receivers);\n    result.logs[0].args.rewards[n].toString().should.be.equal((emissionFundsAmount * receiversCount).toString());\n    lastTime = lastTime + threshold * receiversCount;\n    keyIndex = i % keysArray.length;\n    (await rewardByTime.lastTime.call()).should.be.bignumber.equal(lastTime);\n    (await rewardByTime.keyIndex.call()).should.be.bignumber.equal(keyIndex);\n  }\n}",
                "err": {},
                "isRoot": false,
                "uuid": "24390987-8406-4c8c-915b-63f0f06e6e77",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should work fine after some validators are removed and added",
                "fullTitle": "Contract: RewardByTime upgraded [all features] #reward should work fine after some validators are removed and added",
                "timedOut": false,
                "duration": 1396,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByTime.setSystemAddress(systemAddress);\nlet result;\n\nawait rewardByTime.setTime(100);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([masterOfCeremony, emissionFundsAddress]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(100);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(1);\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey2,\n  payoutKey3\n]);\nresult = await keysManager.removeMiningKey(miningKey2, {from: votingToChangeKeys});\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nawait poaNetworkConsensus.setSystemAddress(coinbase);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress('0xffffFFFfFFffffffffffffffFfFFFfffFFFfFFfE');\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey2,\n  payoutKey3\n]);\nawait rewardByTime.setTime(107);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([payoutKey, emissionFundsAddress]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(100 + threshold);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(2);\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey2,\n  payoutKey3\n]);\nawait rewardByTime.setTime(123);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([\n  payoutKey2,\n  payoutKey3,\n  masterOfCeremony,\n  emissionFundsAddress\n]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[2].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[3].toString().should.be.equal((emissionFundsAmount * 3).toString());\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(100 + threshold * 4);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(1);\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey3\n]);\nawait rewardByTime.setTime(135);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([\n  payoutKey,\n  payoutKey3,\n  masterOfCeremony,\n  emissionFundsAddress\n]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[2].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[3].toString().should.be.equal((emissionFundsAmount * 3).toString());\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(100 + threshold * 7);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(1);\nawait addMiningKey(miningKey2);\nawait addPayoutKey(payoutKey2, miningKey2);\nawait poaNetworkConsensus.setSystemAddress(coinbase);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress('0xffffFFFfFFffffffffffffffFfFFFfffFFFfFFfE');\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey3\n]);\nawait rewardByTime.setTime(147);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([\n  payoutKey,\n  payoutKey3,\n  emissionFundsAddress\n]);\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey3,\n  payoutKey2\n]);\nawait rewardByTime.setTime(166);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey3,\n  payoutKey2,\n  emissionFundsAddress\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "385f1999-05f9-46c1-8bdf-f832e66bcb1d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0267993a-3ec7-4c41-a693-87ca61f1e0cf",
              "24390987-8406-4c8c-915b-63f0f06e6e77",
              "385f1999-05f9-46c1-8bdf-f832e66bcb1d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 4677,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "acb38ead-1cc5-4c4c-bb59-1a985c55b356",
        "title": "Contract: Voting to change keys [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_test.js",
        "file": "/test/voting_to_change_keys_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: Voting to change keys [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 504,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "a1c87e9a-12fd-47e5-aa48-cd55df3c7a9f",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: Voting to change keys [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "2e74d377-2a63-446e-aab9-660b826dbf34",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: Voting to change keys [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 729,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "votingKey = accounts[2];\nminingKeyForVotingKey = accounts[1];\nmasterOfCeremony = accounts[0];\npoaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony, []);\n\nproxyStorageMock = await ProxyStorageMock.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorageMock.address);\nproxyStorageMock = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorageMock.init(poaNetworkConsensusMock.address).should.be.fulfilled;\n\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\nkeysManager = await KeysManagerMock.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, keysManager.address);\nkeysManager = await KeysManagerMock.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\nlet ballotsStorage = await BallotsStorage.new();\nconst ballotsEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, ballotsStorage.address);\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, validatorMetadata.address);\nvoting = await VotingToChangeKeysMock.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, voting.address);\nawait proxyStorageMock.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingEternalStorage.address,\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  accounts[0]\n);\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\nvoting = await VotingToChangeKeysMock.at(votingEternalStorage.address);\nawait voting.init(172800).should.be.fulfilled;\nawait voting.migrateDisable().should.be.fulfilled;",
            "err": {},
            "isRoot": false,
            "uuid": "2cd11816-bbd1-4aed-b431-e9add1ba2b51",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: Voting to change keys [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "43c1445c-0c72-4591-83ec-15d649ee1247",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "8a50ee79-7caf-45c5-868c-7bc360624499",
            "title": "#createBallot",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_test.js",
            "file": "/test/voting_to_change_keys_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: Voting to change keys [all features] #createBallot happy path",
                "timedOut": false,
                "duration": 676,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(accounts[1]);\nlet result = await keysManager.swapMiningKey(accounts[3], accounts[1]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nawait addVotingKey(votingKey, accounts[3]);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nconst id = await voting.nextBallotId.call();\n\nawait voting.createBallot(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  1,                 // _ballotType (KeyAdding)\n  1,                 // _affectedKeyType (MiningKey)\n  \"memo\",            // _memo\n  accounts[4],       // _affectedKey\n  accounts[5],       // _miningKey\n  {from: miningKeyForVotingKey}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallot(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  1,                 // _ballotType (KeyAdding)\n  1,                 // _affectedKeyType (MiningKey)\n  \"memo\",            // _memo\n  accounts[3],       // _affectedKey\n  accounts[5],       // _miningKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nconst {logs} = await voting.createBallot(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  1,                 // _ballotType (KeyAdding)\n  1,                 // _affectedKeyType (MiningKey)\n  \"memo\",            // _memo\n  accounts[4],       // _affectedKey\n  accounts[5],       // _miningKey\n  {from: votingKey}\n).should.be.fulfilled;\nconst ballotInfo = await voting.getBallotInfo.call(id);\nballotInfo[0].should.be.bignumber.equal(VOTING_START_DATE);\nballotInfo[1].should.be.bignumber.equal(VOTING_END_DATE);\n(await voting.getKeysManager.call()).should.be.equal(keysManager.address);\nlogs[0].event.should.be.equal(\"BallotCreated\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.creator.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "238d2aa6-1a16-44b3-a6c3-4b58979e9f83",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create voting with invalid duration",
                "fullTitle": "Contract: Voting to change keys [all features] #createBallot should not let create voting with invalid duration",
                "timedOut": false,
                "duration": 176,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(10, 'days').unix();\nVOTING_END_DATE = moment.utc().add(2, 'seconds').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  1, // _affectedKeyType\n  \"memo\",\n  accounts[1], // _affectedKey\n  accounts[2], // _miningKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = 0\nVOTING_END_DATE = moment.utc().add(2, 'seconds').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  1, // _affectedKeyType\n  \"memo\",\n  accounts[1], // _affectedKey\n  accounts[2], // _miningKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = moment.utc().add(2, 'seconds').unix();\nVOTING_END_DATE = 0\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  1, // _affectedKeyType\n  \"memo\",\n  accounts[1], // _affectedKey\n  accounts[2], // _miningKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "d573bc83-c7ef-403c-804c-ad0d93c82bdf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let add votingKey for MoC",
                "fullTitle": "Contract: Voting to change keys [all features] #createBallot should not let add votingKey for MoC",
                "timedOut": false,
                "duration": 437,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait addMiningKey(accounts[2]);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  2, // _affectedKeyType\n  \"memo\",\n  accounts[5], // _affectedKey\n  masterOfCeremony, // _miningKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  2, // _affectedKeyType\n  \"memo\",\n  accounts[5], // _affectedKey\n  accounts[2], // _miningKey\n  {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "7e6d02fb-ede1-436a-9bce-b5f59dfa91fe",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let add votingKey for 0x0",
                "fullTitle": "Contract: Voting to change keys [all features] #createBallot should not let add votingKey for 0x0",
                "timedOut": false,
                "duration": 441,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait addMiningKey(accounts[2]);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  2, // _affectedKeyType\n  \"memo\",\n  accounts[5], // _affectedKey\n  '0x0000000000000000000000000000000000000000', // _miningKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  2, // _affectedKeyType\n  \"memo\",\n  accounts[5], // _affectedKey\n  accounts[2], // _miningKey\n  {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "22214e7a-86c4-4bc1-850f-f3441f2d1fc0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let add payoutKey for 0x0",
                "fullTitle": "Contract: Voting to change keys [all features] #createBallot should not let add payoutKey for 0x0",
                "timedOut": false,
                "duration": 423,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait addMiningKey(accounts[2]);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  3,\n  \"memo\",\n  accounts[5],\n  '0x0000000000000000000000000000000000000000',\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  3,\n  \"memo\",\n  accounts[5],\n  accounts[2],\n  {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "1b5f9550-ed66-4da9-8ec3-fe4fc019d836",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create more ballots than the limit",
                "fullTitle": "Contract: Voting to change keys [all features] #createBallot should not let create more ballots than the limit",
                "timedOut": false,
                "duration": 10399,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  1,\n  \"memo\",\n  accounts[3],\n  accounts[2],\n  {from: votingKey}\n);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  1,\n  \"memo\",\n  accounts[3],\n  accounts[2],\n  {from: votingKey}\n);\nnew web3.BigNumber(200).should.be.bignumber.equal(await voting.getBallotLimitPerValidator.call());\nawait addValidators({proxyStorageMock, keysManager, poaNetworkConsensusMock}); //add 100 validators, so total will be 101 validator\nnew web3.BigNumber(1).should.be.bignumber.equal(await voting.getBallotLimitPerValidator.call());\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  1,\n  \"memo\",\n  accounts[3],\n  accounts[2],\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG)",
                "err": {},
                "isRoot": false,
                "uuid": "5f232310-6752-42d6-9804-3642307d1abb",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "238d2aa6-1a16-44b3-a6c3-4b58979e9f83",
              "d573bc83-c7ef-403c-804c-ad0d93c82bdf",
              "7e6d02fb-ede1-436a-9bce-b5f59dfa91fe",
              "22214e7a-86c4-4bc1-850f-f3441f2d1fc0",
              "1b5f9550-ed66-4da9-8ec3-fe4fc019d836",
              "5f232310-6752-42d6-9804-3642307d1abb"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 12552,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "6d57c16e-4d71-4de2-944b-25632bc08de4",
            "title": "#createBallotToAddNewValidator",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_test.js",
            "file": "/test/voting_to_change_keys_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: Voting to change keys [all features] #createBallotToAddNewValidator \"before each\" hook",
                "timedOut": false,
                "duration": 215,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKeyForVotingKey);\nawait addVotingKey(votingKey, miningKeyForVotingKey);\nawait addPayoutKey(accounts[6], miningKeyForVotingKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nid = await voting.nextBallotId.call();",
                "err": {},
                "isRoot": false,
                "uuid": "970e9c08-eaa7-4081-95c1-25ec411421ff",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: Voting to change keys [all features] #createBallotToAddNewValidator happy path",
                "timedOut": false,
                "duration": 299,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[3],       // _newMiningKey\n  accounts[4],       // _newVotingKey\n  accounts[5],       // _newPayoutKey\n  {from: miningKeyForVotingKey}\n).should.be.rejectedWith(ERROR_MSG);\nconst {logs} = await voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[3],       // _newMiningKey\n  accounts[4],       // _newVotingKey\n  accounts[5],       // _newPayoutKey\n  {from: votingKey}\n).should.be.fulfilled;\n\n(await voting.getKeysManager.call()).should.be.equal(keysManager.address);\nconst ballotInfo = await voting.getBallotInfo.call(id);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  accounts[3], // affectedKey\n  new web3.BigNumber(1), // affectedKeyType\n  accounts[4], // newVotingKey\n  accounts[5], // newPayoutKey\n  '0x0000000000000000000000000000000000000000', // miningKey\n  new web3.BigNumber(0), // totalVoters\n  new web3.BigNumber(0), // progress\n  false, // isFinalized\n  new web3.BigNumber(1), // ballotType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false // canBeFinalizedNow\n]);\n\nlogs[0].event.should.be.equal(\"BallotCreated\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.ballotType.should.be.bignumber.equal(1);\nlogs[0].args.creator.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "80325ed0-4fae-49f4-b3bc-897f2f19e531",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "deny adding already existed voting key",
                "fullTitle": "Contract: Voting to change keys [all features] #createBallotToAddNewValidator deny adding already existed voting key",
                "timedOut": false,
                "duration": 30,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[3],       // _newMiningKey\n  votingKey,         // _newVotingKey\n  accounts[5],       // _newPayoutKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "25dab491-7974-4e91-9ef9-22ada3ea41a4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "deny adding already existed payout key",
                "fullTitle": "Contract: Voting to change keys [all features] #createBallotToAddNewValidator deny adding already existed payout key",
                "timedOut": false,
                "duration": 204,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[3],       // _newMiningKey\n  accounts[4],       // _newVotingKey\n  accounts[6],       // _newPayoutKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[3],       // _newMiningKey\n  accounts[4],       // _newVotingKey\n  accounts[5],       // _newPayoutKey\n  {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "48fb2b27-7e94-4ac3-9fb9-8db454544011",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should create validator with all keys after finalization",
                "fullTitle": "Contract: Voting to change keys [all features] #createBallotToAddNewValidator should create validator with all keys after finalization",
                "timedOut": false,
                "duration": 1390,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nconst {logs} = await keysManager.removePayoutKey(miningKeyForVotingKey);\nlogs[0].event.should.be.equal(\"PayoutKeyChanged\");\nawait addMiningKey(accounts[3]);\nawait addVotingKey(accounts[4], accounts[3]);\nawait addMiningKey(accounts[5]);\nawait addVotingKey(accounts[6], accounts[5]);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[7],       // _newMiningKey\n  accounts[8],       // _newVotingKey\n  accounts[9],       // _newPayoutKey\n  {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.accept, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.accept, {from: accounts[4]}).should.be.fulfilled;\nawait voting.vote(id, choice.accept, {from: accounts[6]}).should.be.fulfilled;\n(await poaNetworkConsensusMock.isValidator.call(accounts[7])).should.be.equal(false);\n(await keysManager.isMiningActive.call(accounts[7])).should.be.equal(false);\n(await keysManager.isVotingActive.call(accounts[8])).should.be.equal(false);\n(await keysManager.miningKeyByVoting.call(accounts[8])).should.be.equal('0x0000000000000000000000000000000000000000');\n(await keysManager.miningKeyByPayout.call(accounts[9])).should.be.equal('0x0000000000000000000000000000000000000000');\nawait voting.setTime(VOTING_END_DATE+1);\nawait finalize(id, true, {from: votingKey});\n(await poaNetworkConsensusMock.isValidator.call(accounts[7])).should.be.equal(true);\n(await keysManager.isMiningActive.call(accounts[7])).should.be.equal(true);\n(await keysManager.isVotingActive.call(accounts[8])).should.be.equal(true);\n(await keysManager.miningKeyByVoting.call(accounts[8])).should.be.equal(accounts[7]);\n(await keysManager.miningKeyByPayout.call(accounts[9])).should.be.equal(accounts[7]);\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(4);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(5);",
                "err": {},
                "isRoot": false,
                "uuid": "117d768a-40ce-4589-b0b4-2d192dea8369",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow removing new validator if finalizeChange did not happen",
                "fullTitle": "Contract: Voting to change keys [all features] #createBallotToAddNewValidator should allow removing new validator if finalizeChange did not happen",
                "timedOut": false,
                "duration": 2312,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nconst {logs} = await keysManager.removePayoutKey(miningKeyForVotingKey);\nlogs[0].event.should.be.equal(\"PayoutKeyChanged\");\nawait addMiningKey(accounts[3]);\nawait addVotingKey(accounts[4], accounts[3]);\nawait addMiningKey(accounts[5]);\nawait addVotingKey(accounts[6], accounts[5]);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[7],       // _newMiningKey\n  accounts[8],       // _newVotingKey\n  accounts[9],       // _newPayoutKey\n  {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.accept, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.accept, {from: accounts[4]}).should.be.fulfilled;\nawait voting.vote(id, choice.accept, {from: accounts[6]}).should.be.fulfilled;\n(await poaNetworkConsensusMock.isValidator.call(accounts[7])).should.be.equal(false);\n(await keysManager.isMiningActive.call(accounts[7])).should.be.equal(false);\n(await keysManager.isVotingActive.call(accounts[8])).should.be.equal(false);\n(await keysManager.miningKeyByVoting.call(accounts[8])).should.be.equal('0x0000000000000000000000000000000000000000');\n(await keysManager.miningKeyByPayout.call(accounts[9])).should.be.equal('0x0000000000000000000000000000000000000000');\nawait voting.setTime(VOTING_END_DATE+1);\nawait finalize(id, true, {from: votingKey});\n(await poaNetworkConsensusMock.isValidator.call(accounts[7])).should.be.equal(true);\n(await keysManager.isMiningActive.call(accounts[7])).should.be.equal(true);\n(await keysManager.isVotingActive.call(accounts[8])).should.be.equal(true);\n(await keysManager.miningKeyByVoting.call(accounts[8])).should.be.equal(accounts[7]);\n(await keysManager.miningKeyByPayout.call(accounts[9])).should.be.equal(accounts[7]);\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(4);\nVOTING_START_DATE = moment.utc().add(20, 'days').unix();\nVOTING_END_DATE = moment.utc().add(30, 'days').unix();\nid = await voting.nextBallotId.call();\nawait voting.createBallot(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  2,                 // _ballotType (KeyRemoval)\n  1,                 // _affectedKeyType (MiningKey)\n  \"memo\",            // _memo\n  accounts[7],       // _affectedKey\n  accounts[7],       // _miningKey\n  {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.accept, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.accept, {from: accounts[4]}).should.be.fulfilled;\nawait voting.vote(id, choice.accept, {from: accounts[6]}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE+1);\nawait finalize(id, true, {from: votingKey});\n(await poaNetworkConsensusMock.isValidator.call(accounts[7])).should.be.equal(false);\n(await keysManager.isMiningActive.call(accounts[7])).should.be.equal(false);\n(await keysManager.isVotingActive.call(accounts[8])).should.be.equal(false);\n(await keysManager.isPayoutActive.call(accounts[7])).should.be.equal(false);\n(await keysManager.miningKeyByVoting.call(accounts[8])).should.be.equal('0x0000000000000000000000000000000000000000');\n(await keysManager.miningKeyByPayout.call(accounts[9])).should.be.equal('0x0000000000000000000000000000000000000000');\n(await keysManager.getVotingByMining.call(accounts[7])).should.be.equal('0x0000000000000000000000000000000000000000');\n(await keysManager.getPayoutByMining.call(accounts[7])).should.be.equal('0x0000000000000000000000000000000000000000');\n\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(4);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(4);",
                "err": {},
                "isRoot": false,
                "uuid": "eea795f2-917f-458c-906a-6b3b1434c36d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "80325ed0-4fae-49f4-b3bc-897f2f19e531",
              "25dab491-7974-4e91-9ef9-22ada3ea41a4",
              "48fb2b27-7e94-4ac3-9fb9-8db454544011",
              "117d768a-40ce-4589-b0b4-2d192dea8369",
              "eea795f2-917f-458c-906a-6b3b1434c36d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 4235,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "f26a3754-4542-446f-9c57-5a28e19fd158",
            "title": "#vote",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_test.js",
            "file": "/test/voting_to_change_keys_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: Voting to change keys [all features] #vote \"before each\" hook",
                "timedOut": false,
                "duration": 310,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nid = await voting.nextBallotId.call();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  1,\n  \"memo\",\n  accounts[3], \n  accounts[1],\n  {from: votingKey}\n);",
                "err": {},
                "isRoot": false,
                "uuid": "31248c57-0107-4d33-acc6-193687814d8c",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "should let a validator to vote",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should let a validator to vote",
                "timedOut": false,
                "duration": 183,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.accept, {from: votingKey}).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id))[8];\nprogress.should.be.bignumber.equal(1);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(1);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "2e7f365b-4cc3-4eee-af2f-bb2e1f28c5a8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "reject vote should be accepted",
                "fullTitle": "Contract: Voting to change keys [all features] #vote reject vote should be accepted",
                "timedOut": false,
                "duration": 184,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id))[8];\nprogress.should.be.bignumber.equal(-1);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(2);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "3206ff89-f047-4188-ae7a-c8733d3266b3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow multiple voters to vote",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should allow multiple voters to vote",
                "timedOut": false,
                "duration": 831,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait addVotingKey(accounts[3], accounts[1]);\nawait voting.vote(id, choice.reject, {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\n// add new voter\nawait addMiningKey(accounts[2]);\nawait addVotingKey(accounts[4], accounts[2]);\nawait voting.vote(id, choice.reject, {from: accounts[4]}).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id))[8];\nprogress.should.be.bignumber.equal(-2);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(2);\nawait addMiningKey(accounts[3]);\nawait addVotingKey(accounts[5], accounts[3]);\nawait voting.vote(id, choice.accept, {from: accounts[5]}).should.be.fulfilled;\nprogress = (await voting.getBallotInfo.call(id))[8];\nprogress.should.be.bignumber.equal(-1);\ntotalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "c0f79b47-5b2d-4312-a5f6-fc484ded7e02",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote nonVoting key",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should not let vote nonVoting key",
                "timedOut": false,
                "duration": 64,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "e4a871b4-8b58-4e74-bbfd-d7e7c55f83fc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote before startTime key",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should not let vote before startTime key",
                "timedOut": false,
                "duration": 98,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE - 1);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "19ee17e7-53ed-4c2e-ab17-655998a59a35",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote after endTime key",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should not let vote after endTime key",
                "timedOut": false,
                "duration": 95,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE + 1);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "90f37028-8834-47a5-925d-1b11f9cc4bef",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with already voted key",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should not let vote with already voted key",
                "timedOut": false,
                "duration": 192,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "704afee2-813d-43b0-bd6a-c8d8de5fb782",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid choice",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should not let vote with invalid choice",
                "timedOut": false,
                "duration": 164,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, 0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, 3, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "c31bca85-a1dd-4c24-883e-74df0a07fd47",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid id",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should not let vote with invalid id",
                "timedOut": false,
                "duration": 176,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(99, 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(-3, 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "b32b96a8-4c00-49c1-be62-eee721405641",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2e7f365b-4cc3-4eee-af2f-bb2e1f28c5a8",
              "3206ff89-f047-4188-ae7a-c8733d3266b3",
              "c0f79b47-5b2d-4312-a5f6-fc484ded7e02",
              "e4a871b4-8b58-4e74-bbfd-d7e7c55f83fc",
              "19ee17e7-53ed-4c2e-ab17-655998a59a35",
              "90f37028-8834-47a5-925d-1b11f9cc4bef",
              "704afee2-813d-43b0-bd6a-c8d8de5fb782",
              "c31bca85-a1dd-4c24-883e-74df0a07fd47",
              "b32b96a8-4c00-49c1-be62-eee721405641"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1987,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "e4d272b6-5f00-415e-a9e1-bba7d0b13e25",
            "title": "#finalize",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_test.js",
            "file": "/test/voting_to_change_keys_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize \"before each\" hook",
                "timedOut": false,
                "duration": 464,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "votingKey  = accounts[3];\nvotingKey2 = accounts[5];\nvotingKey3 = accounts[6];\npayoutKeyToAdd = accounts[0];\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait addMiningKey(accounts[2]);\nawait addVotingKey(votingKey2, accounts[2]);\nawait addMiningKey(accounts[4]);\nawait addVotingKey(votingKey3, accounts[4]);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "e19a5388-a37c-42c7-b8b1-8c4c19c1b2f8",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path - no action since it did not meet minimum number of totalVoters",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize happy path - no action since it did not meet minimum number of totalVoters",
                "timedOut": false,
                "duration": 706,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  3,\n  \"memo\",\n  payoutKeyToAdd,\n  accounts[1],\n  {from: votingKey}\n);\nlet activeBallotsLength = await voting.activeBallotsLength.call();\nvotingId = await voting.activeBallots.call(activeBallotsLength.toNumber() - 1);\nawait voting.finalize(votingId, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.finalize(votingId).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(VOTING_END_DATE + 1);\nconst {logs} = await voting.finalize(votingId, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nactiveBallotsLength = await voting.activeBallotsLength.call();\nactiveBallotsLength.should.be.bignumber.equal(0);\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId))[9]); // isFinalized\n// Finalized(msg.sender);\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.voter.should.be.equal(votingKey);\nconst ballotInfo = await voting.getBallotInfo.call(votingId);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  payoutKeyToAdd, // affectedKey\n  new web3.BigNumber(3), // affectedKeyType\n  \"0x0000000000000000000000000000000000000000\", // newVotingKey\n  \"0x0000000000000000000000000000000000000000\", // newPayoutKey\n  accounts[1], // miningKey\n  new web3.BigNumber(1), // totalVoters\n  new web3.BigNumber(-1), // progress\n  true, // isFinalized\n  new web3.BigNumber(1), // ballotType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false // canBeFinalizedNow\n]);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(3);\n(await voting.getIndex.call(votingId)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(votingId)).should.be.bignumber.equal(3);\n\ntrue.should.be.equal(\n  await voting.hasAlreadyVoted.call(votingId, votingKey)\n);\nconst keysState = await keysManager.validatorKeys.call(accounts[1]);\nkeysState.should.be.deep.equal(\n  [ votingKey,\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "6529ddfb-fa9f-449f-a1a2-6c2e0e0ad05a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize addition of payout key",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize addition of payout key",
                "timedOut": false,
                "duration": 1141,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// Ballot to Add Payout Key for miner account[1]\nawait deployAndTestBallot({\n  _affectedKey: payoutKeyToAdd,\n  _affectedKeyType: 3,\n  _miningKey: accounts[1],\n  _ballotType: 1,\n})\nconst keysState = await keysManager.validatorKeys.call(accounts[1]);\nkeysState.should.be.deep.equal(\n  [ votingKey,\n  payoutKeyToAdd,\n  true,\n  true,\n  true ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "564f9df9-b8a1-4887-84bd-4dcd71623a5d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize addition of VotingKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize addition of VotingKey",
                "timedOut": false,
                "duration": 1152,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[7];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\nlet votingKeyToAdd = accounts[8];\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: votingKeyToAdd,\n  _affectedKeyType: 2,\n  _miningKey: miningKey,\n  _ballotType: 1,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ votingKeyToAdd,\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "7e5e25de-0eaf-424d-a84f-184420ea4991",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot create ballot for using previous mining key",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize cannot create ballot for using previous mining key",
                "timedOut": false,
                "duration": 2305,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(voting.address);\nlet miningKey = accounts[6];\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: miningKey,\n  _affectedKeyType: 1,\n  _miningKey: '0x0000000000000000000000000000000000000000',\n  _ballotType: 1,\n})\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\ntrue.should.be.equal(await poaNetworkConsensusMock.isValidator.call(miningKey));\nlet validators = await poaNetworkConsensusMock.getValidators.call();\nawait voting.setTime(VOTING_START_DATE - 1);\nawait deployAndTestBallot({\n  _affectedKey: accounts[5],\n  _affectedKeyType: 1,\n  _miningKey: miningKey,\n  _ballotType: 3,\n  \n})\nawait voting.setTime(VOTING_START_DATE - 1);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  3,\n  1,\n  \"memo\",\n  miningKey,\n  accounts[5],\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "8c6e879c-68d3-40c0-9d47-c3a1433dd2c0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize addition of MiningKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize addition of MiningKey",
                "timedOut": false,
                "duration": 1194,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(voting.address);\nlet miningKey = accounts[6];\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: miningKey,\n  _affectedKeyType: 1,\n  _miningKey: '0x0000000000000000000000000000000000000000',\n  _ballotType: 1,\n  \n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false ]\n)\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators.call();\nvalidators.should.contain(miningKey);\ntrue.should.be.equal(await poaNetworkConsensusMock.isValidator.call(miningKey));",
                "err": {},
                "isRoot": false,
                "uuid": "fc3b5219-d292-4f20-bcef-10909938efc0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize removal of MiningKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize removal of MiningKey",
                "timedOut": false,
                "duration": 2031,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: miningKey,\n  _affectedKeyType: 1,\n  _miningKey: miningKey,\n  _ballotType: 2,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false ]\n)\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators.call();\nvalidators.should.not.contain(miningKey);\nfalse.should.be.equal(await poaNetworkConsensusMock.isValidator.call(miningKey));",
                "err": {},
                "isRoot": false,
                "uuid": "10458bca-7082-49d4-8297-0699bdbb791e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize removal of VotingKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize removal of VotingKey",
                "timedOut": false,
                "duration": 1194,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[7];\nlet votingKeyToAdd = accounts[8];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(miningKey);\nawait addVotingKey(votingKeyToAdd, miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: votingKeyToAdd,\n  _affectedKeyType: 2,\n  _miningKey: miningKey,\n  _ballotType: 2,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "2ca42ab3-d7f1-423d-932d-8b052c389ce4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize removal of PayoutKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize removal of PayoutKey",
                "timedOut": false,
                "duration": 1118,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[7];\nlet affectedKey = accounts[8];\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKey);\nawait addPayoutKey(affectedKey, miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: affectedKey,\n  _affectedKeyType: 3,\n  _miningKey: miningKey,\n  _ballotType: 2,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "8c17ef4f-8559-4da5-9cb7-7c6dfcf6e826",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize swap of VotingKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize swap of VotingKey",
                "timedOut": false,
                "duration": 1255,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[7];\nlet affectedKey = accounts[8];\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKey);\nawait addVotingKey(affectedKey, miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nlet newVotingKey = accounts[2];\nawait deployAndTestBallot({\n  _affectedKey: newVotingKey,\n  _affectedKeyType: 2,\n  _miningKey: miningKey,\n  _ballotType: 3,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ newVotingKey,\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "a1d9ec3d-35b5-4983-a398-83b19ff8c520",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize swap of PayoutKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize swap of PayoutKey",
                "timedOut": false,
                "duration": 1108,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[7];\nlet affectedKey = accounts[8];\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKey);\nawait addPayoutKey(affectedKey, miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nlet newPayoutKey = accounts[2];\nawait deployAndTestBallot({\n  _affectedKey: newPayoutKey,\n  _affectedKeyType: 3,\n  _miningKey: miningKey,\n  _ballotType: 3,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  newPayoutKey,\n  true,\n  false,\n  true ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "b83873bd-b0d8-4276-ad91-27f4d52d3e4f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize swap of MiningKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize swap of MiningKey",
                "timedOut": false,
                "duration": 1448,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nlet affectedKey = accounts[5];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: affectedKey,\n  _affectedKeyType: 1,\n  _miningKey: miningKey,\n  _ballotType: 3,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false ]\n)\nconst keysStateNew = await keysManager.validatorKeys.call(affectedKey);\nkeysStateNew.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false ]\n)\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators.call();\nvalidators.should.not.contain(miningKey);\nvalidators.should.contain(affectedKey);\nfalse.should.be.equal(await poaNetworkConsensusMock.isValidator.call(miningKey));\ntrue.should.be.equal(await poaNetworkConsensusMock.isValidator.call(affectedKey));",
                "err": {},
                "isRoot": false,
                "uuid": "df519fee-7ee4-4e5d-9e8c-a81d9b83ddb4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevent double finalize",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize prevent double finalize",
                "timedOut": false,
                "duration": 1874,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nlet affectedKey = accounts[5];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  3,\n  1,\n  \"memo\",\n  affectedKey,\n  miningKey,\n  {from: votingKey}\n);\nawait voting.createBallot(\n  VOTING_START_DATE+2,\n  VOTING_END_DATE+2,\n  2,\n  1,\n  \"memo\",\n  affectedKey,\n  miningKey,\n  {from: votingKey}\n);\nconst activeBallotsLength = await voting.activeBallotsLength.call();\nvotingId = await voting.activeBallots.call(activeBallotsLength.toNumber() - 2);\nlet votingIdForSecond = votingId.add(1);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.reject, {from: votingKey}).should.be.fulfilled;\nfalse.should.be.equal(await voting.hasAlreadyVoted.call(votingId, votingKey2));\nawait voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nfalse.should.be.equal((await voting.getBallotInfo.call(votingId))[9]); // isFinalized\nawait finalize(votingId, true, {from: votingKey});\nnew web3.BigNumber(3).should.be.bignumber.equal(await voting.getBallotType.call(votingId));\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId))[9]); // isFinalized\nawait voting.finalize(votingId, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.finalize(votingIdForSecond, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nnew web3.BigNumber(2).should.be.bignumber.equal(await voting.getBallotType.call(votingIdForSecond));\nfalse.should.be.equal((await voting.getBallotInfo.call(votingIdForSecond))[9]); // isFinalized\nawait voting.vote(votingIdForSecond, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 3);\nawait finalize(votingIdForSecond, true, {from: votingKey});\nnew web3.BigNumber(-1).should.be.bignumber.equal((await voting.getBallotInfo.call(votingIdForSecond))[8]) // progress\nnew web3.BigNumber(1).should.be.bignumber.equal((await voting.getBallotInfo.call(votingId))[8]) // progress",
                "err": {},
                "isRoot": false,
                "uuid": "96f255f1-6939-4159-9e6f-66dfb152cd85",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "allowed at once after all validators gave their votes",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize allowed at once after all validators gave their votes",
                "timedOut": false,
                "duration": 1836,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const miningKey = accounts[4];\nconst affectedKey = accounts[6];\nawait voting.createBallot(\n  VOTING_START_DATE, // uint256 _startTime\n  VOTING_END_DATE,   // uint256 _endTime\n  3,                 // uint256 _ballotType (KeySwap)\n  1,                 // uint256 _affectedKeyType (MiningKey)\n  \"memo\",            // string _memo\n  affectedKey,       // address _affectedKey\n  miningKey,         // address _miningKey\n  {from: votingKey3}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(0))[9]); // isFinalized\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(0, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(0, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(0, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+1);\nawait voting.finalize(0, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(0))[9]); // isFinalized\nawait voting.setTime(VOTING_START_DATE+172800+1);\n(await voting.getTime.call()).should.be.bignumber.below(VOTING_END_DATE);\nawait finalize(0, true, {from: votingKey2});\ntrue.should.be.equal((await voting.getBallotInfo.call(0))[9]); // isFinalized\nawait voting.setTime(VOTING_END_DATE+1);\nawait voting.finalize(0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = moment.utc().add(12, 'days').unix();\nVOTING_END_DATE = moment.utc().add(22, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, // uint256 _startTime\n  VOTING_END_DATE,   // uint256 _endTime\n  3,                 // uint256 _ballotType (KeySwap)\n  1,                 // uint256 _affectedKeyType (MiningKey)\n  \"memo\",            // string _memo\n  affectedKey,       // address _affectedKey\n  miningKey,         // address _miningKey\n  {from: votingKey3}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(1))[9]); // isFinalized\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(1, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(1, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+172800+1);\n(await voting.getTime.call()).should.be.bignumber.below(VOTING_END_DATE);\nawait voting.finalize(1, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(1))[9]); // isFinalized\nawait voting.setTime(VOTING_END_DATE+1);\nawait finalize(1, true, {from: votingKey2});\ntrue.should.be.equal((await voting.getBallotInfo.call(1))[9]); // isFinalized",
                "err": {},
                "isRoot": false,
                "uuid": "432537d0-c666-4ae6-b07f-532a0a8ec6f9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6529ddfb-fa9f-449f-a1a2-6c2e0e0ad05a",
              "564f9df9-b8a1-4887-84bd-4dcd71623a5d",
              "7e5e25de-0eaf-424d-a84f-184420ea4991",
              "8c6e879c-68d3-40c0-9d47-c3a1433dd2c0",
              "fc3b5219-d292-4f20-bcef-10909938efc0",
              "10458bca-7082-49d4-8297-0699bdbb791e",
              "2ca42ab3-d7f1-423d-932d-8b052c389ce4",
              "8c17ef4f-8559-4da5-9cb7-7c6dfcf6e826",
              "a1d9ec3d-35b5-4983-a398-83b19ff8c520",
              "b83873bd-b0d8-4276-ad91-27f4d52d3e4f",
              "df519fee-7ee4-4e5d-9e8c-a81d9b83ddb4",
              "96f255f1-6939-4159-9e6f-66dfb152cd85",
              "432537d0-c666-4ae6-b07f-532a0a8ec6f9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 18362,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "225903d0-44a9-467b-acf7-124af5a1af32",
            "title": "#migrate",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_test.js",
            "file": "/test/voting_to_change_keys_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should copy a ballot to the new contract",
                "fullTitle": "Contract: Voting to change keys [all features] #migrate should copy a ballot to the new contract",
                "timedOut": false,
                "duration": 2288,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKeyForVotingKey);\nawait addVotingKey(votingKey, miningKeyForVotingKey);\nawait addMiningKey(accounts[3]);\nawait addVotingKey(accounts[4], accounts[3]);\nawait addMiningKey(accounts[5]);\nawait addVotingKey(accounts[6], accounts[5]);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nconst id = await voting.nextBallotId.call();\nawait voting.createBallot(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  1,                 // _ballotType (KeyAdding)\n  1,                 // _affectedKeyType (MiningKey)\n  \"memo\",            // _memo\n  accounts[7],       // _affectedKey\n  accounts[2],       // _miningKey\n  {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: accounts[4]}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: accounts[6]}).should.be.fulfilled;\nlet votingNew = await VotingToChangeKeysMock.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingNew.address);\nvotingNew = await VotingToChangeKeysMock.at(votingEternalStorage.address);\nawait votingNew.init(172800).should.be.fulfilled;\nawait votingNew.setTime(VOTING_START_DATE);\nawait votingNew.migrateBasicOne(\n  id,\n  voting.address,\n  [miningKeyForVotingKey, accounts[3], accounts[5]]\n).should.be.fulfilled;\nconst ballotInfo = await votingNew.getBallotInfo.call(id);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  accounts[7], // affectedKey\n  new web3.BigNumber(1), // affectedKeyType\n  \"0x0000000000000000000000000000000000000000\", // newVotingKey\n  \"0x0000000000000000000000000000000000000000\", // newPayoutKey\n  accounts[2], // miningKey\n  new web3.BigNumber(3), // totalVoters\n  new web3.BigNumber(-3), // progress\n  false, // isFinalized\n  new web3.BigNumber(1), // ballotType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false // canBeFinalizedNow\n]);\n(await votingNew.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await votingNew.getIndex.call(id)).should.be.bignumber.equal(0);\n(await votingNew.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(3);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, miningKeyForVotingKey)).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[2])).should.be.equal(false);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[3])).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[4])).should.be.equal(false);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[5])).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[6])).should.be.equal(false);\n(await votingNew.nextBallotId.call()).should.be.bignumber.equal(0);\n(await votingNew.activeBallotsLength.call()).should.be.bignumber.equal(0);\n(await votingNew.validatorActiveBallots.call(miningKeyForVotingKey)).should.be.bignumber.equal(0);\nawait votingNew.migrateBasicAll(voting.address, {from: accounts[6]}).should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateBasicAll('0x0000000000000000000000000000000000000000').should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateBasicAll(voting.address).should.be.fulfilled;\nawait votingNew.migrateBasicAll(voting.address).should.be.fulfilled;\n(await votingNew.nextBallotId.call()).should.be.bignumber.equal(1);\n(await votingNew.activeBallotsLength.call()).should.be.bignumber.equal(1);\n(await votingNew.validatorActiveBallots.call(miningKeyForVotingKey)).should.be.bignumber.equal(1);\n(await votingNew.migrateDisabled.call()).should.be.equal(false);\nawait votingNew.migrateDisable({from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateDisable().should.be.fulfilled;\n(await votingNew.migrateDisabled.call()).should.be.equal(true);\nawait votingNew.migrateBasicAll(voting.address).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "553e3e40-4180-4a84-801f-26d43ca7d6a3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "553e3e40-4180-4a84-801f-26d43ca7d6a3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2288,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "55c9413f-152a-4479-8e68-bf7b60d8c98a",
            "title": "#upgradeTo",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_test.js",
            "file": "/test/voting_to_change_keys_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: Voting to change keys [all features] #upgradeTo \"before each\" hook",
                "timedOut": false,
                "duration": 145,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "proxyStorageStubAddress = accounts[8];\nvoting = await VotingToChangeKeysMock.new();\nvotingOldImplementation = voting.address;\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageStubAddress, voting.address);\nvoting = await VotingToChangeKeysMock.at(votingEternalStorage.address);\nawait voting.init(172800).should.be.fulfilled;\nawait voting.migrateDisable().should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "876d7017-fb88-4b6e-905d-579b65e8e6f7",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by ProxyStorage",
                "fullTitle": "Contract: Voting to change keys [all features] #upgradeTo may only be called by ProxyStorage",
                "timedOut": false,
                "duration": 123,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToChangeKeysNew.new();\nawait votingEternalStorage.upgradeTo(votingNew.address, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});",
                "err": {},
                "isRoot": false,
                "uuid": "319f98d5-ecca-44c9-bfeb-5f892068f2ac",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change implementation address",
                "fullTitle": "Contract: Voting to change keys [all features] #upgradeTo should change implementation address",
                "timedOut": false,
                "duration": 101,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToChangeKeysNew.new();\nlet newImplementation = votingNew.address;\n(await votingEternalStorage.implementation.call()).should.be.equal(votingOldImplementation);\nawait upgradeTo(newImplementation, {from: proxyStorageStubAddress});\n(await votingEternalStorage.implementation.call()).should.be.equal(newImplementation);",
                "err": {},
                "isRoot": false,
                "uuid": "cb09f6d3-b994-496a-9fc1-c6726aaf594b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment implementation version",
                "fullTitle": "Contract: Voting to change keys [all features] #upgradeTo should increment implementation version",
                "timedOut": false,
                "duration": 108,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToChangeKeysNew.new();\nlet oldVersion = await votingEternalStorage.version.call();\nlet newVersion = oldVersion.add(1);\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\n(await votingEternalStorage.version.call()).should.be.bignumber.equal(newVersion);",
                "err": {},
                "isRoot": false,
                "uuid": "c9161ea5-dc12-4480-acdb-13c782cf9f8d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should work",
                "fullTitle": "Contract: Voting to change keys [all features] #upgradeTo new implementation should work",
                "timedOut": false,
                "duration": 129,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToChangeKeysNew.new();\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\nvotingNew = await VotingToChangeKeysNew.at(votingEternalStorage.address);\n(await votingNew.initialized.call()).should.be.equal(false);\nawait votingNew.initialize();\n(await votingNew.initialized.call()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "2bcda613-fb32-425b-acef-1f8b13eaf741",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same proxyStorage address",
                "fullTitle": "Contract: Voting to change keys [all features] #upgradeTo new implementation should use the same proxyStorage address",
                "timedOut": false,
                "duration": 100,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToChangeKeysNew.new();\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\nvotingNew = await VotingToChangeKeysNew.at(votingEternalStorage.address);\n(await votingNew.proxyStorage.call()).should.be.equal(proxyStorageStubAddress);",
                "err": {},
                "isRoot": false,
                "uuid": "2cee2e94-3d20-49e6-ac51-137c52da127b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same storage",
                "fullTitle": "Contract: Voting to change keys [all features] #upgradeTo new implementation should use the same storage",
                "timedOut": false,
                "duration": 996,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const payoutKeyToAdd = accounts[0];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait votingEternalStorage.setProxyStorage(proxyStorageMock.address);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  3,\n  \"memo\",\n  payoutKeyToAdd,\n  accounts[1],\n  {from: votingKey}\n);\nconst activeBallotsLength = await voting.activeBallotsLength.call();\nconst votingId = await voting.activeBallots.call(activeBallotsLength.toNumber() - 1);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nawait finalize(votingId, true, {from: votingKey});\nawait votingEternalStorage.setProxyStorage(proxyStorageStubAddress);\nlet votingNew = await VotingToChangeKeysNew.new();\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\nvotingNew = await VotingToChangeKeysNew.at(votingEternalStorage.address);\nconst ballotInfo = await votingNew.getBallotInfo.call(votingId);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  payoutKeyToAdd, // affectedKey\n  new web3.BigNumber(3), // affectedKeyType\n  \"0x0000000000000000000000000000000000000000\", // newVotingKey\n  \"0x0000000000000000000000000000000000000000\", // newPayoutKey\n  accounts[1], // miningKey\n  new web3.BigNumber(1), // totalVoters\n  new web3.BigNumber(-1), // progress\n  true, // isFinalized\n  new web3.BigNumber(1), // ballotType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false // canBeFinalizedNow\n]);\n(await votingNew.getQuorumState.call(votingId)).should.be.bignumber.equal(3);\n(await votingNew.getIndex.call(votingId)).should.be.bignumber.equal(0);\n(await votingNew.getMinThresholdOfVoters.call(votingId)).should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "306211d5-a1fe-4f1d-91b7-c51980c2af4c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "319f98d5-ecca-44c9-bfeb-5f892068f2ac",
              "cb09f6d3-b994-496a-9fc1-c6726aaf594b",
              "c9161ea5-dc12-4480-acdb-13c782cf9f8d",
              "2bcda613-fb32-425b-acef-1f8b13eaf741",
              "2cee2e94-3d20-49e6-ac51-137c52da127b",
              "306211d5-a1fe-4f1d-91b7-c51980c2af4c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1557,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "09b46b71-cdb4-489e-8d60-d5b30973a77f",
        "title": "Contract: Voting to change keys upgraded [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_upgrade_test.js",
        "file": "/test/voting_to_change_keys_upgrade_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: Voting to change keys upgraded [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 3615,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "94584579-170c-4984-b305-139871395cc3",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: Voting to change keys upgraded [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "e3daaab5-44c6-4e82-bd0f-9d5c538ab049",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: Voting to change keys upgraded [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 1052,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "votingKey = accounts[2];\nminingKeyForVotingKey = accounts[1];\nmasterOfCeremony = accounts[0];\npoaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony, []);\n\nproxyStorageMock = await ProxyStorageMock.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorageMock.address);\nproxyStorageMock = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorageMock.init(poaNetworkConsensusMock.address).should.be.fulfilled;\n\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\nkeysManager = await KeysManagerMock.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, keysManager.address);\nkeysManager = await KeysManagerMock.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\nlet ballotsStorage = await BallotsStorage.new();\nconst ballotsEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, ballotsStorage.address);\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, validatorMetadata.address);\nvoting = await VotingToChangeKeysMock.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, voting.address);\nawait proxyStorageMock.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingEternalStorage.address,\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  accounts[0]\n);\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\nvoting = await VotingToChangeKeysMock.at(votingEternalStorage.address);\nawait voting.init(172800).should.be.fulfilled;\nawait voting.migrateDisable().should.be.fulfilled;\nlet votingNew = await VotingToChangeKeysMock.new();\nawait votingEternalStorage.setProxyStorage(accounts[6]);\nconst {logs} = await votingEternalStorage.upgradeTo(votingNew.address, {from: accounts[6]});\nlogs[0].event.should.be.equal(\"Upgraded\");\nawait votingEternalStorage.setProxyStorage(proxyStorageMock.address);\nvoting = await VotingToChangeKeysMock.at(votingEternalStorage.address);",
            "err": {},
            "isRoot": false,
            "uuid": "c944b6be-3b7c-48f6-a8d4-b036f849c970",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: Voting to change keys upgraded [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "d82b5d6b-06a3-42c6-9d62-880c4a29848e",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "f946696d-7302-4791-8294-17ff04ecc668",
            "title": "#createBallot",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_upgrade_test.js",
            "file": "/test/voting_to_change_keys_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #createBallot happy path",
                "timedOut": false,
                "duration": 744,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(accounts[1]);\nlet result = await keysManager.swapMiningKey(accounts[3], accounts[1]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nawait addVotingKey(votingKey, accounts[3]);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nconst id = await voting.nextBallotId.call();\n\nawait voting.createBallot(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  1,                 // _ballotType (KeyAdding)\n  1,                 // _affectedKeyType (MiningKey)\n  \"memo\",            // _memo\n  accounts[4],       // _affectedKey\n  accounts[5],       // _miningKey\n  {from: miningKeyForVotingKey}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallot(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  1,                 // _ballotType (KeyAdding)\n  1,                 // _affectedKeyType (MiningKey)\n  \"memo\",            // _memo\n  accounts[3],       // _affectedKey\n  accounts[5],       // _miningKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nconst {logs} = await voting.createBallot(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  1,                 // _ballotType (KeyAdding)\n  1,                 // _affectedKeyType (MiningKey)\n  \"memo\",            // _memo\n  accounts[4],       // _affectedKey\n  accounts[5],       // _miningKey\n  {from: votingKey}\n).should.be.fulfilled;\nconst ballotInfo = await voting.getBallotInfo.call(id);\nballotInfo[0].should.be.bignumber.equal(VOTING_START_DATE);\nballotInfo[1].should.be.bignumber.equal(VOTING_END_DATE);\n(await voting.getKeysManager.call()).should.be.equal(keysManager.address);\nlogs[0].event.should.be.equal(\"BallotCreated\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.creator.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "e5fa1f2e-99d1-4023-94f8-42ded8c72304",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create voting with invalid duration",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #createBallot should not let create voting with invalid duration",
                "timedOut": false,
                "duration": 164,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(10, 'days').unix();\nVOTING_END_DATE = moment.utc().add(2, 'seconds').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  1, // _affectedKeyType\n  \"memo\",\n  accounts[1], // _affectedKey\n  accounts[2], // _miningKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = 0\nVOTING_END_DATE = moment.utc().add(2, 'seconds').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  1, // _affectedKeyType\n  \"memo\",\n  accounts[1], // _affectedKey\n  accounts[2], // _miningKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = moment.utc().add(2, 'seconds').unix();\nVOTING_END_DATE = 0\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  1, // _affectedKeyType\n  \"memo\",\n  accounts[1], // _affectedKey\n  accounts[2], // _miningKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "0b11c32b-fea5-4e6b-858a-7ff1b700ad2a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let add votingKey for MoC",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #createBallot should not let add votingKey for MoC",
                "timedOut": false,
                "duration": 434,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait addMiningKey(accounts[2]);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  2, // _affectedKeyType\n  \"memo\",\n  accounts[5], // _affectedKey\n  masterOfCeremony, // _miningKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  2, // _affectedKeyType\n  \"memo\",\n  accounts[5], // _affectedKey\n  accounts[2], // _miningKey\n  {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "1f1b4534-a7d2-4115-a489-6d659d6c24a6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let add votingKey for 0x0",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #createBallot should not let add votingKey for 0x0",
                "timedOut": false,
                "duration": 442,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait addMiningKey(accounts[2]);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  2, // _affectedKeyType\n  \"memo\",\n  accounts[5], // _affectedKey\n  '0x0000000000000000000000000000000000000000', // _miningKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  2, // _affectedKeyType\n  \"memo\",\n  accounts[5], // _affectedKey\n  accounts[2], // _miningKey\n  {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "803d8682-87d5-4b65-aaa5-9b56e63c8ebd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let add payoutKey for 0x0",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #createBallot should not let add payoutKey for 0x0",
                "timedOut": false,
                "duration": 436,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait addMiningKey(accounts[2]);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  3,\n  \"memo\",\n  accounts[5],\n  '0x0000000000000000000000000000000000000000',\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  3,\n  \"memo\",\n  accounts[5],\n  accounts[2],\n  {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "c0da9b32-8b2e-43c1-8e80-08bb99694168",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create more ballots than the limit",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #createBallot should not let create more ballots than the limit",
                "timedOut": false,
                "duration": 10447,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  1,\n  \"memo\",\n  accounts[3],\n  accounts[2],\n  {from: votingKey}\n);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  1,\n  \"memo\",\n  accounts[3],\n  accounts[2],\n  {from: votingKey}\n);\nnew web3.BigNumber(200).should.be.bignumber.equal(await voting.getBallotLimitPerValidator.call());\nawait addValidators({proxyStorageMock, keysManager, poaNetworkConsensusMock}); //add 100 validators, so total will be 101 validator\nnew web3.BigNumber(1).should.be.bignumber.equal(await voting.getBallotLimitPerValidator.call());\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  1,\n  \"memo\",\n  accounts[3],\n  accounts[2],\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG)",
                "err": {},
                "isRoot": false,
                "uuid": "430595d8-5d6b-4b69-b5ae-49f3622aa15e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e5fa1f2e-99d1-4023-94f8-42ded8c72304",
              "0b11c32b-fea5-4e6b-858a-7ff1b700ad2a",
              "1f1b4534-a7d2-4115-a489-6d659d6c24a6",
              "803d8682-87d5-4b65-aaa5-9b56e63c8ebd",
              "c0da9b32-8b2e-43c1-8e80-08bb99694168",
              "430595d8-5d6b-4b69-b5ae-49f3622aa15e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 12667,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "4573b08d-5db0-4fee-80d7-33ab8d5060a7",
            "title": "#createBallotToAddNewValidator",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_upgrade_test.js",
            "file": "/test/voting_to_change_keys_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #createBallotToAddNewValidator \"before each\" hook",
                "timedOut": false,
                "duration": 313,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKeyForVotingKey);\nawait addVotingKey(votingKey, miningKeyForVotingKey);\nawait addPayoutKey(accounts[6], miningKeyForVotingKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nid = await voting.nextBallotId.call();",
                "err": {},
                "isRoot": false,
                "uuid": "274f84ab-83c9-4ea1-9db4-421c17ddf38b",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #createBallotToAddNewValidator happy path",
                "timedOut": false,
                "duration": 381,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[3],       // _newMiningKey\n  accounts[4],       // _newVotingKey\n  accounts[5],       // _newPayoutKey\n  {from: miningKeyForVotingKey}\n).should.be.rejectedWith(ERROR_MSG);\nconst {logs} = await voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[3],       // _newMiningKey\n  accounts[4],       // _newVotingKey\n  accounts[5],       // _newPayoutKey\n  {from: votingKey}\n).should.be.fulfilled;\n\n(await voting.getKeysManager.call()).should.be.equal(keysManager.address);\nconst ballotInfo = await voting.getBallotInfo.call(id);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  accounts[3], // affectedKey\n  new web3.BigNumber(1), // affectedKeyType\n  accounts[4], // newVotingKey\n  accounts[5], // newPayoutKey\n  '0x0000000000000000000000000000000000000000', // miningKey\n  new web3.BigNumber(0), // totalVoters\n  new web3.BigNumber(0), // progress\n  false, // isFinalized\n  new web3.BigNumber(1), // ballotType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false // canBeFinalizedNow\n]);\n\nlogs[0].event.should.be.equal(\"BallotCreated\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.ballotType.should.be.bignumber.equal(1);\nlogs[0].args.creator.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "d9b228f4-9e7b-487d-b3a6-fe9248075d56",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "deny adding already existed voting key",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #createBallotToAddNewValidator deny adding already existed voting key",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[3],       // _newMiningKey\n  votingKey,         // _newVotingKey\n  accounts[5],       // _newPayoutKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "815470ab-c1df-41d8-ab2f-bcc34a95603a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "deny adding already existed payout key",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #createBallotToAddNewValidator deny adding already existed payout key",
                "timedOut": false,
                "duration": 207,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[3],       // _newMiningKey\n  accounts[4],       // _newVotingKey\n  accounts[6],       // _newPayoutKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[3],       // _newMiningKey\n  accounts[4],       // _newVotingKey\n  accounts[5],       // _newPayoutKey\n  {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "fccb50e7-9490-4dc7-8d2f-8914d20fdbb3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should create validator with all keys after finalization",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #createBallotToAddNewValidator should create validator with all keys after finalization",
                "timedOut": false,
                "duration": 1263,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nconst {logs} = await keysManager.removePayoutKey(miningKeyForVotingKey);\nlogs[0].event.should.be.equal(\"PayoutKeyChanged\");\nawait addMiningKey(accounts[3]);\nawait addVotingKey(accounts[4], accounts[3]);\nawait addMiningKey(accounts[5]);\nawait addVotingKey(accounts[6], accounts[5]);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[7],       // _newMiningKey\n  accounts[8],       // _newVotingKey\n  accounts[9],       // _newPayoutKey\n  {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.accept, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.accept, {from: accounts[4]}).should.be.fulfilled;\nawait voting.vote(id, choice.accept, {from: accounts[6]}).should.be.fulfilled;\n(await poaNetworkConsensusMock.isValidator.call(accounts[7])).should.be.equal(false);\n(await keysManager.isMiningActive.call(accounts[7])).should.be.equal(false);\n(await keysManager.isVotingActive.call(accounts[8])).should.be.equal(false);\n(await keysManager.miningKeyByVoting.call(accounts[8])).should.be.equal('0x0000000000000000000000000000000000000000');\n(await keysManager.miningKeyByPayout.call(accounts[9])).should.be.equal('0x0000000000000000000000000000000000000000');\nawait voting.setTime(VOTING_END_DATE+1);\nawait finalize(id, true, {from: votingKey});\n(await poaNetworkConsensusMock.isValidator.call(accounts[7])).should.be.equal(true);\n(await keysManager.isMiningActive.call(accounts[7])).should.be.equal(true);\n(await keysManager.isVotingActive.call(accounts[8])).should.be.equal(true);\n(await keysManager.miningKeyByVoting.call(accounts[8])).should.be.equal(accounts[7]);\n(await keysManager.miningKeyByPayout.call(accounts[9])).should.be.equal(accounts[7]);\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(4);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(5);",
                "err": {},
                "isRoot": false,
                "uuid": "e068966f-1c4b-4ce0-99f0-137332c6ba8c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow removing new validator if finalizeChange did not happen",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #createBallotToAddNewValidator should allow removing new validator if finalizeChange did not happen",
                "timedOut": false,
                "duration": 2155,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nconst {logs} = await keysManager.removePayoutKey(miningKeyForVotingKey);\nlogs[0].event.should.be.equal(\"PayoutKeyChanged\");\nawait addMiningKey(accounts[3]);\nawait addVotingKey(accounts[4], accounts[3]);\nawait addMiningKey(accounts[5]);\nawait addVotingKey(accounts[6], accounts[5]);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[7],       // _newMiningKey\n  accounts[8],       // _newVotingKey\n  accounts[9],       // _newPayoutKey\n  {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.accept, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.accept, {from: accounts[4]}).should.be.fulfilled;\nawait voting.vote(id, choice.accept, {from: accounts[6]}).should.be.fulfilled;\n(await poaNetworkConsensusMock.isValidator.call(accounts[7])).should.be.equal(false);\n(await keysManager.isMiningActive.call(accounts[7])).should.be.equal(false);\n(await keysManager.isVotingActive.call(accounts[8])).should.be.equal(false);\n(await keysManager.miningKeyByVoting.call(accounts[8])).should.be.equal('0x0000000000000000000000000000000000000000');\n(await keysManager.miningKeyByPayout.call(accounts[9])).should.be.equal('0x0000000000000000000000000000000000000000');\nawait voting.setTime(VOTING_END_DATE+1);\nawait finalize(id, true, {from: votingKey});\n(await poaNetworkConsensusMock.isValidator.call(accounts[7])).should.be.equal(true);\n(await keysManager.isMiningActive.call(accounts[7])).should.be.equal(true);\n(await keysManager.isVotingActive.call(accounts[8])).should.be.equal(true);\n(await keysManager.miningKeyByVoting.call(accounts[8])).should.be.equal(accounts[7]);\n(await keysManager.miningKeyByPayout.call(accounts[9])).should.be.equal(accounts[7]);\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(4);\nVOTING_START_DATE = moment.utc().add(20, 'days').unix();\nVOTING_END_DATE = moment.utc().add(30, 'days').unix();\nid = await voting.nextBallotId.call();\nawait voting.createBallot(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  2,                 // _ballotType (KeyRemoval)\n  1,                 // _affectedKeyType (MiningKey)\n  \"memo\",            // _memo\n  accounts[7],       // _affectedKey\n  accounts[7],       // _miningKey\n  {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.accept, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.accept, {from: accounts[4]}).should.be.fulfilled;\nawait voting.vote(id, choice.accept, {from: accounts[6]}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE+1);\nawait finalize(id, true, {from: votingKey});\n(await poaNetworkConsensusMock.isValidator.call(accounts[7])).should.be.equal(false);\n(await keysManager.isMiningActive.call(accounts[7])).should.be.equal(false);\n(await keysManager.isVotingActive.call(accounts[8])).should.be.equal(false);\n(await keysManager.isPayoutActive.call(accounts[7])).should.be.equal(false);\n(await keysManager.miningKeyByVoting.call(accounts[8])).should.be.equal('0x0000000000000000000000000000000000000000');\n(await keysManager.miningKeyByPayout.call(accounts[9])).should.be.equal('0x0000000000000000000000000000000000000000');\n(await keysManager.getVotingByMining.call(accounts[7])).should.be.equal('0x0000000000000000000000000000000000000000');\n(await keysManager.getPayoutByMining.call(accounts[7])).should.be.equal('0x0000000000000000000000000000000000000000');\n\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(4);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(4);",
                "err": {},
                "isRoot": false,
                "uuid": "55dd7ee2-a44f-43aa-9f3a-edbd1d440683",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d9b228f4-9e7b-487d-b3a6-fe9248075d56",
              "815470ab-c1df-41d8-ab2f-bcc34a95603a",
              "fccb50e7-9490-4dc7-8d2f-8914d20fdbb3",
              "e068966f-1c4b-4ce0-99f0-137332c6ba8c",
              "55dd7ee2-a44f-43aa-9f3a-edbd1d440683"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 4040,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "f6c5f981-6f2c-41bb-8bff-2d8a0d18fafc",
            "title": "#vote",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_upgrade_test.js",
            "file": "/test/voting_to_change_keys_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #vote \"before each\" hook",
                "timedOut": false,
                "duration": 302,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nid = await voting.nextBallotId.call();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  1,\n  \"memo\",\n  accounts[3], \n  accounts[1],\n  {from: votingKey}\n);",
                "err": {},
                "isRoot": false,
                "uuid": "74357624-e694-4428-81e8-6c81666d6a79",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "should let a validator to vote",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #vote should let a validator to vote",
                "timedOut": false,
                "duration": 189,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.accept, {from: votingKey}).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id))[8];\nprogress.should.be.bignumber.equal(1);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(1);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "540f099a-4ec5-43ea-b4db-de6318759599",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "reject vote should be accepted",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #vote reject vote should be accepted",
                "timedOut": false,
                "duration": 185,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id))[8];\nprogress.should.be.bignumber.equal(-1);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(2);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "8489d35d-14ac-40d4-a0b2-4709f057de46",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow multiple voters to vote",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #vote should allow multiple voters to vote",
                "timedOut": false,
                "duration": 813,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait addVotingKey(accounts[3], accounts[1]);\nawait voting.vote(id, choice.reject, {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\n// add new voter\nawait addMiningKey(accounts[2]);\nawait addVotingKey(accounts[4], accounts[2]);\nawait voting.vote(id, choice.reject, {from: accounts[4]}).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id))[8];\nprogress.should.be.bignumber.equal(-2);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(2);\nawait addMiningKey(accounts[3]);\nawait addVotingKey(accounts[5], accounts[3]);\nawait voting.vote(id, choice.accept, {from: accounts[5]}).should.be.fulfilled;\nprogress = (await voting.getBallotInfo.call(id))[8];\nprogress.should.be.bignumber.equal(-1);\ntotalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "17443995-f112-4ed5-9a50-eaf0d61f85e5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote nonVoting key",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #vote should not let vote nonVoting key",
                "timedOut": false,
                "duration": 54,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "a64695c0-b35f-4dcc-b6f7-41a49a85869b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote before startTime key",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #vote should not let vote before startTime key",
                "timedOut": false,
                "duration": 108,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE - 1);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "5c6839b0-276d-4b1d-a79c-51c2b667583d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote after endTime key",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #vote should not let vote after endTime key",
                "timedOut": false,
                "duration": 98,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE + 1);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "4afee8a5-25ee-45b4-b542-e038ebbd3f55",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with already voted key",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #vote should not let vote with already voted key",
                "timedOut": false,
                "duration": 194,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "d239e64c-3b28-4473-a561-34ace6925828",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid choice",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #vote should not let vote with invalid choice",
                "timedOut": false,
                "duration": 190,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, 0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, 3, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "93cf8ee6-3b75-4135-9a37-9a722d083e5a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid id",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #vote should not let vote with invalid id",
                "timedOut": false,
                "duration": 180,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(99, 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(-3, 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "72f1ccd5-30da-4775-ac43-15e2f36eaad1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "540f099a-4ec5-43ea-b4db-de6318759599",
              "8489d35d-14ac-40d4-a0b2-4709f057de46",
              "17443995-f112-4ed5-9a50-eaf0d61f85e5",
              "a64695c0-b35f-4dcc-b6f7-41a49a85869b",
              "5c6839b0-276d-4b1d-a79c-51c2b667583d",
              "4afee8a5-25ee-45b4-b542-e038ebbd3f55",
              "d239e64c-3b28-4473-a561-34ace6925828",
              "93cf8ee6-3b75-4135-9a37-9a722d083e5a",
              "72f1ccd5-30da-4775-ac43-15e2f36eaad1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2011,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "9f92ed2d-06f7-4150-95df-67441f78a5a1",
            "title": "#finalize",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_upgrade_test.js",
            "file": "/test/voting_to_change_keys_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize \"before each\" hook",
                "timedOut": false,
                "duration": 469,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "votingKey  = accounts[3];\nvotingKey2 = accounts[5];\nvotingKey3 = accounts[6];\npayoutKeyToAdd = accounts[0];\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait addMiningKey(accounts[2]);\nawait addVotingKey(votingKey2, accounts[2]);\nawait addMiningKey(accounts[4]);\nawait addVotingKey(votingKey3, accounts[4]);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "30ff833c-5f6e-4c48-bceb-617cdee0b757",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path - no action since it did not meet minimum number of totalVoters",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize happy path - no action since it did not meet minimum number of totalVoters",
                "timedOut": false,
                "duration": 706,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  3,\n  \"memo\",\n  payoutKeyToAdd,\n  accounts[1],\n  {from: votingKey}\n);\nlet activeBallotsLength = await voting.activeBallotsLength.call();\nvotingId = await voting.activeBallots.call(activeBallotsLength.toNumber() - 1);\nawait voting.finalize(votingId, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.finalize(votingId).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(VOTING_END_DATE + 1);\nconst {logs} = await voting.finalize(votingId, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nactiveBallotsLength = await voting.activeBallotsLength.call();\nactiveBallotsLength.should.be.bignumber.equal(0);\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId))[9]); // isFinalized\n// Finalized(msg.sender);\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.voter.should.be.equal(votingKey);\nconst ballotInfo = await voting.getBallotInfo.call(votingId);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  payoutKeyToAdd, // affectedKey\n  new web3.BigNumber(3), // affectedKeyType\n  \"0x0000000000000000000000000000000000000000\", // newVotingKey\n  \"0x0000000000000000000000000000000000000000\", // newPayoutKey\n  accounts[1], // miningKey\n  new web3.BigNumber(1), // totalVoters\n  new web3.BigNumber(-1), // progress\n  true, // isFinalized\n  new web3.BigNumber(1), // ballotType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false // canBeFinalizedNow\n]);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(3);\n(await voting.getIndex.call(votingId)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(votingId)).should.be.bignumber.equal(3);\n\ntrue.should.be.equal(\n  await voting.hasAlreadyVoted.call(votingId, votingKey)\n);\nconst keysState = await keysManager.validatorKeys.call(accounts[1]);\nkeysState.should.be.deep.equal(\n  [ votingKey,\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "02ff3203-aadb-467d-b993-58a0894fad0c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize addition of payout key",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize finalize addition of payout key",
                "timedOut": false,
                "duration": 1091,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// Ballot to Add Payout Key for miner account[1]\nawait deployAndTestBallot({\n  _affectedKey: payoutKeyToAdd,\n  _affectedKeyType: 3,\n  _miningKey: accounts[1],\n  _ballotType: 1,\n})\nconst keysState = await keysManager.validatorKeys.call(accounts[1]);\nkeysState.should.be.deep.equal(\n  [ votingKey,\n  payoutKeyToAdd,\n  true,\n  true,\n  true ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "b3452a2f-6027-460c-9add-517f39eaa4c0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize addition of VotingKey",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize finalize addition of VotingKey",
                "timedOut": false,
                "duration": 1170,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[7];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\nlet votingKeyToAdd = accounts[8];\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: votingKeyToAdd,\n  _affectedKeyType: 2,\n  _miningKey: miningKey,\n  _ballotType: 1,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ votingKeyToAdd,\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "338a8609-9097-40d7-a71e-fce7d18eca14",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot create ballot for using previous mining key",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize cannot create ballot for using previous mining key",
                "timedOut": false,
                "duration": 2570,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(voting.address);\nlet miningKey = accounts[6];\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: miningKey,\n  _affectedKeyType: 1,\n  _miningKey: '0x0000000000000000000000000000000000000000',\n  _ballotType: 1,\n})\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\ntrue.should.be.equal(await poaNetworkConsensusMock.isValidator.call(miningKey));\nlet validators = await poaNetworkConsensusMock.getValidators.call();\nawait voting.setTime(VOTING_START_DATE - 1);\nawait deployAndTestBallot({\n  _affectedKey: accounts[5],\n  _affectedKeyType: 1,\n  _miningKey: miningKey,\n  _ballotType: 3,\n  \n})\nawait voting.setTime(VOTING_START_DATE - 1);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  3,\n  1,\n  \"memo\",\n  miningKey,\n  accounts[5],\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "41c7a7f3-97a0-4e69-a3fa-88d742dcf382",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize addition of MiningKey",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize finalize addition of MiningKey",
                "timedOut": false,
                "duration": 1271,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(voting.address);\nlet miningKey = accounts[6];\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: miningKey,\n  _affectedKeyType: 1,\n  _miningKey: '0x0000000000000000000000000000000000000000',\n  _ballotType: 1,\n  \n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false ]\n)\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators.call();\nvalidators.should.contain(miningKey);\ntrue.should.be.equal(await poaNetworkConsensusMock.isValidator.call(miningKey));",
                "err": {},
                "isRoot": false,
                "uuid": "4a8e0ccc-95fb-4e80-98cc-d37ce7989c2d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize removal of MiningKey",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize finalize removal of MiningKey",
                "timedOut": false,
                "duration": 2322,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: miningKey,\n  _affectedKeyType: 1,\n  _miningKey: miningKey,\n  _ballotType: 2,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false ]\n)\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators.call();\nvalidators.should.not.contain(miningKey);\nfalse.should.be.equal(await poaNetworkConsensusMock.isValidator.call(miningKey));",
                "err": {},
                "isRoot": false,
                "uuid": "8c93e50f-14aa-4b61-a1c1-6e49aa9e4982",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize removal of VotingKey",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize finalize removal of VotingKey",
                "timedOut": false,
                "duration": 1294,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[7];\nlet votingKeyToAdd = accounts[8];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(miningKey);\nawait addVotingKey(votingKeyToAdd, miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: votingKeyToAdd,\n  _affectedKeyType: 2,\n  _miningKey: miningKey,\n  _ballotType: 2,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "9e14e65e-d266-4106-aee2-3e1f281246b0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize removal of PayoutKey",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize finalize removal of PayoutKey",
                "timedOut": false,
                "duration": 1127,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[7];\nlet affectedKey = accounts[8];\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKey);\nawait addPayoutKey(affectedKey, miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: affectedKey,\n  _affectedKeyType: 3,\n  _miningKey: miningKey,\n  _ballotType: 2,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "b3340669-4169-4ba7-aa3d-704f0dac168e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize swap of VotingKey",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize finalize swap of VotingKey",
                "timedOut": false,
                "duration": 1124,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[7];\nlet affectedKey = accounts[8];\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKey);\nawait addVotingKey(affectedKey, miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nlet newVotingKey = accounts[2];\nawait deployAndTestBallot({\n  _affectedKey: newVotingKey,\n  _affectedKeyType: 2,\n  _miningKey: miningKey,\n  _ballotType: 3,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ newVotingKey,\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "9272a6fe-d7e0-4751-9fbf-039a11e5ffbc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize swap of PayoutKey",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize finalize swap of PayoutKey",
                "timedOut": false,
                "duration": 1099,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[7];\nlet affectedKey = accounts[8];\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKey);\nawait addPayoutKey(affectedKey, miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nlet newPayoutKey = accounts[2];\nawait deployAndTestBallot({\n  _affectedKey: newPayoutKey,\n  _affectedKeyType: 3,\n  _miningKey: miningKey,\n  _ballotType: 3,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  newPayoutKey,\n  true,\n  false,\n  true ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "d99232c4-b771-4a88-81bb-c08961713463",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize swap of MiningKey",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize finalize swap of MiningKey",
                "timedOut": false,
                "duration": 1381,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nlet affectedKey = accounts[5];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: affectedKey,\n  _affectedKeyType: 1,\n  _miningKey: miningKey,\n  _ballotType: 3,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false ]\n)\nconst keysStateNew = await keysManager.validatorKeys.call(affectedKey);\nkeysStateNew.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false ]\n)\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators.call();\nvalidators.should.not.contain(miningKey);\nvalidators.should.contain(affectedKey);\nfalse.should.be.equal(await poaNetworkConsensusMock.isValidator.call(miningKey));\ntrue.should.be.equal(await poaNetworkConsensusMock.isValidator.call(affectedKey));",
                "err": {},
                "isRoot": false,
                "uuid": "1676cdc3-328e-4c93-9037-a9787bad2002",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevent double finalize",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize prevent double finalize",
                "timedOut": false,
                "duration": 1941,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nlet affectedKey = accounts[5];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  3,\n  1,\n  \"memo\",\n  affectedKey,\n  miningKey,\n  {from: votingKey}\n);\nawait voting.createBallot(\n  VOTING_START_DATE+2,\n  VOTING_END_DATE+2,\n  2,\n  1,\n  \"memo\",\n  affectedKey,\n  miningKey,\n  {from: votingKey}\n);\nconst activeBallotsLength = await voting.activeBallotsLength.call();\nvotingId = await voting.activeBallots.call(activeBallotsLength.toNumber() - 2);\nlet votingIdForSecond = votingId.add(1);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.reject, {from: votingKey}).should.be.fulfilled;\nfalse.should.be.equal(await voting.hasAlreadyVoted.call(votingId, votingKey2));\nawait voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nfalse.should.be.equal((await voting.getBallotInfo.call(votingId))[9]); // isFinalized\nawait finalize(votingId, true, {from: votingKey});\nnew web3.BigNumber(3).should.be.bignumber.equal(await voting.getBallotType.call(votingId));\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId))[9]); // isFinalized\nawait voting.finalize(votingId, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.finalize(votingIdForSecond, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nnew web3.BigNumber(2).should.be.bignumber.equal(await voting.getBallotType.call(votingIdForSecond));\nfalse.should.be.equal((await voting.getBallotInfo.call(votingIdForSecond))[9]); // isFinalized\nawait voting.vote(votingIdForSecond, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 3);\nawait finalize(votingIdForSecond, true, {from: votingKey});\nnew web3.BigNumber(-1).should.be.bignumber.equal((await voting.getBallotInfo.call(votingIdForSecond))[8]) // progress\nnew web3.BigNumber(1).should.be.bignumber.equal((await voting.getBallotInfo.call(votingId))[8]) // progress",
                "err": {},
                "isRoot": false,
                "uuid": "2815539f-141c-4dce-8615-5226ba909905",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "allowed at once after all validators gave their votes",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize allowed at once after all validators gave their votes",
                "timedOut": false,
                "duration": 1731,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const miningKey = accounts[4];\nconst affectedKey = accounts[6];\nawait voting.createBallot(\n  VOTING_START_DATE, // uint256 _startTime\n  VOTING_END_DATE,   // uint256 _endTime\n  3,                 // uint256 _ballotType (KeySwap)\n  1,                 // uint256 _affectedKeyType (MiningKey)\n  \"memo\",            // string _memo\n  affectedKey,       // address _affectedKey\n  miningKey,         // address _miningKey\n  {from: votingKey3}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(0))[9]); // isFinalized\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(0, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(0, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(0, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+1);\nawait voting.finalize(0, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(0))[9]); // isFinalized\nawait voting.setTime(VOTING_START_DATE+172800+1);\n(await voting.getTime.call()).should.be.bignumber.below(VOTING_END_DATE);\nawait finalize(0, true, {from: votingKey2});\ntrue.should.be.equal((await voting.getBallotInfo.call(0))[9]); // isFinalized\nawait voting.setTime(VOTING_END_DATE+1);\nawait voting.finalize(0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = moment.utc().add(12, 'days').unix();\nVOTING_END_DATE = moment.utc().add(22, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, // uint256 _startTime\n  VOTING_END_DATE,   // uint256 _endTime\n  3,                 // uint256 _ballotType (KeySwap)\n  1,                 // uint256 _affectedKeyType (MiningKey)\n  \"memo\",            // string _memo\n  affectedKey,       // address _affectedKey\n  miningKey,         // address _miningKey\n  {from: votingKey3}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(1))[9]); // isFinalized\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(1, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(1, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+172800+1);\n(await voting.getTime.call()).should.be.bignumber.below(VOTING_END_DATE);\nawait voting.finalize(1, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(1))[9]); // isFinalized\nawait voting.setTime(VOTING_END_DATE+1);\nawait finalize(1, true, {from: votingKey2});\ntrue.should.be.equal((await voting.getBallotInfo.call(1))[9]); // isFinalized",
                "err": {},
                "isRoot": false,
                "uuid": "0d0d58cf-13f5-443c-a260-466477b57fa0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "02ff3203-aadb-467d-b993-58a0894fad0c",
              "b3452a2f-6027-460c-9add-517f39eaa4c0",
              "338a8609-9097-40d7-a71e-fce7d18eca14",
              "41c7a7f3-97a0-4e69-a3fa-88d742dcf382",
              "4a8e0ccc-95fb-4e80-98cc-d37ce7989c2d",
              "8c93e50f-14aa-4b61-a1c1-6e49aa9e4982",
              "9e14e65e-d266-4106-aee2-3e1f281246b0",
              "b3340669-4169-4ba7-aa3d-704f0dac168e",
              "9272a6fe-d7e0-4751-9fbf-039a11e5ffbc",
              "d99232c4-b771-4a88-81bb-c08961713463",
              "1676cdc3-328e-4c93-9037-a9787bad2002",
              "2815539f-141c-4dce-8615-5226ba909905",
              "0d0d58cf-13f5-443c-a260-466477b57fa0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 18827,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "8df2dc3d-70da-4d06-a558-e72300bc6ee7",
            "title": "#migrate",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_upgrade_test.js",
            "file": "/test/voting_to_change_keys_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should copy a ballot to the new contract",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #migrate should copy a ballot to the new contract",
                "timedOut": false,
                "duration": 2061,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKeyForVotingKey);\nawait addVotingKey(votingKey, miningKeyForVotingKey);\nawait addMiningKey(accounts[3]);\nawait addVotingKey(accounts[4], accounts[3]);\nawait addMiningKey(accounts[5]);\nawait addVotingKey(accounts[6], accounts[5]);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nconst id = await voting.nextBallotId.call();\nawait voting.createBallot(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  1,                 // _ballotType (KeyAdding)\n  1,                 // _affectedKeyType (MiningKey)\n  \"memo\",            // _memo\n  accounts[7],       // _affectedKey\n  accounts[2],       // _miningKey\n  {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: accounts[4]}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: accounts[6]}).should.be.fulfilled;\nlet votingNew = await VotingToChangeKeysMock.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingNew.address);\nvotingNew = await VotingToChangeKeysMock.at(votingEternalStorage.address);\nawait votingNew.init(172800).should.be.fulfilled;\nawait votingNew.setTime(VOTING_START_DATE);\nawait votingNew.migrateBasicOne(\n  id,\n  voting.address,\n  [miningKeyForVotingKey, accounts[3], accounts[5]]\n).should.be.fulfilled;\nconst ballotInfo = await votingNew.getBallotInfo.call(id);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  accounts[7], // affectedKey\n  new web3.BigNumber(1), // affectedKeyType\n  \"0x0000000000000000000000000000000000000000\", // newVotingKey\n  \"0x0000000000000000000000000000000000000000\", // newPayoutKey\n  accounts[2], // miningKey\n  new web3.BigNumber(3), // totalVoters\n  new web3.BigNumber(-3), // progress\n  false, // isFinalized\n  new web3.BigNumber(1), // ballotType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false // canBeFinalizedNow\n]);\n(await votingNew.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await votingNew.getIndex.call(id)).should.be.bignumber.equal(0);\n(await votingNew.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(3);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, miningKeyForVotingKey)).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[2])).should.be.equal(false);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[3])).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[4])).should.be.equal(false);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[5])).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[6])).should.be.equal(false);\n(await votingNew.nextBallotId.call()).should.be.bignumber.equal(0);\n(await votingNew.activeBallotsLength.call()).should.be.bignumber.equal(0);\n(await votingNew.validatorActiveBallots.call(miningKeyForVotingKey)).should.be.bignumber.equal(0);\nawait votingNew.migrateBasicAll(voting.address, {from: accounts[6]}).should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateBasicAll('0x0000000000000000000000000000000000000000').should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateBasicAll(voting.address).should.be.fulfilled;\nawait votingNew.migrateBasicAll(voting.address).should.be.fulfilled;\n(await votingNew.nextBallotId.call()).should.be.bignumber.equal(1);\n(await votingNew.activeBallotsLength.call()).should.be.bignumber.equal(1);\n(await votingNew.validatorActiveBallots.call(miningKeyForVotingKey)).should.be.bignumber.equal(1);\n(await votingNew.migrateDisabled.call()).should.be.equal(false);\nawait votingNew.migrateDisable({from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateDisable().should.be.fulfilled;\n(await votingNew.migrateDisabled.call()).should.be.equal(true);\nawait votingNew.migrateBasicAll(voting.address).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "00e711f2-5668-4b2d-a47b-f3feed201b46",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "00e711f2-5668-4b2d-a47b-f3feed201b46"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2061,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "47deeb60-2277-4015-9297-63e8960f167f",
        "title": "Contract: VotingToChangeMinThreshold [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_min_threshold_test.js",
        "file": "/test/voting_to_change_min_threshold_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: VotingToChangeMinThreshold [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 3335,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "8c4b306e-b354-4c0c-a220-d4f783fbb094",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: VotingToChangeMinThreshold [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "74732489-314d-4149-b542-5005d5663acd",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: VotingToChangeMinThreshold [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 1358,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "votingKey = accounts[3];\nvotingKey2 = accounts[5];\nvotingKey3 = accounts[6];\nmasterOfCeremony = accounts[0];\nminingKeyForVotingKey = accounts[1];\npoaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony, []);\n\nproxyStorageMock = await ProxyStorageMock.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorageMock.address);\nproxyStorageMock = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorageMock.init(poaNetworkConsensusMock.address).should.be.fulfilled;\n\nkeysManager = await KeysManagerMock.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, keysManager.address);\nkeysManager = await KeysManagerMock.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\n\nballotsStorage = await BallotsStorage.new();\nconst ballotsEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, ballotsStorage.address);\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, validatorMetadata.address);\n\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\n\nvoting = await Voting.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, voting.address);\nvoting = await Voting.at(votingEternalStorage.address);\nawait voting.init(172800, 0).should.be.rejectedWith(ERROR_MSG);\nawait voting.init(172800, 3).should.be.fulfilled;\nawait voting.migrateDisable().should.be.fulfilled;\n\nawait proxyStorageMock.initializeAddresses(\n  keysManager.address,\n  accounts[0],\n  voting.address,\n  accounts[0],\n  accounts[0],\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  accounts[0]\n);\n\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKeyForVotingKey);\nawait addVotingKey(votingKey, miningKeyForVotingKey);\nawait addMiningKey(accounts[2]);\nawait addVotingKey(votingKey2, accounts[2]);\nawait addMiningKey(accounts[4]);\nawait addVotingKey(votingKey3, accounts[4]);\nawait addMiningKey(accounts[7]);\nawait addMiningKey(accounts[8]);\nawait addMiningKey(accounts[9]);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;",
            "err": {},
            "isRoot": false,
            "uuid": "5c5a4dcb-2852-4796-9435-7fcb2c1957a6",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: VotingToChangeMinThreshold [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "8a74609a-55da-4aab-bb66-1d2bf43ae411",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "692fa19d-65b6-4a78-9cac-86b4af2f7ccd",
            "title": "#createBallot",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_min_threshold_test.js",
            "file": "/test/voting_to_change_min_threshold_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #createBallot \"before each\" hook",
                "timedOut": false,
                "duration": 12,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nid = await voting.nextBallotId.call();",
                "err": {},
                "isRoot": false,
                "uuid": "8bef8885-d633-4727-8839-7c17beaf2c6f",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #createBallot happy path",
                "timedOut": false,
                "duration": 288,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 4, \"memo\", {from: votingKey});\nconst keysManagerFromContract = await voting.getKeysManager.call();\nconst ballotInfo = await voting.getBallotInfo.call(id, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(0), // totalVoters\n  new web3.BigNumber(0), // progress\n  false, // isFinalized\n  new web3.BigNumber(4), // proposedValue\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  false // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await voting.getIndex.call(id)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(3);\nkeysManagerFromContract.should.be.equal(keysManager.address);\nlogs[0].event.should.be.equal(\"BallotCreated\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.creator.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "87ccd948-3e57-4ec9-8a55-dede96ebe027",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "proposed value should be more than or equal to 3",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #createBallot proposed value should be more than or equal to 3",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 2,\"memo\", {from: votingKey}).should.be.fulfilled.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "c35b8316-1cde-45bd-b8dc-2aab3f7469be",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "proposed value should not be equal to the same value",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #createBallot proposed value should not be equal to the same value",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 3,\"memo\", {from: votingKey}).should.be.fulfilled.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "ecc834c2-a158-4332-b433-92d968b4e21c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create more ballots than the limit",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #createBallot should not let create more ballots than the limit",
                "timedOut": false,
                "duration": 10288,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 4,\"memo\", {from: votingKey});\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 4,\"memo\", {from: votingKey});\n// we have 6 validators, so 200 limit / 6 = 33.3 ~ 33\nnew web3.BigNumber(33).should.be.bignumber.equal(await voting.getBallotLimitPerValidator.call());\nawait addValidators({proxyStorageMock, keysManager, poaNetworkConsensusMock}); // add 100 validators, so total will be 106 validators\nnew web3.BigNumber(1).should.be.bignumber.equal(await voting.getBallotLimitPerValidator.call());\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 4, \"memo\",{from: votingKey}).should.be.rejectedWith(ERROR_MSG)",
                "err": {},
                "isRoot": false,
                "uuid": "9c72ed19-b158-4410-b26c-3c40b3168ed0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "87ccd948-3e57-4ec9-8a55-dede96ebe027",
              "c35b8316-1cde-45bd-b8dc-2aab3f7469be",
              "ecc834c2-a158-4332-b433-92d968b4e21c",
              "9c72ed19-b158-4410-b26c-3c40b3168ed0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 10635,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "982b6d8b-012b-4e0a-b2e9-8afc74f85e0f",
            "title": "#vote",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_min_threshold_test.js",
            "file": "/test/voting_to_change_min_threshold_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote \"before each\" hook",
                "timedOut": false,
                "duration": 172,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nid = await voting.nextBallotId.call();\nlet validators = await poaNetworkConsensusMock.getValidators.call();\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 4, \"memo\",{from: votingKey});",
                "err": {},
                "isRoot": false,
                "uuid": "58bfa8d0-35d4-4e0c-8edb-923664fe15c2",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "should let a validator to vote",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should let a validator to vote",
                "timedOut": false,
                "duration": 192,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.accept, {from: votingKey}).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(1);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(1);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);\nlogs[0].args.voterMiningKey.should.be.equal(miningKeyForVotingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "a411d28c-3807-40cc-8018-720164a76766",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "reject vote should be accepted",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote reject vote should be accepted",
                "timedOut": false,
                "duration": 203,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(-1);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(2);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);\nlogs[0].args.voterMiningKey.should.be.equal(miningKeyForVotingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "8d6eae3d-37f6-477d-9274-4de36ee3bbf8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow multiple voters to vote",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should allow multiple voters to vote",
                "timedOut": false,
                "duration": 447,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\n// add new voter\nawait voting.vote(id, choice.reject, {from: votingKey2}).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(-2);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(2);\nawait voting.vote(id, choice.accept, {from: votingKey3}).should.be.fulfilled;\nprogress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(-1);\ntotalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "47e53b56-90dc-4c92-a943-269026f547c8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote nonVoting key",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should not let vote nonVoting key",
                "timedOut": false,
                "duration": 56,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "852062bf-d460-46ba-a361-b4811eacc4f7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote before startTime key",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should not let vote before startTime key",
                "timedOut": false,
                "duration": 92,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE - 1);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "d38a5314-7862-4cd0-8827-00b0d0780978",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote after endTime key",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should not let vote after endTime key",
                "timedOut": false,
                "duration": 96,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE + 1);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "6ef03e55-4f8a-4096-a239-0cc3b05f16d7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with already voted key",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should not let vote with already voted key",
                "timedOut": false,
                "duration": 183,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "fd8b369d-d3d7-40ea-a7e5-8405cbd2df1a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid choice",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should not let vote with invalid choice",
                "timedOut": false,
                "duration": 184,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, 0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, 3, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "d114cc54-a818-40d5-91fc-fb85395f5a47",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid id",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should not let vote with invalid id",
                "timedOut": false,
                "duration": 171,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(99, 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(-3, 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "d11e1c68-59d3-40c7-ac75-b35031b3e200",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a411d28c-3807-40cc-8018-720164a76766",
              "8d6eae3d-37f6-477d-9274-4de36ee3bbf8",
              "47e53b56-90dc-4c92-a943-269026f547c8",
              "852062bf-d460-46ba-a361-b4811eacc4f7",
              "d38a5314-7862-4cd0-8827-00b0d0780978",
              "6ef03e55-4f8a-4096-a239-0cc3b05f16d7",
              "fd8b369d-d3d7-40ea-a7e5-8405cbd2df1a",
              "d114cc54-a818-40d5-91fc-fb85395f5a47",
              "d11e1c68-59d3-40c7-ac75-b35031b3e200"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1624,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "af335973-aeee-4b8f-8c65-2253f923894d",
            "title": "#finalize",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_min_threshold_test.js",
            "file": "/test/voting_to_change_min_threshold_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #finalize \"before each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "payoutKeyToAdd = accounts[0];\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();",
                "err": {},
                "isRoot": false,
                "uuid": "0c618fa4-cfdc-44bc-8307-a92a536ca557",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "does not change if it did not pass minimum threshold",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #finalize does not change if it did not pass minimum threshold",
                "timedOut": false,
                "duration": 733,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proposedValue = 4;\nvotingId = await voting.nextBallotId.call();\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, proposedValue, \"memo\", {from: votingKey});\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.accept, {from: votingKey}).should.be.fulfilled;\n// await voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nconst {logs} = await voting.finalize(votingId, {from: votingKey});\nactiveBallotsLength = await voting.activeBallotsLength.call();\nactiveBallotsLength.should.be.bignumber.equal(0);\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\n// Finalized(msg.sender);\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.voter.should.be.equal(votingKey);\nconst ballotInfo = await voting.getBallotInfo.call(votingId, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(1), // totalVoters\n  new web3.BigNumber(1), // progress\n  true, // isFinalized\n  new web3.BigNumber(proposedValue), // proposedValue\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(3);\n(await voting.getIndex.call(votingId)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(votingId)).should.be.bignumber.equal(3);\nconst minThresholdOfVoters = await ballotsStorage.getBallotThreshold.call(1);\nminThresholdOfVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "73e7eab8-6195-4bc2-b4c2-8cd6233946ef",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change to proposedValue when quorum is reached",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #finalize should change to proposedValue when quorum is reached",
                "timedOut": false,
                "duration": 1258,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proposedValue = 4;\nvotingId = await voting.nextBallotId.call();\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, proposedValue, \"memo\", {from: votingKey});\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.accept, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(votingId, choice.reject, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nconst {logs} = await voting.finalize(votingId, {from: votingKey});\nactiveBallotsLength = await voting.activeBallotsLength.call();\nactiveBallotsLength.should.be.bignumber.equal(0);\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\n// Finalized(msg.sender);\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.voter.should.be.equal(votingKey);\nconst ballotInfo = await voting.getBallotInfo.call(votingId, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(3), // totalVoters\n  new web3.BigNumber(1), // progress\n  true, // isFinalized\n  new web3.BigNumber(proposedValue), // proposedValue\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(2);\n(await voting.getIndex.call(votingId)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(votingId)).should.be.bignumber.equal(3);\ntrue.should.be.equal(\n  await voting.hasAlreadyVoted.call(votingId, votingKey2)\n);\ntrue.should.be.equal(\n  await voting.hasAlreadyVoted.call(votingId, votingKey3)\n);\nconst minThresholdOfVoters = await ballotsStorage.getBallotThreshold.call(1);\nminThresholdOfVoters.should.be.bignumber.equal(proposedValue);\nlet votingForKeys = await VotingForKeys.new();\nconst votingForKeysEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingForKeys.address);\nvotingForKeys = await VotingForKeys.at(votingForKeysEternalStorage.address);\nawait votingForKeys.init(172800);\nawait votingForKeys.migrateDisable();\nconst nextId = await votingForKeys.nextBallotId.call();\nawait votingForKeys.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  3,\n  \"memo\",\n  accounts[5],\n  accounts[1],\n  {from: votingKey}\n);\nconst minThresholdVotingForKeys = await votingForKeys.getMinThresholdOfVoters.call(nextId);\nminThresholdVotingForKeys.should.be.bignumber.equal(proposedValue);",
                "err": {},
                "isRoot": false,
                "uuid": "094a424a-f723-4010-9673-dd5371c5448f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevents double finalize",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #finalize prevents double finalize",
                "timedOut": false,
                "duration": 1766,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proposedValue1 = 4;\nlet proposedValue2 = 5;\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, proposedValue1, \"memo\",{from: votingKey});\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(\"0xa6Bf70bd230867c870eF13631D7EFf1AE8Ab85c9\");\nawait addMiningKey(\"0xa6Bf70bd230867c870eF13631D7EFf1AE8Ab85d9\");\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait voting.createBallot(VOTING_START_DATE+2, VOTING_END_DATE+2, proposedValue2, \"memo\",{from: votingKey});\nawait voting.finalize(votingId, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nconst activeBallotsLength = await voting.activeBallotsLength.call();\nvotingId = await voting.activeBallots.call(activeBallotsLength.toNumber() - 2);\nlet votingIdForSecond = votingId.add(1);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.reject, {from: votingKey}).should.be.fulfilled;\nfalse.should.be.equal(await voting.hasAlreadyVoted.call(votingId, votingKey2));\nawait voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nfalse.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\nawait finalize(votingId, true, {from: votingKey});\nawait voting.vote(votingId, choice.accept, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nnew web3.BigNumber(4).should.be.bignumber.equal(await voting.getProposedValue.call(votingId));\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\nawait voting.finalize(votingId, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.finalize(votingIdForSecond, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nnew web3.BigNumber(5).should.be.bignumber.equal(await voting.getProposedValue.call(votingIdForSecond));\nfalse.should.be.equal((await voting.getBallotInfo.call(votingIdForSecond, votingKey))[4]); // isFinalized\nawait voting.vote(votingIdForSecond, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 3);\nawait finalize(votingIdForSecond, true, {from: votingKey});\nnew web3.BigNumber(-1).should.be.bignumber.equal((await voting.getBallotInfo.call(votingIdForSecond, votingKey))[3]) // progress\nnew web3.BigNumber(1).should.be.bignumber.equal((await voting.getBallotInfo.call(votingId, votingKey))[3]) // progress",
                "err": {},
                "isRoot": false,
                "uuid": "24600790-ad94-48c2-8801-a9db9f279da8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "allowed at once after all validators gave their votes",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #finalize allowed at once after all validators gave their votes",
                "timedOut": false,
                "duration": 2147,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let result = await keysManager.removeMiningKey(accounts[7]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nresult = await keysManager.removeMiningKey(accounts[8]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nresult = await keysManager.removeMiningKey(accounts[9]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait voting.setMinPossibleThreshold(2);\nawait voting.createBallot(\n  VOTING_START_DATE, // uint256 _startTime\n  VOTING_END_DATE,   // uint256 _endTime\n  2,                 // uint256 _proposedValue\n  \"memo\",            // string _memo\n  {from: votingKey3}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(0, votingKey3))[4]); // isFinalized\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(0, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(0, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(0, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+1);\nawait voting.finalize(0, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(0, votingKey2))[4]); // isFinalized\nawait voting.setTime(VOTING_START_DATE+172800+1);\n(await voting.getTime.call()).should.be.bignumber.below(VOTING_END_DATE);\nawait finalize(0, true, {from: votingKey2});\ntrue.should.be.equal((await voting.getBallotInfo.call(0, votingKey2))[4]); // isFinalized\nawait voting.setTime(VOTING_END_DATE+1);\nawait voting.finalize(0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = moment.utc().add(12, 'days').unix();\nVOTING_END_DATE = moment.utc().add(22, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, // uint256 _startTime\n  VOTING_END_DATE,   // uint256 _endTime\n  2,                 // uint256 _proposedValue\n  \"memo\",            // string _memo\n  {from: votingKey3}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(1, votingKey3))[4]); // isFinalized\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(1, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(1, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+172800+1);\n(await voting.getTime.call()).should.be.bignumber.below(VOTING_END_DATE);\nawait voting.finalize(1, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(1, votingKey2))[4]); // isFinalized\nawait voting.setTime(VOTING_END_DATE+1);\nawait finalize(1, true, {from: votingKey2});\ntrue.should.be.equal((await voting.getBallotInfo.call(1, votingKey2))[4]); // isFinalized",
                "err": {},
                "isRoot": false,
                "uuid": "e463636f-6124-465b-aa39-6f44ecabd1db",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should decrease validator limit only once when calling finalize more than once",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #finalize should decrease validator limit only once when calling finalize more than once",
                "timedOut": false,
                "duration": 1666,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let result = await keysManager.removeMiningKey(accounts[7]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nresult = await keysManager.removeMiningKey(accounts[8]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nresult = await keysManager.removeMiningKey(accounts[9]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait voting.setMinPossibleThreshold(2);\nawait ballotsStorage.setThresholdMock(1, 1);\nvotingId = await voting.nextBallotId.call();\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 2, \"memo\", {from: votingKey});\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 2, \"memo\", {from: votingKey});\n(await voting.validatorActiveBallots.call(miningKeyForVotingKey)).should.be.bignumber.equal(2);\n\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.accept, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait ballotsStorage.setThresholdMock(2, 1);\nawait voting.setTime(VOTING_END_DATE + 1);\nresult = await voting.finalize(votingId, {from: votingKey});\nresult.logs.length.should.be.equal(0);\n(await voting.validatorActiveBallots.call(miningKeyForVotingKey)).should.be.bignumber.equal(1);\n(await voting.getIsFinalized.call(votingId)).should.be.equal(false);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(1);\nresult = await voting.finalize(votingId, {from: votingKey});\nresult.logs.length.should.be.equal(0);\n(await voting.validatorActiveBallots.call(miningKeyForVotingKey)).should.be.bignumber.equal(1);\n(await voting.getIsFinalized.call(votingId)).should.be.equal(false);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(1);\nawait ballotsStorage.setThresholdMock(1, 1);\nresult = await voting.finalize(votingId, {from: votingKey});\nresult.logs[0].event.should.equal(\"BallotFinalized\");\n(await voting.validatorActiveBallots.call(miningKeyForVotingKey)).should.be.bignumber.equal(1);\n(await voting.getIsFinalized.call(votingId)).should.be.equal(true);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(2);",
                "err": {},
                "isRoot": false,
                "uuid": "b4e25354-7a82-4e0e-bdd1-7333390284c5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "73e7eab8-6195-4bc2-b4c2-8cd6233946ef",
              "094a424a-f723-4010-9673-dd5371c5448f",
              "24600790-ad94-48c2-8801-a9db9f279da8",
              "e463636f-6124-465b-aa39-6f44ecabd1db",
              "b4e25354-7a82-4e0e-bdd1-7333390284c5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 7570,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "b58c6ecd-d3e2-4127-b23c-e05a5fa30a49",
            "title": "#migrate",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_min_threshold_test.js",
            "file": "/test/voting_to_change_min_threshold_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should copy a ballot to the new contract",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #migrate should copy a ballot to the new contract",
                "timedOut": false,
                "duration": 1576,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nconst id = await voting.nextBallotId.call();\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 4, \"memo\", {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: votingKey3}).should.be.fulfilled;\nlet votingNew = await Voting.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingNew.address);\nvotingNew = await Voting.at(votingEternalStorage.address);\nawait votingNew.init(172800, 3).should.be.fulfilled;\nawait votingNew.setTime(VOTING_START_DATE);\nawait votingNew.migrateBasicOne(\n  id,\n  voting.address,\n  [miningKeyForVotingKey, accounts[2], accounts[4]]\n).should.be.fulfilled;\nconst ballotInfo = await votingNew.getBallotInfo.call(id, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(3), // totalVoters\n  new web3.BigNumber(-3), // progress\n  false, // isFinalized\n  new web3.BigNumber(4), // proposedValue\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await votingNew.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await votingNew.getIndex.call(id)).should.be.bignumber.equal(0);\n(await votingNew.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(3);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, miningKeyForVotingKey)).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[2])).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[4])).should.be.equal(true);\n(await votingNew.nextBallotId.call()).should.be.bignumber.equal(0);\n(await votingNew.activeBallotsLength.call()).should.be.bignumber.equal(0);\n(await votingNew.validatorActiveBallots.call(accounts[1])).should.be.bignumber.equal(0);\nawait votingNew.migrateBasicAll(voting.address, {from: accounts[6]}).should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateBasicAll('0x0000000000000000000000000000000000000000').should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateBasicAll(voting.address).should.be.fulfilled;\nawait votingNew.migrateBasicAll(voting.address).should.be.fulfilled;\n(await votingNew.nextBallotId.call()).should.be.bignumber.equal(1);\n(await votingNew.activeBallotsLength.call()).should.be.bignumber.equal(1);\n(await votingNew.validatorActiveBallots.call(accounts[1])).should.be.bignumber.equal(1);\n(await votingNew.migrateDisabled.call()).should.be.equal(false);\nawait votingNew.migrateDisable({from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateDisable().should.be.fulfilled;\n(await votingNew.migrateDisabled.call()).should.be.equal(true);\nawait votingNew.migrateBasicAll(voting.address).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "88f7b509-51bb-446a-800d-9de8f136cc6e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "88f7b509-51bb-446a-800d-9de8f136cc6e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1576,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "d19fc8f2-357c-4f59-b970-0fae80d09fbc",
            "title": "#upgradeTo",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_min_threshold_test.js",
            "file": "/test/voting_to_change_min_threshold_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #upgradeTo \"before each\" hook",
                "timedOut": false,
                "duration": 145,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "proxyStorageStubAddress = accounts[8];\nvoting = await Voting.new();\nvotingOldImplementation = voting.address;\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageStubAddress, voting.address);\nvoting = await Voting.at(votingEternalStorage.address);\nawait voting.init(172800, 3).should.be.fulfilled;\nawait voting.migrateDisable().should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "1883c863-7da0-41f0-b4fa-5aa96282c83d",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by ProxyStorage",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #upgradeTo may only be called by ProxyStorage",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingNew.new();\nawait votingEternalStorage.upgradeTo(votingNew.address, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});",
                "err": {},
                "isRoot": false,
                "uuid": "0b95e2b7-d173-4377-8d19-95443ed42ddd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change implementation address",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #upgradeTo should change implementation address",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingNew.new();\nlet newImplementation = votingNew.address;\n(await votingEternalStorage.implementation.call()).should.be.equal(votingOldImplementation);\nawait upgradeTo(newImplementation, {from: proxyStorageStubAddress});\n(await votingEternalStorage.implementation.call()).should.be.equal(newImplementation);",
                "err": {},
                "isRoot": false,
                "uuid": "66117ed9-fc20-425d-ba4c-e0a31caa8436",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment implementation version",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #upgradeTo should increment implementation version",
                "timedOut": false,
                "duration": 93,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingNew.new();\nlet oldVersion = await votingEternalStorage.version.call();\nlet newVersion = oldVersion.add(1);\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\n(await votingEternalStorage.version.call()).should.be.bignumber.equal(newVersion);",
                "err": {},
                "isRoot": false,
                "uuid": "a18fa387-00c6-4c26-92b0-2dbb5db7af11",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should work",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #upgradeTo new implementation should work",
                "timedOut": false,
                "duration": 116,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingNew.new();\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\nvotingNew = await VotingNew.at(votingEternalStorage.address);\n(await votingNew.initialized.call()).should.be.equal(false);\nawait votingNew.initialize();\n(await votingNew.initialized.call()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "bcdf0dc3-6f06-43b7-847a-1618951bc35a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same proxyStorage address",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #upgradeTo new implementation should use the same proxyStorage address",
                "timedOut": false,
                "duration": 103,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingNew.new();\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\nvotingNew = await VotingNew.at(votingEternalStorage.address);\n(await votingNew.proxyStorage.call()).should.be.equal(proxyStorageStubAddress);",
                "err": {},
                "isRoot": false,
                "uuid": "9456651f-67e5-437b-bf2e-27734f0c5551",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same storage",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #upgradeTo new implementation should use the same storage",
                "timedOut": false,
                "duration": 406,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nconst id = await voting.nextBallotId.call();\nawait votingEternalStorage.setProxyStorage(proxyStorageMock.address);\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 4, \"memo\", {from: votingKey}).should.be.fulfilled;\nawait votingEternalStorage.setProxyStorage(proxyStorageStubAddress);\nlet votingNew = await VotingNew.new();\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\nvotingNew = await VotingNew.at(votingEternalStorage.address);\nawait votingEternalStorage.setProxyStorage(proxyStorageMock.address);\nconst ballotInfo = await votingNew.getBallotInfo.call(id, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(0), // totalVoters\n  new web3.BigNumber(0), // progress\n  false, // isFinalized\n  new web3.BigNumber(4), // proposedValue\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  false // hasAlreadyVoted\n]);\n(await votingNew.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await votingNew.getIndex.call(id)).should.be.bignumber.equal(0);\n(await votingNew.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "40014619-0e2f-4298-bd9c-2cd2abff367f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0b95e2b7-d173-4377-8d19-95443ed42ddd",
              "66117ed9-fc20-425d-ba4c-e0a31caa8436",
              "a18fa387-00c6-4c26-92b0-2dbb5db7af11",
              "bcdf0dc3-6f06-43b7-847a-1618951bc35a",
              "9456651f-67e5-437b-bf2e-27734f0c5551",
              "40014619-0e2f-4298-bd9c-2cd2abff367f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 899,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "e5f4e429-c6e2-4def-b13f-5c2c54f744d3",
        "title": "Contract: VotingToChangeMinThreshold upgraded [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_min_threshold_upgrade_test.js",
        "file": "/test/voting_to_change_min_threshold_upgrade_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 3000,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "b24d5a28-f3ef-4bb5-8e48-ba8d23c3b3e0",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "c5ba5a1e-9c9c-40a9-8f86-9602d0b6ede3",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 1710,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "votingKey = accounts[3];\nvotingKey2 = accounts[5];\nvotingKey3 = accounts[6];\nmasterOfCeremony = accounts[0];\nminingKeyForVotingKey = accounts[1];\npoaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony, []);\n\nproxyStorageMock = await ProxyStorageMock.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorageMock.address);\nproxyStorageMock = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorageMock.init(poaNetworkConsensusMock.address).should.be.fulfilled;\n\nkeysManager = await KeysManagerMock.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, keysManager.address);\nkeysManager = await KeysManagerMock.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\n\nballotsStorage = await BallotsStorage.new();\nconst ballotsEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, ballotsStorage.address);\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, validatorMetadata.address);\n\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\n\nvoting = await Voting.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, voting.address);\nvoting = await Voting.at(votingEternalStorage.address);\nawait voting.init(172800, 0).should.be.rejectedWith(ERROR_MSG);\nawait voting.init(172800, 3).should.be.fulfilled;\nawait voting.migrateDisable().should.be.fulfilled;\nconst votingNew = await VotingNew.new();\nawait votingEternalStorage.setProxyStorage(accounts[6]);\nconst {logs} = await votingEternalStorage.upgradeTo(votingNew.address, {from: accounts[6]});\nlogs[0].event.should.be.equal(\"Upgraded\");\nawait votingEternalStorage.setProxyStorage(proxyStorageMock.address);\nvoting = await VotingNew.at(votingEternalStorage.address);\n\nawait proxyStorageMock.initializeAddresses(\n  keysManager.address,\n  accounts[0],\n  voting.address,\n  accounts[0],\n  accounts[0],\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  accounts[0]\n);\n\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKeyForVotingKey);\nawait addVotingKey(votingKey, miningKeyForVotingKey);\nawait addMiningKey(accounts[2]);\nawait addVotingKey(votingKey2, accounts[2]);\nawait addMiningKey(accounts[4]);\nawait addVotingKey(votingKey3, accounts[4]);\nawait addMiningKey(accounts[7]);\nawait addMiningKey(accounts[8]);\nawait addMiningKey(accounts[9]);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;",
            "err": {},
            "isRoot": false,
            "uuid": "6c652081-4e56-4e0b-b714-834f89f29776",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "a5bee32d-ca68-4ab2-abe6-5f36d1c2505a",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "32451210-f2de-408d-a3c5-d659604c4a1b",
            "title": "#createBallot",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_min_threshold_upgrade_test.js",
            "file": "/test/voting_to_change_min_threshold_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #createBallot \"before each\" hook",
                "timedOut": false,
                "duration": 13,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nid = await voting.nextBallotId.call();",
                "err": {},
                "isRoot": false,
                "uuid": "818d3294-a74c-4bc9-ab5f-abc008ab33ad",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #createBallot happy path",
                "timedOut": false,
                "duration": 236,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 4, \"memo\", {from: votingKey});\nconst keysManagerFromContract = await voting.getKeysManager.call();\nconst ballotInfo = await voting.getBallotInfo.call(id, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(0), // totalVoters\n  new web3.BigNumber(0), // progress\n  false, // isFinalized\n  new web3.BigNumber(4), // proposedValue\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  false // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await voting.getIndex.call(id)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(3);\nkeysManagerFromContract.should.be.equal(keysManager.address);\nlogs[0].event.should.be.equal(\"BallotCreated\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.creator.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "30601dc2-de87-46d5-a20c-66b31edc16e0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "proposed value should be more than or equal to 3",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #createBallot proposed value should be more than or equal to 3",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 2,\"memo\", {from: votingKey}).should.be.fulfilled.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "f0ea4229-4f82-481a-a53d-b193600f364b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "proposed value should not be equal to the same value",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #createBallot proposed value should not be equal to the same value",
                "timedOut": false,
                "duration": 32,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 3,\"memo\", {from: votingKey}).should.be.fulfilled.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "034212d0-ace7-4826-b0bd-4e2cb0893c39",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create more ballots than the limit",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #createBallot should not let create more ballots than the limit",
                "timedOut": false,
                "duration": 10301,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 4,\"memo\", {from: votingKey});\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 4,\"memo\", {from: votingKey});\n// we have 6 validators, so 200 limit / 6 = 33.3 ~ 33\nnew web3.BigNumber(33).should.be.bignumber.equal(await voting.getBallotLimitPerValidator.call());\nawait addValidators({proxyStorageMock, keysManager, poaNetworkConsensusMock}); // add 100 validators, so total will be 106 validators\nnew web3.BigNumber(1).should.be.bignumber.equal(await voting.getBallotLimitPerValidator.call());\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 4, \"memo\",{from: votingKey}).should.be.rejectedWith(ERROR_MSG)",
                "err": {},
                "isRoot": false,
                "uuid": "d5fab31c-d777-4f9c-a500-c62f7734762f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "30601dc2-de87-46d5-a20c-66b31edc16e0",
              "f0ea4229-4f82-481a-a53d-b193600f364b",
              "034212d0-ace7-4826-b0bd-4e2cb0893c39",
              "d5fab31c-d777-4f9c-a500-c62f7734762f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 10591,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "0bd83764-73f8-4dbc-9b0c-c68b4e48f38e",
            "title": "#vote",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_min_threshold_upgrade_test.js",
            "file": "/test/voting_to_change_min_threshold_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #vote \"before each\" hook",
                "timedOut": false,
                "duration": 174,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nid = await voting.nextBallotId.call();\nlet validators = await poaNetworkConsensusMock.getValidators.call();\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 4, \"memo\",{from: votingKey});",
                "err": {},
                "isRoot": false,
                "uuid": "20fa92cf-759d-44db-8f6f-010c79db07a5",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "should let a validator to vote",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #vote should let a validator to vote",
                "timedOut": false,
                "duration": 196,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.accept, {from: votingKey}).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(1);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(1);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);\nlogs[0].args.voterMiningKey.should.be.equal(miningKeyForVotingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "951a8fb4-3a4c-4aa3-b46a-e61a42585428",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "reject vote should be accepted",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #vote reject vote should be accepted",
                "timedOut": false,
                "duration": 200,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(-1);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(2);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);\nlogs[0].args.voterMiningKey.should.be.equal(miningKeyForVotingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "afc01708-caa6-4f7e-b4fd-31caa9523148",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow multiple voters to vote",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #vote should allow multiple voters to vote",
                "timedOut": false,
                "duration": 513,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\n// add new voter\nawait voting.vote(id, choice.reject, {from: votingKey2}).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(-2);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(2);\nawait voting.vote(id, choice.accept, {from: votingKey3}).should.be.fulfilled;\nprogress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(-1);\ntotalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "dd187731-0daa-4fb0-b389-d49286443849",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote nonVoting key",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #vote should not let vote nonVoting key",
                "timedOut": false,
                "duration": 46,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "4e3c0e44-bb34-4b7d-bbce-807c570f9f6d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote before startTime key",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #vote should not let vote before startTime key",
                "timedOut": false,
                "duration": 96,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE - 1);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "bc48e222-e46f-4f4f-b1c8-9b155bb1c9ba",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote after endTime key",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #vote should not let vote after endTime key",
                "timedOut": false,
                "duration": 101,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE + 1);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "c1748c12-0f68-4877-a405-7fbad5c2ec7a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with already voted key",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #vote should not let vote with already voted key",
                "timedOut": false,
                "duration": 184,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "bccc8d58-2391-4b2c-a0bf-c70e14f12cb8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid choice",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #vote should not let vote with invalid choice",
                "timedOut": false,
                "duration": 162,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, 0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, 3, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "3fae44a3-98df-4861-82cc-20480ec1653f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid id",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #vote should not let vote with invalid id",
                "timedOut": false,
                "duration": 173,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(99, 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(-3, 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "8ed974fa-34ae-438c-8b34-54e430c80243",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "951a8fb4-3a4c-4aa3-b46a-e61a42585428",
              "afc01708-caa6-4f7e-b4fd-31caa9523148",
              "dd187731-0daa-4fb0-b389-d49286443849",
              "4e3c0e44-bb34-4b7d-bbce-807c570f9f6d",
              "bc48e222-e46f-4f4f-b1c8-9b155bb1c9ba",
              "c1748c12-0f68-4877-a405-7fbad5c2ec7a",
              "bccc8d58-2391-4b2c-a0bf-c70e14f12cb8",
              "3fae44a3-98df-4861-82cc-20480ec1653f",
              "8ed974fa-34ae-438c-8b34-54e430c80243"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1671,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "0829f7de-48d6-4817-ae3f-ec9031309fd7",
            "title": "#finalize",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_min_threshold_upgrade_test.js",
            "file": "/test/voting_to_change_min_threshold_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #finalize \"before each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "payoutKeyToAdd = accounts[0];\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();",
                "err": {},
                "isRoot": false,
                "uuid": "6d9938a2-b37d-4378-8af8-acda17e5e74f",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "does not change if it did not pass minimum threshold",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #finalize does not change if it did not pass minimum threshold",
                "timedOut": false,
                "duration": 681,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proposedValue = 4;\nvotingId = await voting.nextBallotId.call();\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, proposedValue, \"memo\", {from: votingKey});\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.accept, {from: votingKey}).should.be.fulfilled;\n// await voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nconst {logs} = await voting.finalize(votingId, {from: votingKey});\nactiveBallotsLength = await voting.activeBallotsLength.call();\nactiveBallotsLength.should.be.bignumber.equal(0);\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\n// Finalized(msg.sender);\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.voter.should.be.equal(votingKey);\nconst ballotInfo = await voting.getBallotInfo.call(votingId, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(1), // totalVoters\n  new web3.BigNumber(1), // progress\n  true, // isFinalized\n  new web3.BigNumber(proposedValue), // proposedValue\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(3);\n(await voting.getIndex.call(votingId)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(votingId)).should.be.bignumber.equal(3);\nconst minThresholdOfVoters = await ballotsStorage.getBallotThreshold.call(1);\nminThresholdOfVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "1a1e190c-8fc5-4157-8f7d-307efbf27f17",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change to proposedValue when quorum is reached",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #finalize should change to proposedValue when quorum is reached",
                "timedOut": false,
                "duration": 1338,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proposedValue = 4;\nvotingId = await voting.nextBallotId.call();\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, proposedValue, \"memo\", {from: votingKey});\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.accept, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(votingId, choice.reject, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nconst {logs} = await voting.finalize(votingId, {from: votingKey});\nactiveBallotsLength = await voting.activeBallotsLength.call();\nactiveBallotsLength.should.be.bignumber.equal(0);\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\n// Finalized(msg.sender);\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.voter.should.be.equal(votingKey);\nconst ballotInfo = await voting.getBallotInfo.call(votingId, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(3), // totalVoters\n  new web3.BigNumber(1), // progress\n  true, // isFinalized\n  new web3.BigNumber(proposedValue), // proposedValue\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(2);\n(await voting.getIndex.call(votingId)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(votingId)).should.be.bignumber.equal(3);\ntrue.should.be.equal(\n  await voting.hasAlreadyVoted.call(votingId, votingKey2)\n);\ntrue.should.be.equal(\n  await voting.hasAlreadyVoted.call(votingId, votingKey3)\n);\nconst minThresholdOfVoters = await ballotsStorage.getBallotThreshold.call(1);\nminThresholdOfVoters.should.be.bignumber.equal(proposedValue);\nlet votingForKeys = await VotingForKeys.new();\nconst votingForKeysEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingForKeys.address);\nvotingForKeys = await VotingForKeys.at(votingForKeysEternalStorage.address);\nawait votingForKeys.init(172800);\nawait votingForKeys.migrateDisable();\nconst nextId = await votingForKeys.nextBallotId.call();\nawait votingForKeys.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  3,\n  \"memo\",\n  accounts[5],\n  accounts[1],\n  {from: votingKey}\n);\nconst minThresholdVotingForKeys = await votingForKeys.getMinThresholdOfVoters.call(nextId);\nminThresholdVotingForKeys.should.be.bignumber.equal(proposedValue);",
                "err": {},
                "isRoot": false,
                "uuid": "04560be7-d2bd-4995-9258-66da0d594bdb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevents double finalize",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #finalize prevents double finalize",
                "timedOut": false,
                "duration": 1910,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proposedValue1 = 4;\nlet proposedValue2 = 5;\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, proposedValue1, \"memo\",{from: votingKey});\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(\"0xa6Bf70bd230867c870eF13631D7EFf1AE8Ab85c9\");\nawait addMiningKey(\"0xa6Bf70bd230867c870eF13631D7EFf1AE8Ab85d9\");\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait voting.createBallot(VOTING_START_DATE+2, VOTING_END_DATE+2, proposedValue2, \"memo\",{from: votingKey});\nawait voting.finalize(votingId, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nconst activeBallotsLength = await voting.activeBallotsLength.call();\nvotingId = await voting.activeBallots.call(activeBallotsLength.toNumber() - 2);\nlet votingIdForSecond = votingId.add(1);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.reject, {from: votingKey}).should.be.fulfilled;\nfalse.should.be.equal(await voting.hasAlreadyVoted.call(votingId, votingKey2));\nawait voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nfalse.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\nawait finalize(votingId, true, {from: votingKey});\nawait voting.vote(votingId, choice.accept, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nnew web3.BigNumber(4).should.be.bignumber.equal(await voting.getProposedValue.call(votingId));\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\nawait voting.finalize(votingId, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.finalize(votingIdForSecond, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nnew web3.BigNumber(5).should.be.bignumber.equal(await voting.getProposedValue.call(votingIdForSecond));\nfalse.should.be.equal((await voting.getBallotInfo.call(votingIdForSecond, votingKey))[4]); // isFinalized\nawait voting.vote(votingIdForSecond, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 3);\nawait finalize(votingIdForSecond, true, {from: votingKey});\nnew web3.BigNumber(-1).should.be.bignumber.equal((await voting.getBallotInfo.call(votingIdForSecond, votingKey))[3]) // progress\nnew web3.BigNumber(1).should.be.bignumber.equal((await voting.getBallotInfo.call(votingId, votingKey))[3]) // progress",
                "err": {},
                "isRoot": false,
                "uuid": "47eb2627-fedd-48f1-91f1-6816ac0a5f95",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "allowed at once after all validators gave their votes",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #finalize allowed at once after all validators gave their votes",
                "timedOut": false,
                "duration": 2089,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let result = await keysManager.removeMiningKey(accounts[7]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nresult = await keysManager.removeMiningKey(accounts[8]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nresult = await keysManager.removeMiningKey(accounts[9]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait voting.setMinPossibleThreshold(2);\nawait voting.createBallot(\n  VOTING_START_DATE, // uint256 _startTime\n  VOTING_END_DATE,   // uint256 _endTime\n  2,                 // uint256 _proposedValue\n  \"memo\",            // string _memo\n  {from: votingKey3}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(0, votingKey3))[4]); // isFinalized\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(0, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(0, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(0, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+1);\nawait voting.finalize(0, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(0, votingKey2))[4]); // isFinalized\nawait voting.setTime(VOTING_START_DATE+172800+1);\n(await voting.getTime.call()).should.be.bignumber.below(VOTING_END_DATE);\nawait finalize(0, true, {from: votingKey2});\ntrue.should.be.equal((await voting.getBallotInfo.call(0, votingKey2))[4]); // isFinalized\nawait voting.setTime(VOTING_END_DATE+1);\nawait voting.finalize(0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = moment.utc().add(12, 'days').unix();\nVOTING_END_DATE = moment.utc().add(22, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, // uint256 _startTime\n  VOTING_END_DATE,   // uint256 _endTime\n  2,                 // uint256 _proposedValue\n  \"memo\",            // string _memo\n  {from: votingKey3}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(1, votingKey3))[4]); // isFinalized\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(1, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(1, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+172800+1);\n(await voting.getTime.call()).should.be.bignumber.below(VOTING_END_DATE);\nawait voting.finalize(1, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(1, votingKey2))[4]); // isFinalized\nawait voting.setTime(VOTING_END_DATE+1);\nawait finalize(1, true, {from: votingKey2});\ntrue.should.be.equal((await voting.getBallotInfo.call(1, votingKey2))[4]); // isFinalized",
                "err": {},
                "isRoot": false,
                "uuid": "9ebddab5-51c8-48fe-8810-e4344b6fec67",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should decrease validator limit only once when calling finalize more than once",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #finalize should decrease validator limit only once when calling finalize more than once",
                "timedOut": false,
                "duration": 1563,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let result = await keysManager.removeMiningKey(accounts[7]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nresult = await keysManager.removeMiningKey(accounts[8]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nresult = await keysManager.removeMiningKey(accounts[9]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait voting.setMinPossibleThreshold(2);\nawait ballotsStorage.setThresholdMock(1, 1);\nvotingId = await voting.nextBallotId.call();\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 2, \"memo\", {from: votingKey});\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 2, \"memo\", {from: votingKey});\n(await voting.validatorActiveBallots.call(miningKeyForVotingKey)).should.be.bignumber.equal(2);\n\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.accept, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait ballotsStorage.setThresholdMock(2, 1);\nawait voting.setTime(VOTING_END_DATE + 1);\nresult = await voting.finalize(votingId, {from: votingKey});\nresult.logs.length.should.be.equal(0);\n(await voting.validatorActiveBallots.call(miningKeyForVotingKey)).should.be.bignumber.equal(1);\n(await voting.getIsFinalized.call(votingId)).should.be.equal(false);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(1);\nresult = await voting.finalize(votingId, {from: votingKey});\nresult.logs.length.should.be.equal(0);\n(await voting.validatorActiveBallots.call(miningKeyForVotingKey)).should.be.bignumber.equal(1);\n(await voting.getIsFinalized.call(votingId)).should.be.equal(false);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(1);\nawait ballotsStorage.setThresholdMock(1, 1);\nresult = await voting.finalize(votingId, {from: votingKey});\nresult.logs[0].event.should.equal(\"BallotFinalized\");\n(await voting.validatorActiveBallots.call(miningKeyForVotingKey)).should.be.bignumber.equal(1);\n(await voting.getIsFinalized.call(votingId)).should.be.equal(true);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(2);",
                "err": {},
                "isRoot": false,
                "uuid": "a7cac9a4-011e-4894-b7f5-a9ebfc195338",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1a1e190c-8fc5-4157-8f7d-307efbf27f17",
              "04560be7-d2bd-4995-9258-66da0d594bdb",
              "47eb2627-fedd-48f1-91f1-6816ac0a5f95",
              "9ebddab5-51c8-48fe-8810-e4344b6fec67",
              "a7cac9a4-011e-4894-b7f5-a9ebfc195338"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 7581,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "35c058bf-c169-4f77-9d5e-dacfbeef527a",
            "title": "#migrate",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_min_threshold_upgrade_test.js",
            "file": "/test/voting_to_change_min_threshold_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should copy a ballot to the new contract",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #migrate should copy a ballot to the new contract",
                "timedOut": false,
                "duration": 1522,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nconst id = await voting.nextBallotId.call();\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 4, \"memo\", {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: votingKey3}).should.be.fulfilled;\nlet votingNew = await Voting.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingNew.address);\nvotingNew = await Voting.at(votingEternalStorage.address);\nawait votingNew.init(172800, 3).should.be.fulfilled;\nawait votingNew.setTime(VOTING_START_DATE);\nawait votingNew.migrateBasicOne(\n  id,\n  voting.address,\n  [miningKeyForVotingKey, accounts[2], accounts[4]]\n).should.be.fulfilled;\nconst ballotInfo = await votingNew.getBallotInfo.call(id, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(3), // totalVoters\n  new web3.BigNumber(-3), // progress\n  false, // isFinalized\n  new web3.BigNumber(4), // proposedValue\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await votingNew.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await votingNew.getIndex.call(id)).should.be.bignumber.equal(0);\n(await votingNew.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(3);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, miningKeyForVotingKey)).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[2])).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[4])).should.be.equal(true);\n(await votingNew.nextBallotId.call()).should.be.bignumber.equal(0);\n(await votingNew.activeBallotsLength.call()).should.be.bignumber.equal(0);\n(await votingNew.validatorActiveBallots.call(accounts[1])).should.be.bignumber.equal(0);\nawait votingNew.migrateBasicAll(voting.address, {from: accounts[6]}).should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateBasicAll('0x0000000000000000000000000000000000000000').should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateBasicAll(voting.address).should.be.fulfilled;\nawait votingNew.migrateBasicAll(voting.address).should.be.fulfilled;\n(await votingNew.nextBallotId.call()).should.be.bignumber.equal(1);\n(await votingNew.activeBallotsLength.call()).should.be.bignumber.equal(1);\n(await votingNew.validatorActiveBallots.call(accounts[1])).should.be.bignumber.equal(1);\n(await votingNew.migrateDisabled.call()).should.be.equal(false);\nawait votingNew.migrateDisable({from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateDisable().should.be.fulfilled;\n(await votingNew.migrateDisabled.call()).should.be.equal(true);\nawait votingNew.migrateBasicAll(voting.address).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "f4847a31-fe4b-4264-a035-b7126cc13b0a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f4847a31-fe4b-4264-a035-b7126cc13b0a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1522,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "6913772c-cc14-4435-b324-19396c6cd8f5",
        "title": "Contract: VotingToChangeProxyAddress [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_proxy_test.js",
        "file": "/test/voting_to_change_proxy_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: VotingToChangeProxyAddress [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 2274,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "976eafd6-a8b8-4fdb-a074-3a5ae350366d",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: VotingToChangeProxyAddress [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "8c9e3c9f-8c85-4832-9e34-72710ce61e08",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: VotingToChangeProxyAddress [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 1307,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "votingKey = accounts[2];\nmasterOfCeremony = accounts[0];\nminingKeyForVotingKey = accounts[1];\npoaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony, []);\n\nproxyStorageMock = await ProxyStorageMock.new();\nproxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorageMock.address);\nproxyStorageMock = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorageMock.init(poaNetworkConsensusMock.address).should.be.fulfilled;\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\n\nkeysManager = await KeysManagerMock.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, keysManager.address);\nkeysManager = await KeysManagerMock.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\n\nballotsStorage = await BallotsStorage.new();\nconst ballotsEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, ballotsStorage.address);\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\nlet votingForKeys = await VotingForKeys.new();\nvotingForKeysEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingForKeys.address);\nvotingForKeys = await VotingForKeys.at(votingForKeysEternalStorage.address);\nawait votingForKeys.init(172800).should.be.fulfilled;\nlet votingForMinThreshold = await VotingForMinThreshold.new();\nconst votingForMinThresholdEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingForMinThreshold.address);\nvotingForMinThreshold = await VotingForMinThreshold.at(votingForMinThresholdEternalStorage.address);\nawait votingForMinThreshold.init(172800, 3).should.be.fulfilled;\nlet votingForEmissionFunds = await VotingForEmissionFunds.new();\nconst votingForEmissionFundsEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingForEmissionFunds.address);\nvotingForEmissionFunds = await VotingForEmissionFunds.at(votingForEmissionFundsEternalStorage.address);\n\nvoting = await VotingToChangeProxyAddress.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, voting.address);\nvoting = await VotingToChangeProxyAddress.at(votingEternalStorage.address);\nawait voting.init(172800, {from: accounts[8]}).should.be.rejectedWith(ERROR_MSG);\nawait voting.init(172800).should.be.fulfilled;\nawait voting.migrateDisable().should.be.fulfilled;\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, validatorMetadata.address);\nlet rewardByBlock = await RewardByBlock.new();\nconst rewardByBlockEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, rewardByBlock.address);\nrewardByBlock = await RewardByBlock.at(rewardByBlockEternalStorage.address);\nawait proxyStorageMock.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingForKeysEternalStorage.address,\n  votingForMinThresholdEternalStorage.address,\n  votingEternalStorage.address,\n  votingForEmissionFunds.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlock.address\n);",
            "err": {},
            "isRoot": false,
            "uuid": "a923edc3-6bb0-4a82-8dbb-001474d14e9a",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: VotingToChangeProxyAddress [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "3b8c95a0-4eae-4e32-bf6a-a248856dd2bd",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "910d8d45-139f-40c8-9756-543c6c6bd91f",
            "title": "#createBallot",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_proxy_test.js",
            "file": "/test/voting_to_change_proxy_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #createBallot \"before each\" hook",
                "timedOut": false,
                "duration": 183,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait proxyStorageMock.setVotingContractMock(votingForKeysEternalStorage.address);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nid = await voting.nextBallotId.call();",
                "err": {},
                "isRoot": false,
                "uuid": "e53e2e51-bc6a-43cc-ae21-d4ce7f8c0b23",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #createBallot happy path",
                "timedOut": false,
                "duration": 276,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  \"memo\",\n  accounts[5],\n  { from: votingKey }\n);\nconst keysManagerFromContract = await voting.getKeysManager.call();\nconst ballotInfo = await voting.getBallotInfo.call(id, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(0), // totalVoters\n  new web3.BigNumber(0), // progress\n  false, // isFinalized\n  accounts[5], // proposedValue\n  new web3.BigNumber(1), // contractType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  false // hasAlreadyVoted\n]);\n\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await voting.getIndex.call(id)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(1);\n\nlet activeBallotsLength = await voting.activeBallotsLength.call();\nactiveBallotsLength.should.be.bignumber.equal(1);\nlet nextBallotId = await voting.nextBallotId.call();\nnextBallotId.should.be.bignumber.equal(1);\nkeysManagerFromContract.should.be.equal(keysManager.address);\nlogs[0].event.should.be.equal(\"BallotCreated\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.creator.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "2b3112b5-ed03-4e37-a4c3-d147a7c186c8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "proposed address should not be 0x0",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #createBallot proposed address should not be 0x0",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  2,\n  \"memo\",\n  '0x0000000000000000000000000000000000000000',\n  { from: votingKey }\n).should.be.fulfilled.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "ccf04e10-46f3-4f16-9976-d99712a235ea",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "can create multiple ballots",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #createBallot can create multiple ballots",
                "timedOut": false,
                "duration": 376,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const { logs } = await voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  \"memo\",\n  accounts[5],\n  { from: votingKey }\n);\nconst keysManagerFromContract = await voting.getKeysManager.call();\nlet activeBallotsLength = await voting.activeBallotsLength.call();\nactiveBallotsLength.should.be.bignumber.equal(1);\nlet nextBallotId = await voting.nextBallotId.call();\nnextBallotId.should.be.bignumber.equal(1);\nawait voting.createBallot(\n  VOTING_START_DATE + 1,\n  VOTING_END_DATE + 1,\n  2,\n  \"memo\",\n  accounts[5],\n  { from: votingKey }\n);\nconst ballotInfo = await voting.getBallotInfo.call(nextBallotId, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE+1), // startTime\n  new web3.BigNumber(VOTING_END_DATE+1), // endTime\n  new web3.BigNumber(0), // totalVoters\n  new web3.BigNumber(0), // progress\n  false, // isFinalized\n  accounts[5], // proposedValue\n  new web3.BigNumber(2), // contractType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  false // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(nextBallotId)).should.be.bignumber.equal(1);\n(await voting.getIndex.call(nextBallotId)).should.be.bignumber.equal(1);\n(await voting.getMinThresholdOfVoters.call(nextBallotId)).should.be.bignumber.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "22816c32-a302-41c4-b5dc-e2ec3c92fd8d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create more ballots than the limit",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #createBallot should not let create more ballots than the limit",
                "timedOut": false,
                "duration": 10112,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  2,\n  \"memo\",\n  accounts[5],\n  {from: votingKey}\n);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  2,\n  \"memo\",\n  accounts[5],\n  {from: votingKey}\n);\n// we have 1 validator, so 200 limit / 1 = 200\nnew web3.BigNumber(200).should.be.bignumber.equal(await voting.getBallotLimitPerValidator.call());\nawait addValidators({proxyStorageMock, keysManager, poaNetworkConsensusMock}); // add 100 validators, so total will be 101 validator\nnew web3.BigNumber(1).should.be.bignumber.equal(await voting.getBallotLimitPerValidator.call());\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  2,\n  \"memo\",\n  accounts[5],\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG)",
                "err": {},
                "isRoot": false,
                "uuid": "88074da3-3610-49cd-8d54-59e0d8d65e86",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2b3112b5-ed03-4e37-a4c3-d147a7c186c8",
              "ccf04e10-46f3-4f16-9976-d99712a235ea",
              "22816c32-a302-41c4-b5dc-e2ec3c92fd8d",
              "88074da3-3610-49cd-8d54-59e0d8d65e86"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 10780,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "e52bd21b-756d-45d9-9944-8e39fe2871c3",
            "title": "#vote",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_proxy_test.js",
            "file": "/test/voting_to_change_proxy_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote \"before each\" hook",
                "timedOut": false,
                "duration": 361,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nid = await voting.nextBallotId.call();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  \"memo\",\n  accounts[5],\n  { from: votingKey }\n);",
                "err": {},
                "isRoot": false,
                "uuid": "b78d9717-9f8e-4179-be10-f7041ff3c672",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "should let a validator to vote",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should let a validator to vote",
                "timedOut": false,
                "duration": 185,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst { logs } = await voting.vote(id, choice.accept, { from: votingKey }).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(1);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(1);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "30933a95-1d4d-4b62-b8e4-624ff8d48422",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "reject vote should be accepted",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote reject vote should be accepted",
                "timedOut": false,
                "duration": 200,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst { logs } = await voting.vote(id, choice.reject, { from: votingKey }).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(-1);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(2);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "4f8d4079-b76f-4317-b59d-56472bb26bf4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow multiple voters to vote",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should allow multiple voters to vote",
                "timedOut": false,
                "duration": 815,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.fulfilled;\nawait addVotingKey(accounts[3], accounts[1]);\nawait voting.vote(id, choice.reject, { from: accounts[3] }).should.be.rejectedWith(ERROR_MSG);\n// add new voter\nawait addMiningKey(accounts[2]);\nawait addVotingKey(accounts[4], accounts[2]);\nawait voting.vote(id, choice.reject, { from: accounts[4] }).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(-2);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(2);\nawait addMiningKey(accounts[3]);\nawait addVotingKey(accounts[5], accounts[3]);\nawait voting.vote(id, choice.accept, { from: accounts[5] }).should.be.fulfilled;\nprogress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(-1);\ntotalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "d17eee48-5953-484c-899e-5364197152c3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote nonVoting key",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should not let vote nonVoting key",
                "timedOut": false,
                "duration": 52,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, { from: accounts[0] }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "16994fcb-3487-4ebb-9aab-bb2c726d997a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote before startTime key",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should not let vote before startTime key",
                "timedOut": false,
                "duration": 94,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE - 1);\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "5c291463-91fa-459e-aece-9487e6ad6ed9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote after endTime key",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should not let vote after endTime key",
                "timedOut": false,
                "duration": 105,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE + 1);\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "a9a14a5d-e8bf-4606-9bfb-6130896d0930",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with already voted key",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should not let vote with already voted key",
                "timedOut": false,
                "duration": 198,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.fulfilled;\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "7957a966-3932-473a-95b3-cd63ddfe2a2f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid choice",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should not let vote with invalid choice",
                "timedOut": false,
                "duration": 175,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, 0, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, 3, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "77fc7128-bbf2-4b88-bd53-bf0883ef0ea7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid id",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should not let vote with invalid id",
                "timedOut": false,
                "duration": 175,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(99, 1, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(-3, 1, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "a0332b5c-0bd5-4b51-ae99-f02935d0b43f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "30933a95-1d4d-4b62-b8e4-624ff8d48422",
              "4f8d4079-b76f-4317-b59d-56472bb26bf4",
              "d17eee48-5953-484c-899e-5364197152c3",
              "16994fcb-3487-4ebb-9aab-bb2c726d997a",
              "5c291463-91fa-459e-aece-9487e6ad6ed9",
              "a9a14a5d-e8bf-4606-9bfb-6130896d0930",
              "7957a966-3932-473a-95b3-cd63ddfe2a2f",
              "77fc7128-bbf2-4b88-bd53-bf0883ef0ea7",
              "a0332b5c-0bd5-4b51-ae99-f02935d0b43f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1999,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "ca416f83-d3d3-40dc-870c-c0c27524f4ff",
            "title": "#finalize",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_proxy_test.js",
            "file": "/test/voting_to_change_proxy_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize \"before each\" hook",
                "timedOut": false,
                "duration": 450,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "votingKey = accounts[2];\nvotingKey2 = accounts[3];\nvotingKey3 = accounts[5];\npayoutKeyToAdd = accounts[0];\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait addMiningKey(accounts[6]);\nawait addVotingKey(votingKey2, accounts[6]);\nawait addMiningKey(accounts[4]);\nawait addVotingKey(votingKey3, accounts[4]);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(votingForKeysEternalStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "b25b1666-21fc-467c-b3f3-b54905632b61",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "does not change if it did not pass minimum threshold",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize does not change if it did not pass minimum threshold",
                "timedOut": false,
                "duration": 907,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proposedValue = 5;\nlet contractType = 1; //keysManager\nvotingId = await voting.nextBallotId.call();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  contractType,\n  \"memo\",\n  accounts[5],\n  { from: votingKey }\n);\nawait voting.finalize(votingId, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.accept, { from: votingKey }).should.be.fulfilled;\n// await voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nconst { logs } = await voting.finalize(votingId, { from: votingKey });\nawait voting.vote(votingId, choice.accept, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nactiveBallotsLength = await voting.activeBallotsLength.call();\nactiveBallotsLength.should.be.bignumber.equal(0);\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\n// Finalized(msg.sender);\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.voter.should.be.equal(votingKey);\nconst ballotInfo = await voting.getBallotInfo.call(votingId, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(1), // totalVoters\n  new web3.BigNumber(1), // progress\n  true, // isFinalized\n  accounts[5], // proposedValue\n  new web3.BigNumber(contractType), // contractType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(3);\n(await voting.getIndex.call(votingId)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(votingId)).should.be.bignumber.equal(2);\nconst minThresholdOfVoters = await ballotsStorage.getBallotThreshold.call(1);\nminThresholdOfVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "8e12da0a-84eb-475c-9c2d-da100c49835d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change KeysManager implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change KeysManager implementation",
                "timedOut": false,
                "duration": 883,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 1;\nlet keysManagerNew = await KeysManagerMock.new();\nlet newAddress = keysManagerNew.address;\nawait deployAndTest({contractType, newAddress})\nlet eternalProxyAddress = await proxyStorageMock.getKeysManager.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "607bb382-df89-465d-b17d-223684f36260",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change VotingToChangeKeys implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change VotingToChangeKeys implementation",
                "timedOut": false,
                "duration": 1070,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 2;\nlet votingToChangeKeysNew = await VotingForKeys.new();\nlet newAddress = votingToChangeKeysNew.address;\nawait deployAndTest({contractType, newAddress})\nlet eternalProxyAddress = await proxyStorageMock.getVotingToChangeKeys.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "049e524d-13ca-4404-99b9-f306d660f2dd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change VotingToChangeMinThreshold implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change VotingToChangeMinThreshold implementation",
                "timedOut": false,
                "duration": 1069,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 3;\nlet votingToChangeMinThresholdNew = await VotingForMinThreshold.new();\nlet newAddress = votingToChangeMinThresholdNew.address;\nawait deployAndTest({contractType, newAddress})\nlet eternalProxyAddress = await proxyStorageMock.getVotingToChangeMinThreshold.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "d3aa1d68-8da9-4ba8-95d5-b0a183ec9915",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change VotingToChangeProxy implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change VotingToChangeProxy implementation",
                "timedOut": false,
                "duration": 1068,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 4;\nlet votingToChangeProxyNew = await VotingToChangeProxyAddress.new();\nlet newAddress = votingToChangeProxyNew.address;\nawait deployAndTest({contractType, newAddress})\nlet eternalProxyAddress = await proxyStorageMock.getVotingToChangeProxy.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "c0818379-42c3-41a1-87b1-a71510299e24",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change BallotsStorage implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change BallotsStorage implementation",
                "timedOut": false,
                "duration": 984,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 5;\nlet ballotsStorageNew = await BallotsStorage.new();\nlet newAddress = ballotsStorageNew.address;\nawait deployAndTest({contractType, newAddress})\nlet eternalProxyAddress = await proxyStorageMock.getBallotsStorage.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "2234e4f6-f6fd-4349-8a27-167eaa70c85d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change ValidatorMetadata implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change ValidatorMetadata implementation",
                "timedOut": false,
                "duration": 1056,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 7;\nlet validatorMetadataNew = await ValidatorMetadata.new();\nlet newAddress = validatorMetadataNew.address;\nawait deployAndTest({contractType, newAddress})\nlet eternalProxyAddress = await proxyStorageMock.getValidatorMetadata.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "7616a8c3-5fe5-4069-afbe-ff7f065e5bfb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change ProxyStorage implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change ProxyStorage implementation",
                "timedOut": false,
                "duration": 990,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const contractType = 8;\nconst proxyStorageNew = await ProxyStorageMock.new();\nconst newAddress = proxyStorageNew.address;\nawait deployAndTest({contractType, newAddress})\nnewAddress.should.be.equal(await proxyStorageEternalStorage.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "d0d3c49a-c029-4321-a3eb-66400c26836e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevents double finalize",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize prevents double finalize",
                "timedOut": false,
                "duration": 1494,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newAddress1 = accounts[4];\nlet newAddress2 = accounts[5];\nlet contractType1 = 100;\nlet contractType2 = 101;\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  contractType1,\n  \"memo\",\n  newAddress1,\n  { from: votingKey }\n);\nawait voting.createBallot(\n  VOTING_START_DATE+2,\n  VOTING_END_DATE+2,\n  contractType2,\n  \"memo\",\n  newAddress2,\n  { from: votingKey }\n);\nconst activeBallotsLength = await voting.activeBallotsLength.call();\nvotingId = await voting.activeBallots.call(activeBallotsLength.toNumber() - 2);\nlet votingIdForSecond = votingId.add(1);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.reject, {from: votingKey}).should.be.fulfilled;\nfalse.should.be.equal(await voting.hasAlreadyVoted.call(votingId, votingKey2));\nawait voting.vote(votingId, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nfalse.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\nawait finalize(votingId, true, {from: votingKey});\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\nawait voting.finalize(votingId, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\n\nawait voting.finalize(votingIdForSecond, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal(await voting.getIsFinalized.call(votingIdForSecond));\nawait voting.vote(votingIdForSecond, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 3);\nawait finalize(votingIdForSecond, true, {from: votingKey});\nnew web3.BigNumber(-1).should.be.bignumber.equal((await voting.getBallotInfo.call(votingIdForSecond, votingKey))[3]) // progress\nlet ballotInfo = await voting.getBallotInfo.call(votingId, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(3), // totalVoters\n  new web3.BigNumber(-1), // progress\n  true, // isFinalized\n  newAddress1, // proposedValue\n  new web3.BigNumber(contractType1), // contractType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(3);\n(await voting.getIndex.call(votingId)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(votingId)).should.be.bignumber.equal(2);\nballotInfo = await voting.getBallotInfo.call(votingIdForSecond, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE+2), // startTime\n  new web3.BigNumber(VOTING_END_DATE+2), // endTime\n  new web3.BigNumber(1), // totalVoters\n  new web3.BigNumber(-1), // progress\n  true, // isFinalized\n  newAddress2, // proposedValue\n  new web3.BigNumber(contractType2), // contractType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(votingIdForSecond)).should.be.bignumber.equal(3);\n(await voting.getIndex.call(votingIdForSecond)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(votingIdForSecond)).should.be.bignumber.equal(2);",
                "err": {},
                "isRoot": false,
                "uuid": "cba0e18a-f9f8-4dea-a304-150afd4a4c32",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "allowed at once after all validators gave their votes",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize allowed at once after all validators gave their votes",
                "timedOut": false,
                "duration": 1747,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, // uint256 _startTime\n  VOTING_END_DATE,   // uint256 _endTime\n  100,               // uint256 _contractType\n  \"memo\",            // string _memo\n  accounts[7],       // address _proposedValue\n  {from: votingKey}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(0, votingKey))[4]); // isFinalized\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(0, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(0, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(0, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+1);\nawait voting.finalize(0, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(0, votingKey2))[4]); // isFinalized\nawait voting.setTime(VOTING_START_DATE+172800+1);\n(await voting.getTime.call()).should.be.bignumber.below(VOTING_END_DATE);\nawait finalize(0, true, {from: votingKey2});\ntrue.should.be.equal((await voting.getBallotInfo.call(0, votingKey2))[4]); // isFinalized\nawait voting.setTime(VOTING_END_DATE+1);\nawait voting.finalize(0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = moment.utc().add(12, 'days').unix();\nVOTING_END_DATE = moment.utc().add(22, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, // uint256 _startTime\n  VOTING_END_DATE,   // uint256 _endTime\n  100,               // uint256 _contractType\n  \"memo\",            // string _memo\n  accounts[8],       // address _proposedValue\n  {from: votingKey}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(1, votingKey))[4]); // isFinalized\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(1, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(1, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+172800+1);\n(await voting.getTime.call()).should.be.bignumber.below(VOTING_END_DATE);\nawait voting.finalize(1, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(1, votingKey2))[4]); // isFinalized\nawait voting.setTime(VOTING_END_DATE+1);\nawait finalize(1, true, {from: votingKey2});\ntrue.should.be.equal((await voting.getBallotInfo.call(1, votingKey2))[4]); // isFinalized",
                "err": {},
                "isRoot": false,
                "uuid": "39bec7ab-856e-4ce4-9829-33672727c389",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8e12da0a-84eb-475c-9c2d-da100c49835d",
              "607bb382-df89-465d-b17d-223684f36260",
              "049e524d-13ca-4404-99b9-f306d660f2dd",
              "d3aa1d68-8da9-4ba8-95d5-b0a183ec9915",
              "c0818379-42c3-41a1-87b1-a71510299e24",
              "2234e4f6-f6fd-4349-8a27-167eaa70c85d",
              "7616a8c3-5fe5-4069-afbe-ff7f065e5bfb",
              "d0d3c49a-c029-4321-a3eb-66400c26836e",
              "cba0e18a-f9f8-4dea-a304-150afd4a4c32",
              "39bec7ab-856e-4ce4-9829-33672727c389"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 11268,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "747932d0-030b-4d75-a13a-26b4ce8af7b1",
            "title": "#migrate",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_proxy_test.js",
            "file": "/test/voting_to_change_proxy_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should copy a ballot to the new contract",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #migrate should copy a ballot to the new contract",
                "timedOut": false,
                "duration": 2033,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKeyForVotingKey);\nawait addVotingKey(votingKey, miningKeyForVotingKey);\nawait addMiningKey(accounts[3]);\nawait addVotingKey(accounts[4], accounts[3]);\nawait addMiningKey(accounts[5]);\nawait addVotingKey(accounts[6], accounts[5]);\nawait proxyStorageMock.setVotingContractMock(votingForKeysEternalStorage.address);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nconst id = await voting.nextBallotId.call();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  \"memo\",\n  accounts[7],\n  {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: accounts[4]}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: accounts[6]}).should.be.fulfilled;\nlet votingNew = await VotingToChangeProxyAddress.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingNew.address);\nvotingNew = await VotingToChangeProxyAddress.at(votingEternalStorage.address);\nawait votingNew.init(172800).should.be.fulfilled;\nawait votingNew.setTime(VOTING_START_DATE);\nawait votingNew.migrateBasicOne(\n  id,\n  voting.address,\n  [miningKeyForVotingKey, accounts[3], accounts[5]]\n).should.be.fulfilled;\nconst ballotInfo = await votingNew.getBallotInfo.call(id, votingKey);\n\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(3), // totalVoters\n  new web3.BigNumber(-3), // progress\n  false, // isFinalized\n  accounts[7], // proposedValue\n  new web3.BigNumber(1), // contractType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await votingNew.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await votingNew.getIndex.call(id)).should.be.bignumber.equal(0);\n(await votingNew.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(2);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, miningKeyForVotingKey)).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[2])).should.be.equal(false);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[3])).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[4])).should.be.equal(false);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[5])).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[6])).should.be.equal(false);\n(await votingNew.nextBallotId.call()).should.be.bignumber.equal(0);\n(await votingNew.activeBallotsLength.call()).should.be.bignumber.equal(0);\n(await votingNew.validatorActiveBallots.call(accounts[1])).should.be.bignumber.equal(0);\nawait votingNew.migrateBasicAll(voting.address, {from: accounts[6]}).should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateBasicAll('0x0000000000000000000000000000000000000000').should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateBasicAll(voting.address).should.be.fulfilled;\nawait votingNew.migrateBasicAll(voting.address).should.be.fulfilled;\n(await votingNew.nextBallotId.call()).should.be.bignumber.equal(1);\n(await votingNew.activeBallotsLength.call()).should.be.bignumber.equal(1);\n(await votingNew.validatorActiveBallots.call(accounts[1])).should.be.bignumber.equal(1);\n(await votingNew.migrateDisabled.call()).should.be.equal(false);\nawait votingNew.migrateDisable({from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateDisable().should.be.fulfilled;\n(await votingNew.migrateDisabled.call()).should.be.equal(true);\nawait votingNew.migrateBasicAll(voting.address).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "86a24268-d3f3-4dc8-91dc-ef179852aa8a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "86a24268-d3f3-4dc8-91dc-ef179852aa8a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2033,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "bcbb6864-f734-4351-96ba-9e2aa0187108",
            "title": "#upgradeTo",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_proxy_test.js",
            "file": "/test/voting_to_change_proxy_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #upgradeTo \"before each\" hook",
                "timedOut": false,
                "duration": 149,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "proxyStorageStubAddress = accounts[8];\nvoting = await VotingToChangeProxyAddress.new();\nvotingOldImplementation = voting.address;\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageStubAddress, voting.address);\nvoting = await VotingToChangeProxyAddress.at(votingEternalStorage.address);\nawait voting.init(172800).should.be.fulfilled;\nawait voting.migrateDisable().should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "e81eb29b-e84d-44cf-b42d-f441d07b700f",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by ProxyStorage",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #upgradeTo may only be called by ProxyStorage",
                "timedOut": false,
                "duration": 86,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToChangeProxyAddressNew.new();\nawait votingEternalStorage.upgradeTo(votingNew.address, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});",
                "err": {},
                "isRoot": false,
                "uuid": "e8064778-1611-45b2-ab11-f71f25a27cb7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change implementation address",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #upgradeTo should change implementation address",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToChangeProxyAddressNew.new();\nlet newImplementation = votingNew.address;\n(await votingEternalStorage.implementation.call()).should.be.equal(votingOldImplementation);\nawait upgradeTo(newImplementation, {from: proxyStorageStubAddress});\n(await votingEternalStorage.implementation.call()).should.be.equal(newImplementation);",
                "err": {},
                "isRoot": false,
                "uuid": "263249b1-837f-4830-8f41-e5f4c7c5f678",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment implementation version",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #upgradeTo should increment implementation version",
                "timedOut": false,
                "duration": 150,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToChangeProxyAddressNew.new();\nlet oldVersion = await votingEternalStorage.version.call();\nlet newVersion = oldVersion.add(1);\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\n(await votingEternalStorage.version.call()).should.be.bignumber.equal(newVersion);",
                "err": {},
                "isRoot": false,
                "uuid": "288a2d35-ac82-4120-8612-0abd3333c6cf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should work",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #upgradeTo new implementation should work",
                "timedOut": false,
                "duration": 130,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToChangeProxyAddressNew.new();\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\nvotingNew = await VotingToChangeProxyAddressNew.at(votingEternalStorage.address);\n(await votingNew.initialized.call()).should.be.equal(false);\nawait votingNew.initialize();\n(await votingNew.initialized.call()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "11418a7c-0f5f-4938-bace-7bc32e03c5cc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same proxyStorage address",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #upgradeTo new implementation should use the same proxyStorage address",
                "timedOut": false,
                "duration": 96,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToChangeProxyAddressNew.new();\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\nvotingNew = await VotingToChangeProxyAddressNew.at(votingEternalStorage.address);\n(await votingNew.proxyStorage.call()).should.be.equal(proxyStorageStubAddress);",
                "err": {},
                "isRoot": false,
                "uuid": "e259143e-67eb-43e4-84a1-fdd704747ebb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same storage",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #upgradeTo new implementation should use the same storage",
                "timedOut": false,
                "duration": 536,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nconst id = await voting.nextBallotId.call();\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKeyForVotingKey);\nawait addVotingKey(votingKey, miningKeyForVotingKey);\nawait proxyStorageMock.setVotingContractMock(votingForKeysEternalStorage.address);\nawait votingEternalStorage.setProxyStorage(proxyStorageMock.address);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  \"memo\",\n  accounts[5],\n  { from: votingKey }\n).should.be.fulfilled;\nawait votingEternalStorage.setProxyStorage(proxyStorageStubAddress);\nlet votingNew = await VotingToChangeProxyAddressNew.new();\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\nvotingNew = await VotingToChangeProxyAddressNew.at(votingEternalStorage.address);\nawait votingEternalStorage.setProxyStorage(proxyStorageMock.address);\nconst ballotInfo = await votingNew.getBallotInfo.call(id, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(0), // totalVoters\n  new web3.BigNumber(0), // progress\n  false, // isFinalized\n  accounts[5], // proposedValue\n  new web3.BigNumber(1), // contractType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  false // hasAlreadyVoted\n]);\n(await votingNew.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await votingNew.getIndex.call(id)).should.be.bignumber.equal(0);\n(await votingNew.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "1c4e6388-422b-46d5-8ae0-4d79ec89e85d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e8064778-1611-45b2-ab11-f71f25a27cb7",
              "263249b1-837f-4830-8f41-e5f4c7c5f678",
              "288a2d35-ac82-4120-8612-0abd3333c6cf",
              "11418a7c-0f5f-4938-bace-7bc32e03c5cc",
              "e259143e-67eb-43e4-84a1-fdd704747ebb",
              "1c4e6388-422b-46d5-8ae0-4d79ec89e85d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1088,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "a99077cf-8f80-46c9-92c9-2eadfb259af3",
        "title": "Contract: VotingToChangeProxyAddress upgraded [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_proxy_upgrade_test.js",
        "file": "/test/voting_to_change_proxy_upgrade_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 3655,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "0c260b95-96c7-4587-8c0b-3a25b7238101",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "496f19ef-d7d4-4692-b035-645fd8e3bae5",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 1232,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "votingKey = accounts[2];\nmasterOfCeremony = accounts[0];\nminingKeyForVotingKey = accounts[1];\npoaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony, []);\n\nproxyStorageMock = await ProxyStorageMock.new();\nproxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorageMock.address);\nproxyStorageMock = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorageMock.init(poaNetworkConsensusMock.address).should.be.fulfilled;\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\n\nkeysManager = await KeysManagerMock.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, keysManager.address);\nkeysManager = await KeysManagerMock.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\n\nballotsStorage = await BallotsStorage.new();\nconst ballotsEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, ballotsStorage.address);\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\nlet votingForKeys = await VotingForKeys.new();\nvotingForKeysEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingForKeys.address);\nvotingForKeys = await VotingForKeys.at(votingForKeysEternalStorage.address);\nawait votingForKeys.init(172800).should.be.fulfilled;\nlet votingForMinThreshold = await VotingForMinThreshold.new();\nconst votingForMinThresholdEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingForMinThreshold.address);\nvotingForMinThreshold = await VotingForMinThreshold.at(votingForMinThresholdEternalStorage.address);\nawait votingForMinThreshold.init(172800, 3).should.be.fulfilled;\nlet votingForEmissionFunds = await VotingForEmissionFunds.new();\nconst votingForEmissionFundsEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingForEmissionFunds.address);\nvotingForEmissionFunds = await VotingForEmissionFunds.at(votingForEmissionFundsEternalStorage.address);\n\nvoting = await VotingToChangeProxyAddress.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, voting.address);\nvoting = await VotingToChangeProxyAddress.at(votingEternalStorage.address);\nawait voting.init(172800, {from: accounts[8]}).should.be.rejectedWith(ERROR_MSG);\nawait voting.init(172800).should.be.fulfilled;\nawait voting.migrateDisable().should.be.fulfilled;\nvotingNew = await VotingToChangeProxyAddressNew.new();\nawait votingEternalStorage.setProxyStorage(accounts[7]);\nconst {logs} = await votingEternalStorage.upgradeTo(votingNew.address, {from: accounts[7]}).should.be.fulfilled;\nlogs[0].event.should.be.equal(\"Upgraded\");\nawait votingEternalStorage.setProxyStorage(proxyStorageMock.address);\nvoting = await VotingToChangeProxyAddressNew.at(votingEternalStorage.address);\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, validatorMetadata.address);\nlet rewardByBlock = await RewardByBlock.new();\nconst rewardByBlockEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, rewardByBlock.address);\nrewardByBlock = await RewardByBlock.at(rewardByBlockEternalStorage.address);\nawait proxyStorageMock.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingForKeysEternalStorage.address,\n  votingForMinThresholdEternalStorage.address,\n  votingEternalStorage.address,\n  votingForEmissionFunds.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlock.address\n);",
            "err": {},
            "isRoot": false,
            "uuid": "ad4f75e1-10f0-4839-9a90-b1e3467c6b99",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "ad1bf77d-e6b4-4f98-a3ff-3cd113011edb",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "a5a03aba-8046-4182-bef5-dc02a8cfd4b0",
            "title": "#createBallot",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_proxy_upgrade_test.js",
            "file": "/test/voting_to_change_proxy_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #createBallot \"before each\" hook",
                "timedOut": false,
                "duration": 301,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait proxyStorageMock.setVotingContractMock(votingForKeysEternalStorage.address);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nid = await voting.nextBallotId.call();",
                "err": {},
                "isRoot": false,
                "uuid": "970a3677-1ddf-4d41-98a2-7f40e37bb5b7",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #createBallot happy path",
                "timedOut": false,
                "duration": 250,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  \"memo\",\n  accounts[5],\n  { from: votingKey }\n);\nconst keysManagerFromContract = await voting.getKeysManager.call();\nconst ballotInfo = await voting.getBallotInfo.call(id, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(0), // totalVoters\n  new web3.BigNumber(0), // progress\n  false, // isFinalized\n  accounts[5], // proposedValue\n  new web3.BigNumber(1), // contractType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  false // hasAlreadyVoted\n]);\n\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await voting.getIndex.call(id)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(1);\n\nlet activeBallotsLength = await voting.activeBallotsLength.call();\nactiveBallotsLength.should.be.bignumber.equal(1);\nlet nextBallotId = await voting.nextBallotId.call();\nnextBallotId.should.be.bignumber.equal(1);\nkeysManagerFromContract.should.be.equal(keysManager.address);\nlogs[0].event.should.be.equal(\"BallotCreated\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.creator.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "397ec3dd-9e28-4c44-a8a6-9c8c202d087b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "proposed address should not be 0x0",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #createBallot proposed address should not be 0x0",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  2,\n  \"memo\",\n  '0x0000000000000000000000000000000000000000',\n  { from: votingKey }\n).should.be.fulfilled.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "d0f4371f-d283-4f2e-a2d0-7c5ac7d04d2e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "can create multiple ballots",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #createBallot can create multiple ballots",
                "timedOut": false,
                "duration": 423,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const { logs } = await voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  \"memo\",\n  accounts[5],\n  { from: votingKey }\n);\nconst keysManagerFromContract = await voting.getKeysManager.call();\nlet activeBallotsLength = await voting.activeBallotsLength.call();\nactiveBallotsLength.should.be.bignumber.equal(1);\nlet nextBallotId = await voting.nextBallotId.call();\nnextBallotId.should.be.bignumber.equal(1);\nawait voting.createBallot(\n  VOTING_START_DATE + 1,\n  VOTING_END_DATE + 1,\n  2,\n  \"memo\",\n  accounts[5],\n  { from: votingKey }\n);\nconst ballotInfo = await voting.getBallotInfo.call(nextBallotId, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE+1), // startTime\n  new web3.BigNumber(VOTING_END_DATE+1), // endTime\n  new web3.BigNumber(0), // totalVoters\n  new web3.BigNumber(0), // progress\n  false, // isFinalized\n  accounts[5], // proposedValue\n  new web3.BigNumber(2), // contractType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  false // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(nextBallotId)).should.be.bignumber.equal(1);\n(await voting.getIndex.call(nextBallotId)).should.be.bignumber.equal(1);\n(await voting.getMinThresholdOfVoters.call(nextBallotId)).should.be.bignumber.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "1fb54dd8-b353-4f92-80c1-f85106617636",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create more ballots than the limit",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #createBallot should not let create more ballots than the limit",
                "timedOut": false,
                "duration": 10272,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  2,\n  \"memo\",\n  accounts[5],\n  {from: votingKey}\n);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  2,\n  \"memo\",\n  accounts[5],\n  {from: votingKey}\n);\n// we have 1 validator, so 200 limit / 1 = 200\nnew web3.BigNumber(200).should.be.bignumber.equal(await voting.getBallotLimitPerValidator.call());\nawait addValidators({proxyStorageMock, keysManager, poaNetworkConsensusMock}); // add 100 validators, so total will be 101 validator\nnew web3.BigNumber(1).should.be.bignumber.equal(await voting.getBallotLimitPerValidator.call());\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  2,\n  \"memo\",\n  accounts[5],\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG)",
                "err": {},
                "isRoot": false,
                "uuid": "7845c5d3-a19b-40d0-92e3-0d7484b9a0e7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "397ec3dd-9e28-4c44-a8a6-9c8c202d087b",
              "d0f4371f-d283-4f2e-a2d0-7c5ac7d04d2e",
              "1fb54dd8-b353-4f92-80c1-f85106617636",
              "7845c5d3-a19b-40d0-92e3-0d7484b9a0e7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 10961,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "a4e682a0-b3a6-4c21-98b6-362df7651678",
            "title": "#vote",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_proxy_upgrade_test.js",
            "file": "/test/voting_to_change_proxy_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #vote \"before each\" hook",
                "timedOut": false,
                "duration": 294,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nid = await voting.nextBallotId.call();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  \"memo\",\n  accounts[5],\n  { from: votingKey }\n);",
                "err": {},
                "isRoot": false,
                "uuid": "c3ccf6fe-d705-413a-9165-351822c3fe55",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "should let a validator to vote",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #vote should let a validator to vote",
                "timedOut": false,
                "duration": 188,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst { logs } = await voting.vote(id, choice.accept, { from: votingKey }).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(1);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(1);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "8b5dd896-85e5-4088-bdf3-a5e0a5dad535",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "reject vote should be accepted",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #vote reject vote should be accepted",
                "timedOut": false,
                "duration": 232,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst { logs } = await voting.vote(id, choice.reject, { from: votingKey }).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(-1);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(2);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "c28df48f-be8e-4173-ae42-5a0395977876",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow multiple voters to vote",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #vote should allow multiple voters to vote",
                "timedOut": false,
                "duration": 858,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.fulfilled;\nawait addVotingKey(accounts[3], accounts[1]);\nawait voting.vote(id, choice.reject, { from: accounts[3] }).should.be.rejectedWith(ERROR_MSG);\n// add new voter\nawait addMiningKey(accounts[2]);\nawait addVotingKey(accounts[4], accounts[2]);\nawait voting.vote(id, choice.reject, { from: accounts[4] }).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(-2);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(2);\nawait addMiningKey(accounts[3]);\nawait addVotingKey(accounts[5], accounts[3]);\nawait voting.vote(id, choice.accept, { from: accounts[5] }).should.be.fulfilled;\nprogress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(-1);\ntotalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "a8a97506-25b8-4092-9063-a843bfbfd970",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote nonVoting key",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #vote should not let vote nonVoting key",
                "timedOut": false,
                "duration": 58,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, { from: accounts[0] }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "5ddefe4a-e999-4c79-baac-a307204eec92",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote before startTime key",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #vote should not let vote before startTime key",
                "timedOut": false,
                "duration": 164,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE - 1);\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "a07f8249-51e7-4b9b-94c1-3008e2f5de28",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote after endTime key",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #vote should not let vote after endTime key",
                "timedOut": false,
                "duration": 101,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE + 1);\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "e1e1aacb-1fea-4750-8548-c2d02944555c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with already voted key",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #vote should not let vote with already voted key",
                "timedOut": false,
                "duration": 187,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.fulfilled;\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "293b02f0-9381-4b82-b9af-554aa43707bd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid choice",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #vote should not let vote with invalid choice",
                "timedOut": false,
                "duration": 177,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, 0, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, 3, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "449b8b2d-5cc6-4c06-8066-9c3d818441ea",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid id",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #vote should not let vote with invalid id",
                "timedOut": false,
                "duration": 294,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(99, 1, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(-3, 1, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "1168f9aa-e608-4af4-9301-9ce42cfcd35c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8b5dd896-85e5-4088-bdf3-a5e0a5dad535",
              "c28df48f-be8e-4173-ae42-5a0395977876",
              "a8a97506-25b8-4092-9063-a843bfbfd970",
              "5ddefe4a-e999-4c79-baac-a307204eec92",
              "a07f8249-51e7-4b9b-94c1-3008e2f5de28",
              "e1e1aacb-1fea-4750-8548-c2d02944555c",
              "293b02f0-9381-4b82-b9af-554aa43707bd",
              "449b8b2d-5cc6-4c06-8066-9c3d818441ea",
              "1168f9aa-e608-4af4-9301-9ce42cfcd35c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2259,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "f012a960-88c0-402f-a324-ffcc721639de",
            "title": "#finalize",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_proxy_upgrade_test.js",
            "file": "/test/voting_to_change_proxy_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #finalize \"before each\" hook",
                "timedOut": false,
                "duration": 440,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "votingKey = accounts[2];\nvotingKey2 = accounts[3];\nvotingKey3 = accounts[5];\npayoutKeyToAdd = accounts[0];\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait addMiningKey(accounts[6]);\nawait addVotingKey(votingKey2, accounts[6]);\nawait addMiningKey(accounts[4]);\nawait addVotingKey(votingKey3, accounts[4]);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(votingForKeysEternalStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "1d3d2518-7c15-433b-9bf1-6d2089a48766",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "does not change if it did not pass minimum threshold",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #finalize does not change if it did not pass minimum threshold",
                "timedOut": false,
                "duration": 650,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proposedValue = 5;\nlet contractType = 1; //keysManager\nvotingId = await voting.nextBallotId.call();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  contractType,\n  \"memo\",\n  accounts[5],\n  { from: votingKey }\n);\nawait voting.finalize(votingId, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.accept, { from: votingKey }).should.be.fulfilled;\n// await voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nconst { logs } = await voting.finalize(votingId, { from: votingKey });\nawait voting.vote(votingId, choice.accept, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nactiveBallotsLength = await voting.activeBallotsLength.call();\nactiveBallotsLength.should.be.bignumber.equal(0);\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\n// Finalized(msg.sender);\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.voter.should.be.equal(votingKey);\nconst ballotInfo = await voting.getBallotInfo.call(votingId, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(1), // totalVoters\n  new web3.BigNumber(1), // progress\n  true, // isFinalized\n  accounts[5], // proposedValue\n  new web3.BigNumber(contractType), // contractType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(3);\n(await voting.getIndex.call(votingId)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(votingId)).should.be.bignumber.equal(2);\nconst minThresholdOfVoters = await ballotsStorage.getBallotThreshold.call(1);\nminThresholdOfVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "e7bdd31f-316c-4537-8d6a-2e9eba6f4bea",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change KeysManager implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #finalize should change KeysManager implementation",
                "timedOut": false,
                "duration": 870,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 1;\nlet keysManagerNew = await KeysManagerMock.new();\nlet newAddress = keysManagerNew.address;\nawait deployAndTest({contractType, newAddress})\nlet eternalProxyAddress = await proxyStorageMock.getKeysManager.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "c0efe6a8-3ea3-42eb-9809-3f29cef671fc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change VotingToChangeKeys implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #finalize should change VotingToChangeKeys implementation",
                "timedOut": false,
                "duration": 1102,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 2;\nlet votingToChangeKeysNew = await VotingForKeys.new();\nlet newAddress = votingToChangeKeysNew.address;\nawait deployAndTest({contractType, newAddress})\nlet eternalProxyAddress = await proxyStorageMock.getVotingToChangeKeys.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "8197c8a4-5753-47ac-b2c1-63d57d26ce81",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change VotingToChangeMinThreshold implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #finalize should change VotingToChangeMinThreshold implementation",
                "timedOut": false,
                "duration": 1017,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 3;\nlet votingToChangeMinThresholdNew = await VotingForMinThreshold.new();\nlet newAddress = votingToChangeMinThresholdNew.address;\nawait deployAndTest({contractType, newAddress})\nlet eternalProxyAddress = await proxyStorageMock.getVotingToChangeMinThreshold.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "a9adecd0-cad1-462c-bc38-94cc99d634a5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change VotingToChangeProxy implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #finalize should change VotingToChangeProxy implementation",
                "timedOut": false,
                "duration": 1113,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 4;\nlet votingToChangeProxyNew = await VotingToChangeProxyAddress.new();\nlet newAddress = votingToChangeProxyNew.address;\nawait deployAndTest({contractType, newAddress})\nlet eternalProxyAddress = await proxyStorageMock.getVotingToChangeProxy.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "54990816-c7f3-4220-834b-d4a51a8e9e79",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change BallotsStorage implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #finalize should change BallotsStorage implementation",
                "timedOut": false,
                "duration": 1032,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 5;\nlet ballotsStorageNew = await BallotsStorage.new();\nlet newAddress = ballotsStorageNew.address;\nawait deployAndTest({contractType, newAddress})\nlet eternalProxyAddress = await proxyStorageMock.getBallotsStorage.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "71588bc8-9b84-4a97-9074-872666030592",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change ValidatorMetadata implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #finalize should change ValidatorMetadata implementation",
                "timedOut": false,
                "duration": 1002,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 7;\nlet validatorMetadataNew = await ValidatorMetadata.new();\nlet newAddress = validatorMetadataNew.address;\nawait deployAndTest({contractType, newAddress})\nlet eternalProxyAddress = await proxyStorageMock.getValidatorMetadata.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "48982c49-03f9-4e67-af36-a439d8374934",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change ProxyStorage implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #finalize should change ProxyStorage implementation",
                "timedOut": false,
                "duration": 1032,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const contractType = 8;\nconst proxyStorageNew = await ProxyStorageMock.new();\nconst newAddress = proxyStorageNew.address;\nawait deployAndTest({contractType, newAddress})\nnewAddress.should.be.equal(await proxyStorageEternalStorage.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "d0c7b2f2-c703-49dc-b46f-7d2d9dac4f14",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevents double finalize",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #finalize prevents double finalize",
                "timedOut": false,
                "duration": 1497,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newAddress1 = accounts[4];\nlet newAddress2 = accounts[5];\nlet contractType1 = 100;\nlet contractType2 = 101;\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  contractType1,\n  \"memo\",\n  newAddress1,\n  { from: votingKey }\n);\nawait voting.createBallot(\n  VOTING_START_DATE+2,\n  VOTING_END_DATE+2,\n  contractType2,\n  \"memo\",\n  newAddress2,\n  { from: votingKey }\n);\nconst activeBallotsLength = await voting.activeBallotsLength.call();\nvotingId = await voting.activeBallots.call(activeBallotsLength.toNumber() - 2);\nlet votingIdForSecond = votingId.add(1);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.reject, {from: votingKey}).should.be.fulfilled;\nfalse.should.be.equal(await voting.hasAlreadyVoted.call(votingId, votingKey2));\nawait voting.vote(votingId, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nfalse.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\nawait finalize(votingId, true, {from: votingKey});\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\nawait voting.finalize(votingId, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\n\nawait voting.finalize(votingIdForSecond, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal(await voting.getIsFinalized.call(votingIdForSecond));\nawait voting.vote(votingIdForSecond, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 3);\nawait finalize(votingIdForSecond, true, {from: votingKey});\nnew web3.BigNumber(-1).should.be.bignumber.equal((await voting.getBallotInfo.call(votingIdForSecond, votingKey))[3]) // progress\nlet ballotInfo = await voting.getBallotInfo.call(votingId, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(3), // totalVoters\n  new web3.BigNumber(-1), // progress\n  true, // isFinalized\n  newAddress1, // proposedValue\n  new web3.BigNumber(contractType1), // contractType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(3);\n(await voting.getIndex.call(votingId)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(votingId)).should.be.bignumber.equal(2);\nballotInfo = await voting.getBallotInfo.call(votingIdForSecond, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE+2), // startTime\n  new web3.BigNumber(VOTING_END_DATE+2), // endTime\n  new web3.BigNumber(1), // totalVoters\n  new web3.BigNumber(-1), // progress\n  true, // isFinalized\n  newAddress2, // proposedValue\n  new web3.BigNumber(contractType2), // contractType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(votingIdForSecond)).should.be.bignumber.equal(3);\n(await voting.getIndex.call(votingIdForSecond)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(votingIdForSecond)).should.be.bignumber.equal(2);",
                "err": {},
                "isRoot": false,
                "uuid": "ab4f5160-51af-4de1-b2ad-f79ab4a418b4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "allowed at once after all validators gave their votes",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #finalize allowed at once after all validators gave their votes",
                "timedOut": false,
                "duration": 1694,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, // uint256 _startTime\n  VOTING_END_DATE,   // uint256 _endTime\n  100,               // uint256 _contractType\n  \"memo\",            // string _memo\n  accounts[7],       // address _proposedValue\n  {from: votingKey}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(0, votingKey))[4]); // isFinalized\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(0, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(0, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(0, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+1);\nawait voting.finalize(0, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(0, votingKey2))[4]); // isFinalized\nawait voting.setTime(VOTING_START_DATE+172800+1);\n(await voting.getTime.call()).should.be.bignumber.below(VOTING_END_DATE);\nawait finalize(0, true, {from: votingKey2});\ntrue.should.be.equal((await voting.getBallotInfo.call(0, votingKey2))[4]); // isFinalized\nawait voting.setTime(VOTING_END_DATE+1);\nawait voting.finalize(0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = moment.utc().add(12, 'days').unix();\nVOTING_END_DATE = moment.utc().add(22, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, // uint256 _startTime\n  VOTING_END_DATE,   // uint256 _endTime\n  100,               // uint256 _contractType\n  \"memo\",            // string _memo\n  accounts[8],       // address _proposedValue\n  {from: votingKey}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(1, votingKey))[4]); // isFinalized\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(1, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(1, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+172800+1);\n(await voting.getTime.call()).should.be.bignumber.below(VOTING_END_DATE);\nawait voting.finalize(1, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(1, votingKey2))[4]); // isFinalized\nawait voting.setTime(VOTING_END_DATE+1);\nawait finalize(1, true, {from: votingKey2});\ntrue.should.be.equal((await voting.getBallotInfo.call(1, votingKey2))[4]); // isFinalized",
                "err": {},
                "isRoot": false,
                "uuid": "75822218-4ad1-4ed5-bb4e-9b9e9905e1ac",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e7bdd31f-316c-4537-8d6a-2e9eba6f4bea",
              "c0efe6a8-3ea3-42eb-9809-3f29cef671fc",
              "8197c8a4-5753-47ac-b2c1-63d57d26ce81",
              "a9adecd0-cad1-462c-bc38-94cc99d634a5",
              "54990816-c7f3-4220-834b-d4a51a8e9e79",
              "71588bc8-9b84-4a97-9074-872666030592",
              "48982c49-03f9-4e67-af36-a439d8374934",
              "d0c7b2f2-c703-49dc-b46f-7d2d9dac4f14",
              "ab4f5160-51af-4de1-b2ad-f79ab4a418b4",
              "75822218-4ad1-4ed5-bb4e-9b9e9905e1ac"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 11009,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "7c0681d2-1f66-48fd-a6b8-71dbb49e791b",
            "title": "#migrate",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_proxy_upgrade_test.js",
            "file": "/test/voting_to_change_proxy_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should copy a ballot to the new contract",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #migrate should copy a ballot to the new contract",
                "timedOut": false,
                "duration": 1982,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKeyForVotingKey);\nawait addVotingKey(votingKey, miningKeyForVotingKey);\nawait addMiningKey(accounts[3]);\nawait addVotingKey(accounts[4], accounts[3]);\nawait addMiningKey(accounts[5]);\nawait addVotingKey(accounts[6], accounts[5]);\nawait proxyStorageMock.setVotingContractMock(votingForKeysEternalStorage.address);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nconst id = await voting.nextBallotId.call();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  \"memo\",\n  accounts[7],\n  {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: accounts[4]}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: accounts[6]}).should.be.fulfilled;\nlet votingNew = await VotingToChangeProxyAddress.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingNew.address);\nvotingNew = await VotingToChangeProxyAddress.at(votingEternalStorage.address);\nawait votingNew.init(172800).should.be.fulfilled;\nawait votingNew.setTime(VOTING_START_DATE);\nawait votingNew.migrateBasicOne(\n  id,\n  voting.address,\n  [miningKeyForVotingKey, accounts[3], accounts[5]]\n).should.be.fulfilled;\nconst ballotInfo = await votingNew.getBallotInfo.call(id, votingKey);\n\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(3), // totalVoters\n  new web3.BigNumber(-3), // progress\n  false, // isFinalized\n  accounts[7], // proposedValue\n  new web3.BigNumber(1), // contractType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await votingNew.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await votingNew.getIndex.call(id)).should.be.bignumber.equal(0);\n(await votingNew.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(2);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, miningKeyForVotingKey)).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[2])).should.be.equal(false);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[3])).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[4])).should.be.equal(false);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[5])).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[6])).should.be.equal(false);\n(await votingNew.nextBallotId.call()).should.be.bignumber.equal(0);\n(await votingNew.activeBallotsLength.call()).should.be.bignumber.equal(0);\n(await votingNew.validatorActiveBallots.call(accounts[1])).should.be.bignumber.equal(0);\nawait votingNew.migrateBasicAll(voting.address, {from: accounts[6]}).should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateBasicAll('0x0000000000000000000000000000000000000000').should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateBasicAll(voting.address).should.be.fulfilled;\nawait votingNew.migrateBasicAll(voting.address).should.be.fulfilled;\n(await votingNew.nextBallotId.call()).should.be.bignumber.equal(1);\n(await votingNew.activeBallotsLength.call()).should.be.bignumber.equal(1);\n(await votingNew.validatorActiveBallots.call(accounts[1])).should.be.bignumber.equal(1);\n(await votingNew.migrateDisabled.call()).should.be.equal(false);\nawait votingNew.migrateDisable({from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateDisable().should.be.fulfilled;\n(await votingNew.migrateDisabled.call()).should.be.equal(true);\nawait votingNew.migrateBasicAll(voting.address).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "8150ce07-c27c-4364-a4d2-240dda2ea67d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8150ce07-c27c-4364-a4d2-240dda2ea67d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1982,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "563768f3-0fc9-4a95-8a28-763057d5fceb",
        "title": "Contract: VotingToManageEmissionFunds [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_test.js",
        "file": "/test/voting_to_manage_emission_funds_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: VotingToManageEmissionFunds [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 3309,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "11ae087f-f2cc-4293-a670-8cd531a84147",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: VotingToManageEmissionFunds [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "039d0c51-1ce9-48d5-a926-4343a85576ff",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: VotingToManageEmissionFunds [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 2267,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "coinbase = accounts[0];\nmasterOfCeremony = accounts[0];\nvotingKey = accounts[2];\nvotingKey2 = accounts[3];\nvotingKey3 = accounts[4];\nvotingKey4 = accounts[7];\nminingKey = accounts[1];\nminingKey2 = accounts[5];\nminingKey3 = accounts[6];\nminingKey4 = accounts[8];\npoaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony, []);\n\nproxyStorage = await ProxyStorage.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorage.address);\nproxyStorage = await ProxyStorage.at(proxyStorageEternalStorage.address);\nawait proxyStorage.init(poaNetworkConsensus.address).should.be.fulfilled;\nawait poaNetworkConsensus.setProxyStorage(proxyStorage.address);\n\nkeysManager = await KeysManager.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorage.address, keysManager.address);\nkeysManager = await KeysManager.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\n\nballotsStorage = await BallotsStorage.new();\nconst ballotsEternalStorage = await EternalStorageProxy.new(proxyStorage.address, ballotsStorage.address);\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\nlet votingForKeys = await VotingForKeys.new();\nvotingForKeysEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingForKeys.address);\nvotingForKeys = await VotingForKeys.at(votingForKeysEternalStorage.address);\nawait votingForKeys.init(172800).should.be.fulfilled;\nlet votingForMinThreshold = await VotingForMinThreshold.new();\nconst votingForMinThresholdEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingForMinThreshold.address);\nvotingForMinThreshold = await VotingForMinThreshold.at(votingForMinThresholdEternalStorage.address);\nawait votingForMinThreshold.init(172800, 3).should.be.fulfilled;\nlet votingForProxy = await VotingForProxy.new();\nconst votingForProxyEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingForProxy.address);\nvotingForProxy = await VotingForProxy.at(votingForProxyEternalStorage.address);\nawait votingForProxy.init(172800).should.be.fulfilled;\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorage.address, validatorMetadata.address);\nvoting = await VotingToManageEmissionFunds.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorage.address, voting.address);\nvoting = await VotingToManageEmissionFunds.at(votingEternalStorage.address);\nemissionFunds = await EmissionFunds.new(voting.address);\nemissionReleaseTime = moment.utc().add(10, 'minutes').unix();\nemissionReleaseThreshold = moment.duration(3, 'months').asSeconds();\ndistributionThreshold = moment.duration(7, 'days').asSeconds();\nawait voting.init(\n  emissionReleaseTime,\n  emissionReleaseThreshold,\n  distributionThreshold,\n  emissionFunds.address,\n  {from: accounts[8]}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.init(\n  emissionReleaseTime,\n  emissionReleaseThreshold,\n  300,\n  emissionFunds.address\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.init(\n  emissionReleaseTime,\n  emissionReleaseThreshold,\n  distributionThreshold,\n  emissionFunds.address\n).should.be.fulfilled;\nrewardByBlock = await RewardByBlock.new();\nconst rewardByBlockEternalStorage = await EternalStorageProxy.new(proxyStorage.address, rewardByBlock.address);\nrewardByBlock = await RewardByBlock.at(rewardByBlockEternalStorage.address);\n\nawait proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingForKeysEternalStorage.address,\n  votingForMinThresholdEternalStorage.address,\n  votingForProxyEternalStorage.address,\n  votingEternalStorage.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlockEternalStorage.address\n);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(0);\nconst coinbaseInitBalance = await web3.eth.getBalance(coinbase);\nconst howMuchToSend = web3.toWei(10, 'ether');\nconst hash = await web3.eth.sendTransaction({\n  from: coinbase,\n  to: emissionFunds.address,\n  value: howMuchToSend\n});\nconst receipt = await web3.eth.getTransactionReceipt(hash);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(howMuchToSend);\nemissionFundsInitBalance = howMuchToSend;\n(await web3.eth.getBalance(coinbase)).should.be.bignumber.equal(coinbaseInitBalance.sub(howMuchToSend).sub(receipt.gasUsed));",
            "err": {},
            "isRoot": false,
            "uuid": "d0bb49f3-b2ef-4bd7-ab57-212da320cb02",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: VotingToManageEmissionFunds [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "e6852c9e-f889-4e1e-a065-9e0c28ed0279",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "47601db1-3789-46ab-b4d4-eea0a0de4305",
            "title": "#init",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_test.js",
            "file": "/test/voting_to_manage_emission_funds_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should change state correctly",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #init should change state correctly",
                "timedOut": false,
                "duration": 104,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await voting.distributionThreshold.call()).should.be.bignumber.equal(distributionThreshold);\n(await voting.emissionFunds.call()).should.be.equal(emissionFunds.address);\n(await voting.emissionReleaseThreshold.call()).should.be.bignumber.equal(emissionReleaseThreshold);\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(emissionReleaseTime);\n(await voting.noActiveBallotExists.call()).should.be.equal(true);\n(await voting.initDisabled.call()).should.be.equal(true);\n(await voting.proxyStorage.call()).should.be.equal(proxyStorage.address);\n(await voting.getKeysManager.call()).should.be.equal(keysManager.address);",
                "err": {},
                "isRoot": false,
                "uuid": "82f33493-4d44-477d-8de0-ac07a53e6ce7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be called more than once",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #init cannot be called more than once",
                "timedOut": false,
                "duration": 36,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.init(\n  emissionReleaseTime,\n  emissionReleaseThreshold,\n  distributionThreshold,\n  emissionFunds.address\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "cee9474e-960d-48e8-9694-544ad4369abb",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "82f33493-4d44-477d-8de0-ac07a53e6ce7",
              "cee9474e-960d-48e8-9694-544ad4369abb"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 140,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "5e288a6b-7108-4900-8009-0691bb981cc0",
            "title": "#createBallot",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_test.js",
            "file": "/test/voting_to_manage_emission_funds_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #createBallot \"before each\" hook",
                "timedOut": false,
                "duration": 271,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey, miningKey);\nVOTING_START_DATE = moment.utc().add(31, 'minutes').unix();\nVOTING_END_DATE = moment.utc().add(7, 'days').unix();\nid = await voting.nextBallotId.call();\nawait voting.setTime(moment.utc().add(15, 'minutes').unix());",
                "err": {},
                "isRoot": false,
                "uuid": "fb5e19ba-9231-4b1a-954e-ea9f2d67a636",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #createBallot happy path",
                "timedOut": false,
                "duration": 958,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nconst emissionFundsAmount = await web3.eth.getBalance(emissionFunds.address);\nconst {logs} = await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nconst ballotInfo = await voting.getBallotInfo.call(id);\nballotInfo.should.be.deep.equal([\n  await voting.getTime.call(), // creationTime\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  false, // isCanceled\n  false, // isFinalized\n  miningKey, // creator\n  \"memo\", // memo\n  new web3.BigNumber(emissionFundsAmount), // amount\n  new web3.BigNumber(0), // burnVotes\n  new web3.BigNumber(0), // freezeVotes\n  new web3.BigNumber(0), // sendVotes\n  accounts[5] // receiver\n]);\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await voting.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(2);\n(await voting.getEmissionReleaseTimeSnapshot.call(id)).should.be.bignumber.equal(emissionReleaseTime);\n(await voting.noActiveBallotExists.call()).should.be.equal(false);\n(await voting.nextBallotId.call()).should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal(\"BallotCreated\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.ballotType.should.be.bignumber.equal(6);\nlogs[0].args.creator.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "08c714e8-e72d-42d6-a629-d15e1845d905",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "may only be called by valid voting key",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #createBallot may only be called by valid voting key",
                "timedOut": false,
                "duration": 167,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: accounts[3]}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "8e8cf363-0578-4e30-ba5d-dcb587375066",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "endTime must be greater than startTime",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #createBallot endTime must be greater than startTime",
                "timedOut": false,
                "duration": 35,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_END_DATE = moment.utc().add(19, 'minutes').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "c15230fa-54b7-40c4-9b40-25a6c381c3a7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "startTime must be greater than current time",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #createBallot startTime must be greater than current time",
                "timedOut": false,
                "duration": 57,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(14, 'minutes').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "c91d727c-ea1a-458d-958d-9ec963bf42b8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be called before emission release time",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #createBallot cannot be called before emission release time",
                "timedOut": false,
                "duration": 81,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(moment.utc().add(7, 'minutes').unix());\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "7f726798-4692-4136-8e3c-e11b5decd685",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "ballot cannot last longer than distribution threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #createBallot ballot cannot last longer than distribution threshold",
                "timedOut": false,
                "duration": 45,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_END_DATE = moment.utc().add(8, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "10c7290e-7689-429a-bfe1-fda5d1e21369",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "receiver address should not be 0x0",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #createBallot receiver address should not be 0x0",
                "timedOut": false,
                "duration": 64,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, '0x0000000000000000000000000000000000000000', \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\n(await voting.nextBallotId.call()).should.be.bignumber.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "ad725a6f-4700-4b21-86ed-0d0219136d20",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot create multiple ballots during the same distribution period",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #createBallot cannot create multiple ballots during the same distribution period",
                "timedOut": false,
                "duration": 465,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.nextBallotId.call()).should.be.bignumber.equal(1);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[6], \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\n(await voting.nextBallotId.call()).should.be.bignumber.equal(1);\nawait voting.setTime(VOTING_END_DATE + 1);\nconst {logs} = await voting.finalize(0, {from: votingKey}).should.be.fulfilled;\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.voter.should.be.equal(votingKey);\nawait voting.setTime(\n  emissionReleaseTime + emissionReleaseThreshold + 1\n);\nVOTING_START_DATE = emissionReleaseTime + emissionReleaseThreshold + 2;\nVOTING_END_DATE = VOTING_START_DATE + 100;\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.nextBallotId.call()).should.be.bignumber.equal(2);\n(await voting.getEmissionReleaseTimeSnapshot.call(1)).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);",
                "err": {},
                "isRoot": false,
                "uuid": "98832646-52cf-4418-a4ce-6ba94c8395e6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow creating new ballot after the next emission release threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #createBallot should allow creating new ballot after the next emission release threshold",
                "timedOut": false,
                "duration": 472,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(\n  emissionReleaseTime + emissionReleaseThreshold + 1\n);\nVOTING_START_DATE = emissionReleaseTime + emissionReleaseThreshold + 2;\nVOTING_END_DATE = VOTING_START_DATE + 900;\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);\n(await voting.getEmissionReleaseTimeSnapshot.call(0)).should.be.bignumber.equal(\n  emissionReleaseTime\n);\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(0, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(\n  emissionReleaseTime + emissionReleaseThreshold*5 + 1\n);\nVOTING_START_DATE = emissionReleaseTime + emissionReleaseThreshold*5 - 2;\nVOTING_END_DATE = VOTING_START_DATE + 900;\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = emissionReleaseTime + emissionReleaseThreshold*5 + 2;\nVOTING_END_DATE = VOTING_START_DATE + 900;\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold*5\n);\n(await voting.getEmissionReleaseTimeSnapshot.call(1)).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold*2\n);",
                "err": {},
                "isRoot": false,
                "uuid": "0c7e5668-6097-4e55-8f34-72a864ce79b3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "08c714e8-e72d-42d6-a629-d15e1845d905",
              "8e8cf363-0578-4e30-ba5d-dcb587375066",
              "c15230fa-54b7-40c4-9b40-25a6c381c3a7",
              "c91d727c-ea1a-458d-958d-9ec963bf42b8",
              "7f726798-4692-4136-8e3c-e11b5decd685",
              "10c7290e-7689-429a-bfe1-fda5d1e21369",
              "ad725a6f-4700-4b21-86ed-0d0219136d20",
              "98832646-52cf-4418-a4ce-6ba94c8395e6",
              "0c7e5668-6097-4e55-8f34-72a864ce79b3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2344,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "7313f453-18da-4c2a-90cc-b89daefafa13",
            "title": "#cancelNewBallot",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_test.js",
            "file": "/test/voting_to_manage_emission_funds_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #cancelNewBallot \"before each\" hook",
                "timedOut": false,
                "duration": 354,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey, miningKey);\nVOTING_START_DATE = moment.utc().add(31, 'minutes').unix();\nVOTING_END_DATE = moment.utc().add(7, 'days').unix();\nid = await voting.nextBallotId.call();\nawait voting.setTime(moment.utc().add(15, 'minutes').unix());",
                "err": {},
                "isRoot": false,
                "uuid": "c8218644-cdbe-4e08-b618-c47462729256",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #cancelNewBallot happy path",
                "timedOut": false,
                "duration": 915,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const emissionFundsAmount = await web3.eth.getBalance(emissionFunds.address);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nlet creationTime = await voting.getTime.call();\nawait voting.setTime(moment.utc().add(20, 'minutes').unix());\nlet result = await voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal(\"BallotCanceled\");\nresult.logs[0].args.id.should.be.bignumber.equal(id);\nresult.logs[0].args.votingKey.should.be.equal(votingKey);\nlet ballotInfo = await voting.getBallotInfo.call(id);\nballotInfo.should.be.deep.equal([\n  creationTime, // creationTime\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  true, // isCanceled\n  false, // isFinalized\n  miningKey, // creator\n  \"memo\", // memo\n  new web3.BigNumber(emissionFundsAmount), // amount\n  new web3.BigNumber(0), // burnVotes\n  new web3.BigNumber(0), // freezeVotes\n  new web3.BigNumber(0), // sendVotes\n  accounts[5] // receiver\n]);\n(await voting.noActiveBallotExists.call()).should.be.equal(true);\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(emissionReleaseTime);\nid = await voting.nextBallotId.call();\ncreationTime = moment.utc().add(22, 'minutes').unix();\nawait voting.setTime(creationTime);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.freeze, {from: votingKey}).should.be.fulfilled;\n(await voting.noActiveBallotExists.call()).should.be.equal(false);\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey}).should.be.fulfilled;\nballotInfo = await voting.getBallotInfo.call(id);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(creationTime), // creationTime\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  false, // isCanceled\n  true, // isFinalized\n  miningKey, // creator\n  \"memo\", // memo\n  new web3.BigNumber(emissionFundsAmount), // amount\n  new web3.BigNumber(0), // burnVotes\n  new web3.BigNumber(1), // freezeVotes\n  new web3.BigNumber(0), // sendVotes\n  accounts[5] // receiver\n]);\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);",
                "err": {},
                "isRoot": false,
                "uuid": "02526f89-fc88-42e7-8306-5ad441ae33b1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot cancel nonexistent or finalized ballot",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #cancelNewBallot cannot cancel nonexistent or finalized ballot",
                "timedOut": false,
                "duration": 307,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.cancelNewBallot({from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(moment.utc().add(20, 'minutes').unix());\nawait voting.cancelNewBallot({from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "423714be-f869-490c-a9ac-cf79dca53654",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "may only be called by creator of a ballot",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #cancelNewBallot may only be called by creator of a ballot",
                "timedOut": false,
                "duration": 340,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(moment.utc().add(20, 'minutes').unix());\nawait voting.cancelNewBallot({from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nconst {logs} = await voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;\nlogs[0].event.should.be.equal(\"BallotCanceled\");\nlogs[0].args.id.should.be.bignumber.equal(id);\nlogs[0].args.votingKey.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "8a9b77a3-12bd-495a-b614-99d68a81f248",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "may only be called within ballot canceling threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #cancelNewBallot may only be called within ballot canceling threshold",
                "timedOut": false,
                "duration": 246,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(moment.utc().add(31, 'minutes').unix());\nawait voting.cancelNewBallot({from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(moment.utc().add(29, 'minutes').unix());\nawait voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "365484a8-698d-4e7a-a612-e8bdec3ec0fe",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot cancel already cancelled ballot",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #cancelNewBallot cannot cancel already cancelled ballot",
                "timedOut": false,
                "duration": 233,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(moment.utc().add(29, 'minutes').unix());\nawait voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;\nawait voting.cancelNewBallot({from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "ef50813e-8f2e-4b74-ad49-7e08e496e74b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should restore emission release time",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #cancelNewBallot should restore emission release time",
                "timedOut": false,
                "duration": 498,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey}).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);\nawait voting.setTime(\n  emissionReleaseTime + emissionReleaseThreshold*5 + 1\n);\nVOTING_START_DATE = emissionReleaseTime + emissionReleaseThreshold*5 + 2;\nVOTING_END_DATE = VOTING_START_DATE + 900;\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold*5\n);\n(await voting.getEmissionReleaseTimeSnapshot.call(1)).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);\nawait voting.setTime(emissionReleaseTime + emissionReleaseThreshold*5 + 10);\nawait voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);",
                "err": {},
                "isRoot": false,
                "uuid": "921c69b9-0905-48b8-a03c-67979513f676",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "02526f89-fc88-42e7-8306-5ad441ae33b1",
              "423714be-f869-490c-a9ac-cf79dca53654",
              "8a9b77a3-12bd-495a-b614-99d68a81f248",
              "365484a8-698d-4e7a-a612-e8bdec3ec0fe",
              "ef50813e-8f2e-4b74-ad49-7e08e496e74b",
              "921c69b9-0905-48b8-a03c-67979513f676"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2539,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "0b86954a-a361-440c-802f-3e5522a3353c",
            "title": "#refreshEmissionReleaseTime",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_test.js",
            "file": "/test/voting_to_manage_emission_funds_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should not update until the next threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #refreshEmissionReleaseTime should not update until the next threshold",
                "timedOut": false,
                "duration": 141,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime\n);\nawait voting.setTime(moment.utc().add(15, 'minutes').unix());\nawait voting.refreshEmissionReleaseTime();\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime\n);\nawait voting.setTime(moment.utc().add(2, 'months').unix());\nawait voting.refreshEmissionReleaseTime();\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime\n);",
                "err": {},
                "isRoot": false,
                "uuid": "74857211-aaf9-4a63-bf08-6d5a469aa7d3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should update to the next threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #refreshEmissionReleaseTime should update to the next threshold",
                "timedOut": false,
                "duration": 73,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime\n);\nawait voting.setTime(moment.utc().add(4, 'months').unix());\nawait voting.refreshEmissionReleaseTime();\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);",
                "err": {},
                "isRoot": false,
                "uuid": "05e10bb9-6604-4562-905a-8f1ee63b23c8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should update to the future threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #refreshEmissionReleaseTime should update to the future threshold",
                "timedOut": false,
                "duration": 80,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime\n);\nawait voting.setTime(moment.utc().add(7, 'months').unix());\nawait voting.refreshEmissionReleaseTime();\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold*2\n);",
                "err": {},
                "isRoot": false,
                "uuid": "0e6c52f8-9412-4ce3-abe4-dea2e3232cf1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "74857211-aaf9-4a63-bf08-6d5a469aa7d3",
              "05e10bb9-6604-4562-905a-8f1ee63b23c8",
              "0e6c52f8-9412-4ce3-abe4-dea2e3232cf1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 294,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "ca17c725-c4c4-43a1-95fe-19c739c26115",
            "title": "#vote",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_test.js",
            "file": "/test/voting_to_manage_emission_funds_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #vote \"before each\" hook",
                "timedOut": false,
                "duration": 518,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "receiver = accounts[9];\nawait addValidator(votingKey, miningKey);\nVOTING_START_DATE = moment.utc().add(31, 'minutes').unix();\nVOTING_END_DATE = moment.utc().add(7, 'days').unix();\nid = await voting.nextBallotId.call();\nawait voting.setTime(moment.utc().add(15, 'minutes').unix());\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "5ce19de6-d666-4027-98eb-8e3b2ece90d5",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "should let a validator to vote",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #vote should let a validator to vote",
                "timedOut": false,
                "duration": 837,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const emissionFundsBalanceOld = await web3.eth.getBalance(emissionFunds.address);\nconst receiverBalanceOld = await web3.eth.getBalance(receiver);\nawait voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.freeze, {from: votingKey}).should.be.fulfilled;\nconst ballotInfo = await voting.getBallotInfo.call(id);\nballotInfo[4].should.be.equal(true); // isFinalized\nballotInfo[8].should.be.bignumber.equal(0); // burnVotes\nballotInfo[9].should.be.bignumber.equal(1); // freezeVotes\nballotInfo[10].should.be.bignumber.equal(0); // sendVotes\n(await voting.noActiveBallotExists.call()).should.be.equal(true);\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(4);\n(await voting.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(1);\n(await voting.hasAlreadyVoted.call(id, votingKey)).should.be.equal(true);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.decision.should.be.bignumber.equal(choice.freeze);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);\nlogs[0].args.voterMiningKey.should.be.equal(miningKey);\nlogs[1].event.should.be.equal('BallotFinalized');\nlogs[1].args.id.should.be.bignumber.equal(0);\nlogs[1].args.voter.should.be.equal(votingKey);\nemissionFundsBalanceOld.should.be.bignumber.equal(await web3.eth.getBalance(emissionFunds.address));\nreceiverBalanceOld.should.be.bignumber.equal(await web3.eth.getBalance(receiver));",
                "err": {},
                "isRoot": false,
                "uuid": "8b860fb8-c035-401d-915d-0170ee7185d3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow multiple voters to vote",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #vote should allow multiple voters to vote",
                "timedOut": false,
                "duration": 1422,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait voting.setTime(VOTING_START_DATE+1);\nawait voting.vote(id, choice.burn, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+2);\nawait voting.vote(id, choice.burn, {from: votingKey2}).should.be.fulfilled;\n(await voting.getAmount.call(id)).should.be.bignumber.equal(\n  await web3.eth.getBalance(emissionFunds.address)\n);\n(await voting.getAmount.call(id)).should.be.bignumber.above(0);\nawait voting.setTime(VOTING_START_DATE+3);\nawait voting.vote(id, choice.burn, {from: votingKey3}).should.be.fulfilled;\nconst ballotInfo = await voting.getBallotInfo.call(id);\nballotInfo[4].should.be.equal(true); // isFinalized\nballotInfo[8].should.be.bignumber.equal(3); // burnVotes\nballotInfo[9].should.be.bignumber.equal(0); // freezeVotes\nballotInfo[10].should.be.bignumber.equal(0); // sendVotes\n(await voting.hasMiningKeyAlreadyVoted.call(id, miningKey)).should.be.equal(true);\n(await voting.hasMiningKeyAlreadyVoted.call(id, miningKey2)).should.be.equal(true);\n(await voting.hasMiningKeyAlreadyVoted.call(id, miningKey3)).should.be.equal(true);\n(await voting.noActiveBallotExists.call()).should.be.equal(true);\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(3);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "148242c2-b204-4b07-a66d-eb12948d89d3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote by nonvoting key",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #vote should not let vote by nonvoting key",
                "timedOut": false,
                "duration": 58,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "52cf8422-b4bc-46fd-bb04-b884f563e120",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote before startTime",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #vote should not let vote before startTime",
                "timedOut": false,
                "duration": 100,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE - 1);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "86b107c0-3b54-44ed-9452-764bcf5af756",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote after endTime",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #vote should not let vote after endTime",
                "timedOut": false,
                "duration": 259,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE + 1);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "ba5df4cc-331e-4e8e-b10c-f783003f4990",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with already voted key",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #vote should not let vote with already voted key",
                "timedOut": false,
                "duration": 201,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "e7929d39-f0a9-4f4b-b968-7044ef129be9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid choice",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #vote should not let vote with invalid choice",
                "timedOut": false,
                "duration": 150,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, 0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, 4, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "14a4c24e-6d2f-4878-b6b4-7bd744d35d1c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid id",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #vote should not let vote with invalid id",
                "timedOut": false,
                "duration": 156,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(99, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(-3, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "08bf0d83-b9e5-46b0-aa5a-5ac1ad796646",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote if already finalized",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #vote should not let vote if already finalized",
                "timedOut": false,
                "duration": 1601,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey2, miningKey2);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(VOTING_START_DATE + 1);\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nid = await voting.nextBallotId.call();\nVOTING_START_DATE += emissionReleaseThreshold;\nVOTING_END_DATE += emissionReleaseThreshold;\nawait voting.setTime(VOTING_START_DATE - 5*60);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE + 11*60);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait addValidator(votingKey3, miningKey3);\nawait voting.vote(id, choice.send, {from: votingKey3}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "c8d7d570-93d5-4e72-a0b1-32ffde4dc6ba",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with old miningKey",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #vote should not let vote with old miningKey",
                "timedOut": false,
                "duration": 2327,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey2, miningKey2);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait proxyStorage.setVotingContractMock(coinbase);\nconst {logs} = await keysManager.swapMiningKey(miningKey3, miningKey);\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nawait proxyStorage.setVotingContractMock(votingForKeysEternalStorage.address);\nawait poaNetworkConsensus.setSystemAddress(coinbase);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress('0xffffFFFfFFffffffffffffffFfFFFfffFFFfFFfE');\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait proxyStorage.setVotingContractMock(coinbase);\nawait swapVotingKey(votingKey3, miningKey3);\nawait proxyStorage.setVotingContractMock(votingForKeysEternalStorage.address);\nawait voting.vote(id, choice.send, {from: votingKey3}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nid = await voting.nextBallotId.call();\nVOTING_START_DATE += emissionReleaseThreshold;\nVOTING_END_DATE += emissionReleaseThreshold;\nawait voting.setTime(VOTING_START_DATE - 5*60);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey2}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE + 11*60);\nawait voting.vote(id, choice.send, {from: votingKey3}).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait proxyStorage.setVotingContractMock(coinbase);\nlet result = await keysManager.swapMiningKey(miningKey, miningKey3);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nawait swapVotingKey(votingKey, miningKey);\nawait proxyStorage.setVotingContractMock(votingForKeysEternalStorage.address);\nawait poaNetworkConsensus.setSystemAddress(coinbase);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress('0xffffFFFfFFffffffffffffffFfFFFfffFFFfFFfE');\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized",
                "err": {},
                "isRoot": false,
                "uuid": "fd555f01-d198-4332-abc4-66a87ec259c1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote if ballot is canceled",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #vote should not let vote if ballot is canceled",
                "timedOut": false,
                "duration": 127,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(moment.utc().add(20, 'minutes').unix());\nconst {logs} = await voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;\nlogs[0].event.should.be.equal(\"BallotCanceled\");\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "57790742-79d5-4afc-a6d5-dceab686e327",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8b860fb8-c035-401d-915d-0170ee7185d3",
              "148242c2-b204-4b07-a66d-eb12948d89d3",
              "52cf8422-b4bc-46fd-bb04-b884f563e120",
              "86b107c0-3b54-44ed-9452-764bcf5af756",
              "ba5df4cc-331e-4e8e-b10c-f783003f4990",
              "e7929d39-f0a9-4f4b-b968-7044ef129be9",
              "14a4c24e-6d2f-4878-b6b4-7bd744d35d1c",
              "08bf0d83-b9e5-46b0-aa5a-5ac1ad796646",
              "c8d7d570-93d5-4e72-a0b1-32ffde4dc6ba",
              "fd555f01-d198-4332-abc4-66a87ec259c1",
              "57790742-79d5-4afc-a6d5-dceab686e327"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 7238,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "b72abc8c-2b0c-44fa-b12f-22ab8c4b17b3",
            "title": "#finalize",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_test.js",
            "file": "/test/voting_to_manage_emission_funds_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize \"before each\" hook",
                "timedOut": false,
                "duration": 381,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "receiver = accounts[9];\nawait addValidator(votingKey, miningKey);\nVOTING_START_DATE = moment.utc().add(31, 'minutes').unix();\nVOTING_END_DATE = moment.utc().add(7, 'days').unix();\nid = await voting.nextBallotId.call();\nawait voting.setTime(moment.utc().add(15, 'minutes').unix());",
                "err": {},
                "isRoot": false,
                "uuid": "743e939e-ffb5-4ff1-a7de-a5e2dcf8a858",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize happy path",
                "timedOut": false,
                "duration": 637,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.noActiveBallotExists.call()).should.be.equal(false);\nawait addValidator(votingKey2, miningKey2);\nawait voting.setTime(VOTING_END_DATE + 1);\nconst {logs} = await voting.finalize(id, {from: votingKey2}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.noActiveBallotExists.call()).should.be.equal(true);\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);\nlogs[0].event.should.be.equal('BallotFinalized');\nlogs[0].args.id.should.be.bignumber.equal(id);\nlogs[0].args.voter.should.be.equal(votingKey2);",
                "err": {},
                "isRoot": false,
                "uuid": "76030390-99a7-4b6e-9427-b96b08e46bbb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "freeze funds if it did not pass minimum voters count",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize freeze funds if it did not pass minimum voters count",
                "timedOut": false,
                "duration": 1031,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(2);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.burn, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey3}).should.be.fulfilled;\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(4);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(emissionFundsInitBalance);\nemissionFundsInitBalance.should.be.bignumber.above(0);",
                "err": {},
                "isRoot": false,
                "uuid": "4b5300d4-a938-42cd-ad05-8c6231f74da1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "freeze funds if there is no majority of 3 votes",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize freeze funds if there is no majority of 3 votes",
                "timedOut": false,
                "duration": 1167,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.freeze, {from: votingKey3}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(4);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(emissionFundsInitBalance);\nemissionFundsInitBalance.should.be.bignumber.above(0);",
                "err": {},
                "isRoot": false,
                "uuid": "80d26eb8-dfed-4501-91b8-67925fadb5ff",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "freeze funds if there is no majority of 4 votes",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize freeze funds if there is no majority of 4 votes",
                "timedOut": false,
                "duration": 1670,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait addValidator(votingKey4, miningKey4);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.send, {from: votingKey3}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey4}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(4);\n(await voting.getTotalVoters.call(id)).should.be.bignumber.equal(4);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(emissionFundsInitBalance);\nemissionFundsInitBalance.should.be.bignumber.above(0);",
                "err": {},
                "isRoot": false,
                "uuid": "03996188-70ee-4a3e-bc52-403dd5ccb9d5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "send funds to receiver if most votes are for sending",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize send funds to receiver if most votes are for sending",
                "timedOut": false,
                "duration": 2174,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait addValidator(votingKey4, miningKey4);\nconst receiverInitBalance = await web3.eth.getBalance(receiver);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(emissionFundsInitBalance);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey3}).should.be.fulfilled;\nawait voting.vote(id, choice.freeze, {from: votingKey4}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(2);\n(await voting.getTotalVoters.call(id)).should.be.bignumber.equal(4);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(0);\n(await web3.eth.getBalance(receiver)).should.be.bignumber.equal(\n  receiverInitBalance.add(emissionFundsInitBalance)\n);",
                "err": {},
                "isRoot": false,
                "uuid": "d7d64deb-9ab6-4512-b5a8-e41273cfb074",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "send funds to receiver if most votes are for sending",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize send funds to receiver if most votes are for sending",
                "timedOut": false,
                "duration": 1813,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nconst receiverInitBalance = await web3.eth.getBalance(receiver);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(emissionFundsInitBalance);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey3}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(2);\n(await voting.getTotalVoters.call(id)).should.be.bignumber.equal(3);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(0);\n(await web3.eth.getBalance(receiver)).should.be.bignumber.equal(\n  receiverInitBalance.add(emissionFundsInitBalance)\n);",
                "err": {},
                "isRoot": false,
                "uuid": "c583fb74-84ec-457e-bf17-5a0eae85e874",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "burn funds if most votes are for burning",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize burn funds if most votes are for burning",
                "timedOut": false,
                "duration": 1864,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nconst receiverInitBalance = await web3.eth.getBalance(receiver);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.above(0);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey3}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(3);\n(await voting.getTotalVoters.call(id)).should.be.bignumber.equal(3);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(0);\n(await web3.eth.getBalance(receiver)).should.be.bignumber.equal(receiverInitBalance);",
                "err": {},
                "isRoot": false,
                "uuid": "243ad9f0-9b31-4105-ac07-8d0d57aea329",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevents finalize with invalid id",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize prevents finalize with invalid id",
                "timedOut": false,
                "duration": 225,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "de5c6af5-bdbb-4067-b410-df87dd9fe21b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "do not let finalize if a ballot is active",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize do not let finalize if a ballot is active",
                "timedOut": false,
                "duration": 186,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE + 1);\nawait voting.finalize(0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "41b4f89b-36e4-43eb-8631-542380afd639",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize immediately if the last validator gave his vote",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize finalize immediately if the last validator gave his vote",
                "timedOut": false,
                "duration": 1183,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\n\nawait voting.vote(id, choice.burn, {from: votingKey2}).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n\nawait voting.vote(id, choice.burn, {from: votingKey3}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n\n(await voting.noActiveBallotExists.call()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "6448f980-63d1-4440-b468-8cc52edfe179",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "does not finalize immediately until ballot canceling threshold is reached",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize does not finalize immediately until ballot canceling threshold is reached",
                "timedOut": false,
                "duration": 1268,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(17, 'minutes').unix();\nVOTING_END_DATE = moment.utc().add(20, 'minutes').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey3}).should.be.fulfilled;\n\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait voting.setTime(moment.utc().add(31, 'minutes').unix());\nawait voting.finalize(id, {from: votingKey3}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized",
                "err": {},
                "isRoot": false,
                "uuid": "87241901-d269-4f79-9869-86fbfa8cc901",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevents double finalize",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize prevents double finalize",
                "timedOut": false,
                "duration": 289,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(0, {from: votingKey}).should.be.fulfilled;\nawait voting.finalize(0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "c73f9c0c-f055-4d42-bbf4-256bf84552a8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should refresh emission release time",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize should refresh emission release time",
                "timedOut": false,
                "duration": 282,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime\n);\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(0, {from: votingKey}).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);",
                "err": {},
                "isRoot": false,
                "uuid": "41559d05-6e2e-4da5-a927-960efb7bc712",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "deny finalization if the voting key is a contract",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize deny finalization if the voting key is a contract",
                "timedOut": false,
                "duration": 814,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const voter = await VotingKey.new(voting.address);\nvotingKey2 = voter.address;\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.noActiveBallotExists.call()).should.be.equal(false);\nawait addValidator(votingKey2, miningKey2);\nawait voting.setTime(VOTING_END_DATE + 1);\n\nawait voter.callFinalize(id).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait voting.finalize(id, {from: votingKey}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.noActiveBallotExists.call()).should.be.equal(true);\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);",
                "err": {},
                "isRoot": false,
                "uuid": "8849956a-c999-4457-915c-f82e834ae5b0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "deny finalization within ballot canceling threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize deny finalization within ballot canceling threshold",
                "timedOut": false,
                "duration": 347,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(17, 'minutes').unix();\nVOTING_END_DATE = moment.utc().add(20, 'minutes').unix();\n\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(moment.utc().add(31, 'minutes').unix());\nawait voting.finalize(id, {from: votingKey}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "b9044236-b922-4620-b257-3339b7a28a17",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "deny finalization of canceled ballot",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize deny finalization of canceled ballot",
                "timedOut": false,
                "duration": 281,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(moment.utc().add(20, 'minutes').unix());\nlet result = await voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal(\"BallotCanceled\");\nresult.logs[0].args.id.should.be.bignumber.equal(id);\nresult.logs[0].args.votingKey.should.be.equal(votingKey);\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "809bdfde-880d-4ca1-8ebd-7c5646f45dec",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "76030390-99a7-4b6e-9427-b96b08e46bbb",
              "4b5300d4-a938-42cd-ad05-8c6231f74da1",
              "80d26eb8-dfed-4501-91b8-67925fadb5ff",
              "03996188-70ee-4a3e-bc52-403dd5ccb9d5",
              "d7d64deb-9ab6-4512-b5a8-e41273cfb074",
              "c583fb74-84ec-457e-bf17-5a0eae85e874",
              "243ad9f0-9b31-4105-ac07-8d0d57aea329",
              "de5c6af5-bdbb-4067-b410-df87dd9fe21b",
              "41b4f89b-36e4-43eb-8631-542380afd639",
              "6448f980-63d1-4440-b468-8cc52edfe179",
              "87241901-d269-4f79-9869-86fbfa8cc901",
              "c73f9c0c-f055-4d42-bbf4-256bf84552a8",
              "41559d05-6e2e-4da5-a927-960efb7bc712",
              "8849956a-c999-4457-915c-f82e834ae5b0",
              "b9044236-b922-4620-b257-3339b7a28a17",
              "809bdfde-880d-4ca1-8ebd-7c5646f45dec"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 15231,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "40b97506-6e5b-4dfb-846e-a01f02f2d1ed",
            "title": "#upgradeTo",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_test.js",
            "file": "/test/voting_to_manage_emission_funds_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #upgradeTo \"before each\" hook",
                "timedOut": false,
                "duration": 123,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "proxyStorageStubAddress = accounts[8];\nvoting = await VotingToManageEmissionFunds.new();\nvotingOldImplementation = voting.address;\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageStubAddress, voting.address);\nvoting = await VotingToManageEmissionFunds.at(votingEternalStorage.address);\nawait voting.init(\n  emissionReleaseTime,\n  emissionReleaseThreshold,\n  distributionThreshold,\n  emissionFunds.address\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "c12d99e3-4538-42ea-92c5-75fa174aa03f",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by ProxyStorage",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #upgradeTo may only be called by ProxyStorage",
                "timedOut": false,
                "duration": 95,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToManageEmissionFundsNew.new();\nawait votingEternalStorage.upgradeTo(votingNew.address, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});",
                "err": {},
                "isRoot": false,
                "uuid": "abd60f66-7a70-4219-9437-b89afb5f0b62",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change implementation address",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #upgradeTo should change implementation address",
                "timedOut": false,
                "duration": 181,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToManageEmissionFundsNew.new();\nlet newImplementation = votingNew.address;\n(await votingEternalStorage.implementation.call()).should.be.equal(votingOldImplementation);\nawait upgradeTo(newImplementation, {from: proxyStorageStubAddress});\n(await votingEternalStorage.implementation.call()).should.be.equal(newImplementation);",
                "err": {},
                "isRoot": false,
                "uuid": "018859df-e6aa-486b-bcfc-bc350114db34",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment implementation version",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #upgradeTo should increment implementation version",
                "timedOut": false,
                "duration": 86,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToManageEmissionFundsNew.new();\nlet oldVersion = await votingEternalStorage.version.call();\nlet newVersion = oldVersion.add(1);\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\n(await votingEternalStorage.version.call()).should.be.bignumber.equal(newVersion);",
                "err": {},
                "isRoot": false,
                "uuid": "c7bac718-98a4-44f7-8fce-c369fd80f9b4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should work",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #upgradeTo new implementation should work",
                "timedOut": false,
                "duration": 124,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToManageEmissionFundsNew.new();\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\nvotingNew = await VotingToManageEmissionFundsNew.at(votingEternalStorage.address);\n(await votingNew.initialized.call()).should.be.equal(false);\nawait votingNew.initialize();\n(await votingNew.initialized.call()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "7e5f9b7c-2dcf-4fe0-8c3a-daafa0808f96",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same proxyStorage address",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #upgradeTo new implementation should use the same proxyStorage address",
                "timedOut": false,
                "duration": 97,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToManageEmissionFundsNew.new();\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\nvotingNew = await VotingToManageEmissionFundsNew.at(votingEternalStorage.address);\n(await votingNew.proxyStorage.call()).should.be.equal(proxyStorageStubAddress);",
                "err": {},
                "isRoot": false,
                "uuid": "cfff5a63-c4fb-481f-a45b-dbe5a06a0c26",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same storage",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #upgradeTo new implementation should use the same storage",
                "timedOut": false,
                "duration": 864,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey, miningKey);\nconst emissionFundsAmount = await web3.eth.getBalance(emissionFunds.address);\nconst VOTING_START_DATE = moment.utc().add(31, 'minutes').unix();\nconst VOTING_END_DATE = moment.utc().add(7, 'days').unix();\nconst id = await voting.nextBallotId.call();\nconst receiver = accounts[9];\nawait voting.setTime(moment.utc().add(15, 'minutes').unix());\nawait votingEternalStorage.setProxyStorage(proxyStorage.address);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait votingEternalStorage.setProxyStorage(proxyStorageStubAddress);\nlet votingNew = await VotingToManageEmissionFundsNew.new();\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\nvotingNew = await VotingToManageEmissionFundsNew.at(votingEternalStorage.address);\nawait votingEternalStorage.setProxyStorage(proxyStorage.address);\nconst ballotInfo = await votingNew.getBallotInfo.call(id);\nballotInfo.should.be.deep.equal([\n  await voting.getTime.call(), // creationTime\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  false, // isCanceled\n  false, // isFinalized\n  miningKey, // creator\n  \"memo\", // memo\n  new web3.BigNumber(emissionFundsAmount), // amount\n  new web3.BigNumber(0), // burnVotes\n  new web3.BigNumber(0), // freezeVotes\n  new web3.BigNumber(0), // sendVotes\n  receiver // receiver\n]);\n(await votingNew.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await votingNew.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(1);\n(await votingNew.noActiveBallotExists.call()).should.be.equal(false);\n(await votingNew.nextBallotId.call()).should.be.bignumber.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "f1cec35b-c680-483f-b6f5-045df06bad98",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "abd60f66-7a70-4219-9437-b89afb5f0b62",
              "018859df-e6aa-486b-bcfc-bc350114db34",
              "c7bac718-98a4-44f7-8fce-c369fd80f9b4",
              "7e5f9b7c-2dcf-4fe0-8c3a-daafa0808f96",
              "cfff5a63-c4fb-481f-a45b-dbe5a06a0c26",
              "f1cec35b-c680-483f-b6f5-045df06bad98"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1447,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "7efa218a-e51d-4e72-810c-bc95cb3bddf5",
        "title": "Contract: VotingToManageEmissionFunds upgraded [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_upgrade_test.js",
        "file": "/test/voting_to_manage_emission_funds_upgrade_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 6489,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "317271dc-130f-40da-af08-ce3e55773723",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "82291879-c372-4500-b0c4-9b612675817e",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 2485,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "coinbase = accounts[0];\nmasterOfCeremony = accounts[0];\nvotingKey = accounts[2];\nvotingKey2 = accounts[3];\nvotingKey3 = accounts[4];\nvotingKey4 = accounts[7];\nminingKey = accounts[1];\nminingKey2 = accounts[5];\nminingKey3 = accounts[6];\nminingKey4 = accounts[8];\npoaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony, []);\n\nproxyStorage = await ProxyStorage.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorage.address);\nproxyStorage = await ProxyStorage.at(proxyStorageEternalStorage.address);\nawait proxyStorage.init(poaNetworkConsensus.address).should.be.fulfilled;\nawait poaNetworkConsensus.setProxyStorage(proxyStorage.address);\n\nkeysManager = await KeysManager.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorage.address, keysManager.address);\nkeysManager = await KeysManager.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\n\nballotsStorage = await BallotsStorage.new();\nconst ballotsEternalStorage = await EternalStorageProxy.new(proxyStorage.address, ballotsStorage.address);\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\nlet votingForKeys = await VotingForKeys.new();\nvotingForKeysEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingForKeys.address);\nvotingForKeys = await VotingForKeys.at(votingForKeysEternalStorage.address);\nawait votingForKeys.init(172800).should.be.fulfilled;\nlet votingForMinThreshold = await VotingForMinThreshold.new();\nconst votingForMinThresholdEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingForMinThreshold.address);\nvotingForMinThreshold = await VotingForMinThreshold.at(votingForMinThresholdEternalStorage.address);\nawait votingForMinThreshold.init(172800, 3).should.be.fulfilled;\nlet votingForProxy = await VotingForProxy.new();\nconst votingForProxyEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingForProxy.address);\nvotingForProxy = await VotingForProxy.at(votingForProxyEternalStorage.address);\nawait votingForProxy.init(172800).should.be.fulfilled;\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorage.address, validatorMetadata.address);\nvoting = await VotingToManageEmissionFunds.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorage.address, voting.address);\nvoting = await VotingToManageEmissionFunds.at(votingEternalStorage.address);\nemissionFunds = await EmissionFunds.new(voting.address);\nemissionReleaseTime = moment.utc().add(10, 'minutes').unix();\nemissionReleaseThreshold = moment.duration(3, 'months').asSeconds();\ndistributionThreshold = moment.duration(7, 'days').asSeconds();\nawait voting.init(\n  emissionReleaseTime,\n  emissionReleaseThreshold,\n  distributionThreshold,\n  emissionFunds.address,\n  {from: accounts[8]}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.init(\n  emissionReleaseTime,\n  emissionReleaseThreshold,\n  300,\n  emissionFunds.address\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.init(\n  emissionReleaseTime,\n  emissionReleaseThreshold,\n  distributionThreshold,\n  emissionFunds.address\n).should.be.fulfilled;\nrewardByBlock = await RewardByBlock.new();\nconst rewardByBlockEternalStorage = await EternalStorageProxy.new(proxyStorage.address, rewardByBlock.address);\nrewardByBlock = await RewardByBlock.at(rewardByBlockEternalStorage.address);\n\nawait proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingForKeysEternalStorage.address,\n  votingForMinThresholdEternalStorage.address,\n  votingForProxyEternalStorage.address,\n  votingEternalStorage.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlockEternalStorage.address\n);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(0);\nconst coinbaseInitBalance = await web3.eth.getBalance(coinbase);\nconst howMuchToSend = web3.toWei(10, 'ether');\nconst hash = await web3.eth.sendTransaction({\n  from: coinbase,\n  to: emissionFunds.address,\n  value: howMuchToSend\n});\nconst receipt = await web3.eth.getTransactionReceipt(hash);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(howMuchToSend);\nemissionFundsInitBalance = howMuchToSend;\n(await web3.eth.getBalance(coinbase)).should.be.bignumber.equal(coinbaseInitBalance.sub(howMuchToSend).sub(receipt.gasUsed));\nconst votingNew = await VotingToManageEmissionFundsNew.new();\nawait votingEternalStorage.setProxyStorage(accounts[6]);\nconst {logs} = await votingEternalStorage.upgradeTo(votingNew.address, {from: accounts[6]});\nlogs[0].event.should.be.equal(\"Upgraded\");\nawait votingEternalStorage.setProxyStorage(proxyStorage.address);\nvoting = await VotingToManageEmissionFundsNew.at(votingEternalStorage.address);",
            "err": {},
            "isRoot": false,
            "uuid": "e63b16df-1acf-49a8-8e93-820fffa755d3",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "ea4558c5-53fd-457a-ba42-01e39217b9a4",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "0fac8d93-8f2f-4676-a33a-379f7fc09cc1",
            "title": "#init",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_upgrade_test.js",
            "file": "/test/voting_to_manage_emission_funds_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should change state correctly",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #init should change state correctly",
                "timedOut": false,
                "duration": 106,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await voting.distributionThreshold.call()).should.be.bignumber.equal(distributionThreshold);\n(await voting.emissionFunds.call()).should.be.equal(emissionFunds.address);\n(await voting.emissionReleaseThreshold.call()).should.be.bignumber.equal(emissionReleaseThreshold);\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(emissionReleaseTime);\n(await voting.noActiveBallotExists.call()).should.be.equal(true);\n(await voting.initDisabled.call()).should.be.equal(true);\n(await voting.proxyStorage.call()).should.be.equal(proxyStorage.address);\n(await voting.getKeysManager.call()).should.be.equal(keysManager.address);",
                "err": {},
                "isRoot": false,
                "uuid": "e4ee3d04-0003-447a-99c2-c249ef28d260",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be called more than once",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #init cannot be called more than once",
                "timedOut": false,
                "duration": 19,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.init(\n  emissionReleaseTime,\n  emissionReleaseThreshold,\n  distributionThreshold,\n  emissionFunds.address\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "cbf6c5e2-1bda-4220-835b-b30c764ee448",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e4ee3d04-0003-447a-99c2-c249ef28d260",
              "cbf6c5e2-1bda-4220-835b-b30c764ee448"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 125,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "aa774876-0801-4a61-9d75-3b1384234d50",
            "title": "#createBallot",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_upgrade_test.js",
            "file": "/test/voting_to_manage_emission_funds_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #createBallot \"before each\" hook",
                "timedOut": false,
                "duration": 312,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey, miningKey);\nVOTING_START_DATE = moment.utc().add(31, 'minutes').unix();\nVOTING_END_DATE = moment.utc().add(7, 'days').unix();\nid = await voting.nextBallotId.call();\nawait voting.setTime(moment.utc().add(15, 'minutes').unix());",
                "err": {},
                "isRoot": false,
                "uuid": "ab20d1f4-5c60-4c78-8050-a5017be7b283",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #createBallot happy path",
                "timedOut": false,
                "duration": 900,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nconst emissionFundsAmount = await web3.eth.getBalance(emissionFunds.address);\nconst {logs} = await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nconst ballotInfo = await voting.getBallotInfo.call(id);\nballotInfo.should.be.deep.equal([\n  await voting.getTime.call(), // creationTime\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  false, // isCanceled\n  false, // isFinalized\n  miningKey, // creator\n  \"memo\", // memo\n  new web3.BigNumber(emissionFundsAmount), // amount\n  new web3.BigNumber(0), // burnVotes\n  new web3.BigNumber(0), // freezeVotes\n  new web3.BigNumber(0), // sendVotes\n  accounts[5] // receiver\n]);\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await voting.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(2);\n(await voting.getEmissionReleaseTimeSnapshot.call(id)).should.be.bignumber.equal(emissionReleaseTime);\n(await voting.noActiveBallotExists.call()).should.be.equal(false);\n(await voting.nextBallotId.call()).should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal(\"BallotCreated\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.ballotType.should.be.bignumber.equal(6);\nlogs[0].args.creator.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "1cb71cd3-c96e-4117-90c1-061a75264c41",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "may only be called by valid voting key",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #createBallot may only be called by valid voting key",
                "timedOut": false,
                "duration": 173,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: accounts[3]}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "685e9df6-827b-4777-88ee-772e97fa1425",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "endTime must be greater than startTime",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #createBallot endTime must be greater than startTime",
                "timedOut": false,
                "duration": 39,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_END_DATE = moment.utc().add(19, 'minutes').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "29c6270c-f717-477c-b26c-bf9e0391ff17",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "startTime must be greater than current time",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #createBallot startTime must be greater than current time",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(14, 'minutes').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "44babdd0-f1e7-4933-82fd-8c248735ddfb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be called before emission release time",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #createBallot cannot be called before emission release time",
                "timedOut": false,
                "duration": 64,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(moment.utc().add(7, 'minutes').unix());\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "4812f347-6a66-43ea-ada8-13f19b17a917",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "ballot cannot last longer than distribution threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #createBallot ballot cannot last longer than distribution threshold",
                "timedOut": false,
                "duration": 43,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_END_DATE = moment.utc().add(8, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "ce941686-bebb-4e6c-8041-c3528cfd5b61",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "receiver address should not be 0x0",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #createBallot receiver address should not be 0x0",
                "timedOut": false,
                "duration": 53,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, '0x0000000000000000000000000000000000000000', \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\n(await voting.nextBallotId.call()).should.be.bignumber.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "68977cc2-328d-4513-a72f-2d9113b6618b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot create multiple ballots during the same distribution period",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #createBallot cannot create multiple ballots during the same distribution period",
                "timedOut": false,
                "duration": 469,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.nextBallotId.call()).should.be.bignumber.equal(1);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[6], \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\n(await voting.nextBallotId.call()).should.be.bignumber.equal(1);\nawait voting.setTime(VOTING_END_DATE + 1);\nconst {logs} = await voting.finalize(0, {from: votingKey}).should.be.fulfilled;\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.voter.should.be.equal(votingKey);\nawait voting.setTime(\n  emissionReleaseTime + emissionReleaseThreshold + 1\n);\nVOTING_START_DATE = emissionReleaseTime + emissionReleaseThreshold + 2;\nVOTING_END_DATE = VOTING_START_DATE + 100;\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.nextBallotId.call()).should.be.bignumber.equal(2);\n(await voting.getEmissionReleaseTimeSnapshot.call(1)).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);",
                "err": {},
                "isRoot": false,
                "uuid": "0fc0dae0-9b79-4395-88f3-fcc9e892242e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow creating new ballot after the next emission release threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #createBallot should allow creating new ballot after the next emission release threshold",
                "timedOut": false,
                "duration": 471,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(\n  emissionReleaseTime + emissionReleaseThreshold + 1\n);\nVOTING_START_DATE = emissionReleaseTime + emissionReleaseThreshold + 2;\nVOTING_END_DATE = VOTING_START_DATE + 900;\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);\n(await voting.getEmissionReleaseTimeSnapshot.call(0)).should.be.bignumber.equal(\n  emissionReleaseTime\n);\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(0, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(\n  emissionReleaseTime + emissionReleaseThreshold*5 + 1\n);\nVOTING_START_DATE = emissionReleaseTime + emissionReleaseThreshold*5 - 2;\nVOTING_END_DATE = VOTING_START_DATE + 900;\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = emissionReleaseTime + emissionReleaseThreshold*5 + 2;\nVOTING_END_DATE = VOTING_START_DATE + 900;\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold*5\n);\n(await voting.getEmissionReleaseTimeSnapshot.call(1)).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold*2\n);",
                "err": {},
                "isRoot": false,
                "uuid": "426eadd4-bf72-4290-b4ee-c5264328c271",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1cb71cd3-c96e-4117-90c1-061a75264c41",
              "685e9df6-827b-4777-88ee-772e97fa1425",
              "29c6270c-f717-477c-b26c-bf9e0391ff17",
              "44babdd0-f1e7-4933-82fd-8c248735ddfb",
              "4812f347-6a66-43ea-ada8-13f19b17a917",
              "ce941686-bebb-4e6c-8041-c3528cfd5b61",
              "68977cc2-328d-4513-a72f-2d9113b6618b",
              "0fc0dae0-9b79-4395-88f3-fcc9e892242e",
              "426eadd4-bf72-4290-b4ee-c5264328c271"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2254,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "93d1013f-758e-4145-9612-e24784745087",
            "title": "#cancelNewBallot",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_upgrade_test.js",
            "file": "/test/voting_to_manage_emission_funds_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #cancelNewBallot \"before each\" hook",
                "timedOut": false,
                "duration": 355,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey, miningKey);\nVOTING_START_DATE = moment.utc().add(31, 'minutes').unix();\nVOTING_END_DATE = moment.utc().add(7, 'days').unix();\nid = await voting.nextBallotId.call();\nawait voting.setTime(moment.utc().add(15, 'minutes').unix());",
                "err": {},
                "isRoot": false,
                "uuid": "3a87f606-1289-484d-b23c-be9018ef4315",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #cancelNewBallot happy path",
                "timedOut": false,
                "duration": 856,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const emissionFundsAmount = await web3.eth.getBalance(emissionFunds.address);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nlet creationTime = await voting.getTime.call();\nawait voting.setTime(moment.utc().add(20, 'minutes').unix());\nlet result = await voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal(\"BallotCanceled\");\nresult.logs[0].args.id.should.be.bignumber.equal(id);\nresult.logs[0].args.votingKey.should.be.equal(votingKey);\nlet ballotInfo = await voting.getBallotInfo.call(id);\nballotInfo.should.be.deep.equal([\n  creationTime, // creationTime\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  true, // isCanceled\n  false, // isFinalized\n  miningKey, // creator\n  \"memo\", // memo\n  new web3.BigNumber(emissionFundsAmount), // amount\n  new web3.BigNumber(0), // burnVotes\n  new web3.BigNumber(0), // freezeVotes\n  new web3.BigNumber(0), // sendVotes\n  accounts[5] // receiver\n]);\n(await voting.noActiveBallotExists.call()).should.be.equal(true);\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(emissionReleaseTime);\nid = await voting.nextBallotId.call();\ncreationTime = moment.utc().add(22, 'minutes').unix();\nawait voting.setTime(creationTime);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.freeze, {from: votingKey}).should.be.fulfilled;\n(await voting.noActiveBallotExists.call()).should.be.equal(false);\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey}).should.be.fulfilled;\nballotInfo = await voting.getBallotInfo.call(id);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(creationTime), // creationTime\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  false, // isCanceled\n  true, // isFinalized\n  miningKey, // creator\n  \"memo\", // memo\n  new web3.BigNumber(emissionFundsAmount), // amount\n  new web3.BigNumber(0), // burnVotes\n  new web3.BigNumber(1), // freezeVotes\n  new web3.BigNumber(0), // sendVotes\n  accounts[5] // receiver\n]);\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);",
                "err": {},
                "isRoot": false,
                "uuid": "586d8a16-5453-48c6-9c0b-b46da0bb7ed1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot cancel nonexistent or finalized ballot",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #cancelNewBallot cannot cancel nonexistent or finalized ballot",
                "timedOut": false,
                "duration": 325,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.cancelNewBallot({from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(moment.utc().add(20, 'minutes').unix());\nawait voting.cancelNewBallot({from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "83646649-f6da-456c-9f54-da5464f7874b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "may only be called by creator of a ballot",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #cancelNewBallot may only be called by creator of a ballot",
                "timedOut": false,
                "duration": 239,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(moment.utc().add(20, 'minutes').unix());\nawait voting.cancelNewBallot({from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nconst {logs} = await voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;\nlogs[0].event.should.be.equal(\"BallotCanceled\");\nlogs[0].args.id.should.be.bignumber.equal(id);\nlogs[0].args.votingKey.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "1e24466f-8f4f-4333-b5ad-d0d49520c155",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "may only be called within ballot canceling threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #cancelNewBallot may only be called within ballot canceling threshold",
                "timedOut": false,
                "duration": 240,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(moment.utc().add(31, 'minutes').unix());\nawait voting.cancelNewBallot({from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(moment.utc().add(29, 'minutes').unix());\nawait voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "2f4e5343-e13c-4d4c-a6f1-c161d3db8816",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot cancel already cancelled ballot",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #cancelNewBallot cannot cancel already cancelled ballot",
                "timedOut": false,
                "duration": 352,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(moment.utc().add(29, 'minutes').unix());\nawait voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;\nawait voting.cancelNewBallot({from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "b3c8d23b-0184-455e-b816-0e3212ca6439",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should restore emission release time",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #cancelNewBallot should restore emission release time",
                "timedOut": false,
                "duration": 502,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey}).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);\nawait voting.setTime(\n  emissionReleaseTime + emissionReleaseThreshold*5 + 1\n);\nVOTING_START_DATE = emissionReleaseTime + emissionReleaseThreshold*5 + 2;\nVOTING_END_DATE = VOTING_START_DATE + 900;\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold*5\n);\n(await voting.getEmissionReleaseTimeSnapshot.call(1)).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);\nawait voting.setTime(emissionReleaseTime + emissionReleaseThreshold*5 + 10);\nawait voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);",
                "err": {},
                "isRoot": false,
                "uuid": "b757736b-b856-44d6-87a0-47a2527d2b88",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "586d8a16-5453-48c6-9c0b-b46da0bb7ed1",
              "83646649-f6da-456c-9f54-da5464f7874b",
              "1e24466f-8f4f-4333-b5ad-d0d49520c155",
              "2f4e5343-e13c-4d4c-a6f1-c161d3db8816",
              "b3c8d23b-0184-455e-b816-0e3212ca6439",
              "b757736b-b856-44d6-87a0-47a2527d2b88"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2514,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "b80dc4f2-d6a2-445d-b2a8-a060901094b3",
            "title": "#refreshEmissionReleaseTime",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_upgrade_test.js",
            "file": "/test/voting_to_manage_emission_funds_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should not update until the next threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #refreshEmissionReleaseTime should not update until the next threshold",
                "timedOut": false,
                "duration": 131,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime\n);\nawait voting.setTime(moment.utc().add(15, 'minutes').unix());\nawait voting.refreshEmissionReleaseTime();\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime\n);\nawait voting.setTime(moment.utc().add(2, 'months').unix());\nawait voting.refreshEmissionReleaseTime();\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime\n);",
                "err": {},
                "isRoot": false,
                "uuid": "a362901c-0e38-45a6-b04c-ae23506c0322",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should update to the next threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #refreshEmissionReleaseTime should update to the next threshold",
                "timedOut": false,
                "duration": 151,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime\n);\nawait voting.setTime(moment.utc().add(4, 'months').unix());\nawait voting.refreshEmissionReleaseTime();\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);",
                "err": {},
                "isRoot": false,
                "uuid": "bc3173fa-1276-4678-9c8a-5f6fdf66680b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should update to the future threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #refreshEmissionReleaseTime should update to the future threshold",
                "timedOut": false,
                "duration": 69,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime\n);\nawait voting.setTime(moment.utc().add(7, 'months').unix());\nawait voting.refreshEmissionReleaseTime();\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold*2\n);",
                "err": {},
                "isRoot": false,
                "uuid": "da091e2e-8a65-4f3b-a7cf-698f8d157d5d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a362901c-0e38-45a6-b04c-ae23506c0322",
              "bc3173fa-1276-4678-9c8a-5f6fdf66680b",
              "da091e2e-8a65-4f3b-a7cf-698f8d157d5d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 351,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "ce9c7517-27fc-4a94-bf71-1bca1e24c9fb",
            "title": "#vote",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_upgrade_test.js",
            "file": "/test/voting_to_manage_emission_funds_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #vote \"before each\" hook",
                "timedOut": false,
                "duration": 482,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "receiver = accounts[9];\nawait addValidator(votingKey, miningKey);\nVOTING_START_DATE = moment.utc().add(31, 'minutes').unix();\nVOTING_END_DATE = moment.utc().add(7, 'days').unix();\nid = await voting.nextBallotId.call();\nawait voting.setTime(moment.utc().add(15, 'minutes').unix());\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "3c06d023-dd75-499f-88f2-578025cdf399",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "should let a validator to vote",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #vote should let a validator to vote",
                "timedOut": false,
                "duration": 844,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const emissionFundsBalanceOld = await web3.eth.getBalance(emissionFunds.address);\nconst receiverBalanceOld = await web3.eth.getBalance(receiver);\nawait voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.freeze, {from: votingKey}).should.be.fulfilled;\nconst ballotInfo = await voting.getBallotInfo.call(id);\nballotInfo[4].should.be.equal(true); // isFinalized\nballotInfo[8].should.be.bignumber.equal(0); // burnVotes\nballotInfo[9].should.be.bignumber.equal(1); // freezeVotes\nballotInfo[10].should.be.bignumber.equal(0); // sendVotes\n(await voting.noActiveBallotExists.call()).should.be.equal(true);\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(4);\n(await voting.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(1);\n(await voting.hasAlreadyVoted.call(id, votingKey)).should.be.equal(true);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.decision.should.be.bignumber.equal(choice.freeze);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);\nlogs[0].args.voterMiningKey.should.be.equal(miningKey);\nlogs[1].event.should.be.equal('BallotFinalized');\nlogs[1].args.id.should.be.bignumber.equal(0);\nlogs[1].args.voter.should.be.equal(votingKey);\nemissionFundsBalanceOld.should.be.bignumber.equal(await web3.eth.getBalance(emissionFunds.address));\nreceiverBalanceOld.should.be.bignumber.equal(await web3.eth.getBalance(receiver));",
                "err": {},
                "isRoot": false,
                "uuid": "f329647f-ce59-4457-bb68-763c92881b76",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow multiple voters to vote",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #vote should allow multiple voters to vote",
                "timedOut": false,
                "duration": 1439,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait voting.setTime(VOTING_START_DATE+1);\nawait voting.vote(id, choice.burn, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+2);\nawait voting.vote(id, choice.burn, {from: votingKey2}).should.be.fulfilled;\n(await voting.getAmount.call(id)).should.be.bignumber.equal(\n  await web3.eth.getBalance(emissionFunds.address)\n);\n(await voting.getAmount.call(id)).should.be.bignumber.above(0);\nawait voting.setTime(VOTING_START_DATE+3);\nawait voting.vote(id, choice.burn, {from: votingKey3}).should.be.fulfilled;\nconst ballotInfo = await voting.getBallotInfo.call(id);\nballotInfo[4].should.be.equal(true); // isFinalized\nballotInfo[8].should.be.bignumber.equal(3); // burnVotes\nballotInfo[9].should.be.bignumber.equal(0); // freezeVotes\nballotInfo[10].should.be.bignumber.equal(0); // sendVotes\n(await voting.hasMiningKeyAlreadyVoted.call(id, miningKey)).should.be.equal(true);\n(await voting.hasMiningKeyAlreadyVoted.call(id, miningKey2)).should.be.equal(true);\n(await voting.hasMiningKeyAlreadyVoted.call(id, miningKey3)).should.be.equal(true);\n(await voting.noActiveBallotExists.call()).should.be.equal(true);\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(3);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "f386b3a9-d491-4f43-9466-1bb7d2e49024",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote by nonvoting key",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #vote should not let vote by nonvoting key",
                "timedOut": false,
                "duration": 60,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "1325af8c-ff81-45fc-8d3a-0a1fcef87a66",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote before startTime",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #vote should not let vote before startTime",
                "timedOut": false,
                "duration": 92,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE - 1);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "67291961-d655-4eab-b7fd-c3c0b63402c9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote after endTime",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #vote should not let vote after endTime",
                "timedOut": false,
                "duration": 269,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE + 1);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "b986c438-8dbb-4447-88b5-7cf126ed8589",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with already voted key",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #vote should not let vote with already voted key",
                "timedOut": false,
                "duration": 202,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "78c7fc4f-4589-4bbb-9fa2-a0d5e9d853d1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid choice",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #vote should not let vote with invalid choice",
                "timedOut": false,
                "duration": 154,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, 0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, 4, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "00cf40cb-77cb-44f8-b9f3-19213e80117a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid id",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #vote should not let vote with invalid id",
                "timedOut": false,
                "duration": 156,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(99, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(-3, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "46e32f53-27ab-465e-ab34-05a5ce63b14e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote if already finalized",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #vote should not let vote if already finalized",
                "timedOut": false,
                "duration": 1518,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey2, miningKey2);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(VOTING_START_DATE + 1);\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nid = await voting.nextBallotId.call();\nVOTING_START_DATE += emissionReleaseThreshold;\nVOTING_END_DATE += emissionReleaseThreshold;\nawait voting.setTime(VOTING_START_DATE - 5*60);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE + 11*60);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait addValidator(votingKey3, miningKey3);\nawait voting.vote(id, choice.send, {from: votingKey3}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "7479da22-59ea-438a-a4fb-97831a2aade5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with old miningKey",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #vote should not let vote with old miningKey",
                "timedOut": false,
                "duration": 2416,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey2, miningKey2);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait proxyStorage.setVotingContractMock(coinbase);\nconst {logs} = await keysManager.swapMiningKey(miningKey3, miningKey);\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nawait proxyStorage.setVotingContractMock(votingForKeysEternalStorage.address);\nawait poaNetworkConsensus.setSystemAddress(coinbase);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress('0xffffFFFfFFffffffffffffffFfFFFfffFFFfFFfE');\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait proxyStorage.setVotingContractMock(coinbase);\nawait swapVotingKey(votingKey3, miningKey3);\nawait proxyStorage.setVotingContractMock(votingForKeysEternalStorage.address);\nawait voting.vote(id, choice.send, {from: votingKey3}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nid = await voting.nextBallotId.call();\nVOTING_START_DATE += emissionReleaseThreshold;\nVOTING_END_DATE += emissionReleaseThreshold;\nawait voting.setTime(VOTING_START_DATE - 5*60);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey2}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE + 11*60);\nawait voting.vote(id, choice.send, {from: votingKey3}).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait proxyStorage.setVotingContractMock(coinbase);\nlet result = await keysManager.swapMiningKey(miningKey, miningKey3);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nawait swapVotingKey(votingKey, miningKey);\nawait proxyStorage.setVotingContractMock(votingForKeysEternalStorage.address);\nawait poaNetworkConsensus.setSystemAddress(coinbase);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress('0xffffFFFfFFffffffffffffffFfFFFfffFFFfFFfE');\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized",
                "err": {},
                "isRoot": false,
                "uuid": "94c8b4cd-5fe1-4fe2-943d-94b9804c71ff",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote if ballot is canceled",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #vote should not let vote if ballot is canceled",
                "timedOut": false,
                "duration": 140,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(moment.utc().add(20, 'minutes').unix());\nconst {logs} = await voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;\nlogs[0].event.should.be.equal(\"BallotCanceled\");\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "6776747c-825d-4151-a075-3530b4b31caf",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f329647f-ce59-4457-bb68-763c92881b76",
              "f386b3a9-d491-4f43-9466-1bb7d2e49024",
              "1325af8c-ff81-45fc-8d3a-0a1fcef87a66",
              "67291961-d655-4eab-b7fd-c3c0b63402c9",
              "b986c438-8dbb-4447-88b5-7cf126ed8589",
              "78c7fc4f-4589-4bbb-9fa2-a0d5e9d853d1",
              "00cf40cb-77cb-44f8-b9f3-19213e80117a",
              "46e32f53-27ab-465e-ab34-05a5ce63b14e",
              "7479da22-59ea-438a-a4fb-97831a2aade5",
              "94c8b4cd-5fe1-4fe2-943d-94b9804c71ff",
              "6776747c-825d-4151-a075-3530b4b31caf"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 7290,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "ca2ee695-b3d6-4730-9691-6a2ffd220a00",
            "title": "#finalize",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_upgrade_test.js",
            "file": "/test/voting_to_manage_emission_funds_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize \"before each\" hook",
                "timedOut": false,
                "duration": 299,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "receiver = accounts[9];\nawait addValidator(votingKey, miningKey);\nVOTING_START_DATE = moment.utc().add(31, 'minutes').unix();\nVOTING_END_DATE = moment.utc().add(7, 'days').unix();\nid = await voting.nextBallotId.call();\nawait voting.setTime(moment.utc().add(15, 'minutes').unix());",
                "err": {},
                "isRoot": false,
                "uuid": "ec6a02e4-23ae-4f28-b117-9e7d0d9376cd",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize happy path",
                "timedOut": false,
                "duration": 593,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.noActiveBallotExists.call()).should.be.equal(false);\nawait addValidator(votingKey2, miningKey2);\nawait voting.setTime(VOTING_END_DATE + 1);\nconst {logs} = await voting.finalize(id, {from: votingKey2}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.noActiveBallotExists.call()).should.be.equal(true);\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);\nlogs[0].event.should.be.equal('BallotFinalized');\nlogs[0].args.id.should.be.bignumber.equal(id);\nlogs[0].args.voter.should.be.equal(votingKey2);",
                "err": {},
                "isRoot": false,
                "uuid": "f7398719-f684-49ce-a575-533981b673fc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "freeze funds if it did not pass minimum voters count",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize freeze funds if it did not pass minimum voters count",
                "timedOut": false,
                "duration": 1073,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(2);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.burn, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey3}).should.be.fulfilled;\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(4);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(emissionFundsInitBalance);\nemissionFundsInitBalance.should.be.bignumber.above(0);",
                "err": {},
                "isRoot": false,
                "uuid": "c0c833ef-fdf7-4837-8983-973b5baae10e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "freeze funds if there is no majority of 3 votes",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize freeze funds if there is no majority of 3 votes",
                "timedOut": false,
                "duration": 1257,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.freeze, {from: votingKey3}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(4);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(emissionFundsInitBalance);\nemissionFundsInitBalance.should.be.bignumber.above(0);",
                "err": {},
                "isRoot": false,
                "uuid": "2a3b382b-5633-4392-b595-b9b420707307",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "freeze funds if there is no majority of 4 votes",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize freeze funds if there is no majority of 4 votes",
                "timedOut": false,
                "duration": 1648,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait addValidator(votingKey4, miningKey4);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.send, {from: votingKey3}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey4}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(4);\n(await voting.getTotalVoters.call(id)).should.be.bignumber.equal(4);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(emissionFundsInitBalance);\nemissionFundsInitBalance.should.be.bignumber.above(0);",
                "err": {},
                "isRoot": false,
                "uuid": "5a6722ac-341b-48fe-ad8e-ce6232117d0d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "send funds to receiver if most votes are for sending",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize send funds to receiver if most votes are for sending",
                "timedOut": false,
                "duration": 2436,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait addValidator(votingKey4, miningKey4);\nconst receiverInitBalance = await web3.eth.getBalance(receiver);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(emissionFundsInitBalance);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey3}).should.be.fulfilled;\nawait voting.vote(id, choice.freeze, {from: votingKey4}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(2);\n(await voting.getTotalVoters.call(id)).should.be.bignumber.equal(4);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(0);\n(await web3.eth.getBalance(receiver)).should.be.bignumber.equal(\n  receiverInitBalance.add(emissionFundsInitBalance)\n);",
                "err": {},
                "isRoot": false,
                "uuid": "145aaf8a-8d99-4b2f-b7c1-1c168c3b3649",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "send funds to receiver if most votes are for sending",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize send funds to receiver if most votes are for sending",
                "timedOut": false,
                "duration": 1689,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nconst receiverInitBalance = await web3.eth.getBalance(receiver);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(emissionFundsInitBalance);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey3}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(2);\n(await voting.getTotalVoters.call(id)).should.be.bignumber.equal(3);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(0);\n(await web3.eth.getBalance(receiver)).should.be.bignumber.equal(\n  receiverInitBalance.add(emissionFundsInitBalance)\n);",
                "err": {},
                "isRoot": false,
                "uuid": "94427948-3155-474b-9c57-5fd20eb51b95",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "burn funds if most votes are for burning",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize burn funds if most votes are for burning",
                "timedOut": false,
                "duration": 1768,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nconst receiverInitBalance = await web3.eth.getBalance(receiver);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.above(0);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey3}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(3);\n(await voting.getTotalVoters.call(id)).should.be.bignumber.equal(3);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(0);\n(await web3.eth.getBalance(receiver)).should.be.bignumber.equal(receiverInitBalance);",
                "err": {},
                "isRoot": false,
                "uuid": "029480f9-aaea-4194-bc4b-ff3ded2a226f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevents finalize with invalid id",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize prevents finalize with invalid id",
                "timedOut": false,
                "duration": 270,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "1eae2ac9-bca4-4671-a90d-c6fb00cd3a88",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "do not let finalize if a ballot is active",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize do not let finalize if a ballot is active",
                "timedOut": false,
                "duration": 191,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE + 1);\nawait voting.finalize(0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "77c6c9c2-e586-4039-8472-7afb33a1ccb8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize immediately if the last validator gave his vote",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize finalize immediately if the last validator gave his vote",
                "timedOut": false,
                "duration": 1119,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\n\nawait voting.vote(id, choice.burn, {from: votingKey2}).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n\nawait voting.vote(id, choice.burn, {from: votingKey3}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n\n(await voting.noActiveBallotExists.call()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "2b237025-ce6e-42a4-bdb4-25a6094171d5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "does not finalize immediately until ballot canceling threshold is reached",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize does not finalize immediately until ballot canceling threshold is reached",
                "timedOut": false,
                "duration": 1319,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(17, 'minutes').unix();\nVOTING_END_DATE = moment.utc().add(20, 'minutes').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey3}).should.be.fulfilled;\n\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait voting.setTime(moment.utc().add(31, 'minutes').unix());\nawait voting.finalize(id, {from: votingKey3}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized",
                "err": {},
                "isRoot": false,
                "uuid": "4cfc3e4a-4444-4073-86b4-998e1429f39e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevents double finalize",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize prevents double finalize",
                "timedOut": false,
                "duration": 291,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(0, {from: votingKey}).should.be.fulfilled;\nawait voting.finalize(0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "19db711a-947b-4d3a-928d-359ac318b880",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should refresh emission release time",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize should refresh emission release time",
                "timedOut": false,
                "duration": 246,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime\n);\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(0, {from: votingKey}).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);",
                "err": {},
                "isRoot": false,
                "uuid": "e356f548-1b76-4b9d-837e-126a09223d4e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "deny finalization if the voting key is a contract",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize deny finalization if the voting key is a contract",
                "timedOut": false,
                "duration": 758,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const voter = await VotingKey.new(voting.address);\nvotingKey2 = voter.address;\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.noActiveBallotExists.call()).should.be.equal(false);\nawait addValidator(votingKey2, miningKey2);\nawait voting.setTime(VOTING_END_DATE + 1);\n\nawait voter.callFinalize(id).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait voting.finalize(id, {from: votingKey}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.noActiveBallotExists.call()).should.be.equal(true);\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);",
                "err": {},
                "isRoot": false,
                "uuid": "606a9a45-f8bb-4b4c-ae7b-58b28e0be161",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "deny finalization within ballot canceling threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize deny finalization within ballot canceling threshold",
                "timedOut": false,
                "duration": 292,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(17, 'minutes').unix();\nVOTING_END_DATE = moment.utc().add(20, 'minutes').unix();\n\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(moment.utc().add(31, 'minutes').unix());\nawait voting.finalize(id, {from: votingKey}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "a920df7a-7e18-459d-abc2-00dc0958588b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "deny finalization of canceled ballot",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize deny finalization of canceled ballot",
                "timedOut": false,
                "duration": 298,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(moment.utc().add(20, 'minutes').unix());\nlet result = await voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal(\"BallotCanceled\");\nresult.logs[0].args.id.should.be.bignumber.equal(id);\nresult.logs[0].args.votingKey.should.be.equal(votingKey);\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "036c13d9-d782-45aa-aadf-a90b86e02b9a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f7398719-f684-49ce-a575-533981b673fc",
              "c0c833ef-fdf7-4837-8983-973b5baae10e",
              "2a3b382b-5633-4392-b595-b9b420707307",
              "5a6722ac-341b-48fe-ad8e-ce6232117d0d",
              "145aaf8a-8d99-4b2f-b7c1-1c168c3b3649",
              "94427948-3155-474b-9c57-5fd20eb51b95",
              "029480f9-aaea-4194-bc4b-ff3ded2a226f",
              "1eae2ac9-bca4-4671-a90d-c6fb00cd3a88",
              "77c6c9c2-e586-4039-8472-7afb33a1ccb8",
              "2b237025-ce6e-42a4-bdb4-25a6094171d5",
              "4cfc3e4a-4444-4073-86b4-998e1429f39e",
              "19db711a-947b-4d3a-928d-359ac318b880",
              "e356f548-1b76-4b9d-837e-126a09223d4e",
              "606a9a45-f8bb-4b4c-ae7b-58b28e0be161",
              "a920df7a-7e18-459d-abc2-00dc0958588b",
              "036c13d9-d782-45aa-aadf-a90b86e02b9a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 15248,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}